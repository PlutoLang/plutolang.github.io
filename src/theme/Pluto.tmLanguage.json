{
  "fileTypes": [
    "pluto",
    "lua"
  ],
  "firstLineMatch": "\\A#!.*?\\bpluto(\\d+(\\.\\d+)?)?\\b|\\A--\\s+-\\*-\\s*pluto\\s*-\\*-|pluto_use",
  "name": "Pluto",
  "patterns": [
    {
      "include": "#pluto"
    }
  ],
  "repository": {
    "pluto": {
      "patterns": [
        {
          "begin": "(?:(\\$declare)\\s+)?\\b(function)(?:\\s+(?:[a-zA-Z_][a-zA-Z0-9_]*([.:]))?([a-zA-Z_][a-zA-Z0-9_]*))?\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "storage.modifier.pluto"
            },
            "2": {
              "name": "storage.type.function.pluto"
            },
            "3": {
              "name": "punctuation.separator.parameter.pluto"
            },
            "4": {
              "name": "entity.name.function.pluto"
            },
            "5": {
              "name": "punctuation.section.group.begin.pluto"
            }
          },
          "end": "(\\))(?:(:)\\s+(void|\\([^)]*\\)|\\??(?:(?:string|number|int|float|bool(?:ean)?|function|table|userdata|any|nil|[a-zA-Z_][a-zA-Z0-9_]*|\\{[^}]*\\})\\|)*(?:string|number|int|float|bool(?:ean)?|function|table|userdata|any|nil|[a-zA-Z_][a-zA-Z0-9_]*|\\{[^}]*\\})\\??))?(\\s*<nodiscard>)?",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.group.end.pluto"
            },
            "2": {
              "name": "punctuation.separator.colon.pluto"
            },
            "3": {
              "name": "storage.type.primitive.pluto"
            },
            "4": {
              "name": "storage.type.attribute.pluto"
            }
          },
          "name": "meta.function.pluto",
          "patterns": [
            {
              "include": "#block-comment"
            },
            {
              "match": "\\b(public|private|protected)\\s",
              "name": "storage.modifier.access.pluto"
            },
            {
              "match": "[a-zA-Z_][a-zA-Z0-9_]*",
              "name": "variable.parameter.function.pluto"
            },
            {
              "match": ",",
              "name": "punctuation.separator.comma.pluto"
            },
            {
              "match": "\\.\\.\\.",
              "name": "constant.language.pluto"
            },
            {
              "include": "#function_type"
            },
            {
              "include": "#table_type"
            },
            {
              "match": "(:)\\s+(\\([^)]*\\)|\\??(?:(?:string|number|int|float|bool(?:ean)?|function|table|userdata|any|nil|[a-zA-Z_][a-zA-Z0-9_]*|\\{[^}]*\\})\\|)*(?:string|number|int|float|bool(?:ean)?|function|table|userdata|any|nil|[a-zA-Z_][a-zA-Z0-9_]*|\\{[^}]*\\})\\??)",
              "captures": {
                "1": {
                  "name": "punctuation.separator.colon.pluto"
                },
                "2": {
                  "name": "storage.type.primitive.pluto"
                }
              },
              "name": "meta.typehint.pluto"
            },
            {
              "begin": "=",
              "beginCaptures": {
                "0": {
                  "name": "keyword.operator.assignment.pluto"
                }
              },
              "end": "(?=[,\\)])",
              "patterns": [
                {
                  "include": "#pluto"
                }
              ],
              "name": "meta.default-arguments.pluto"
            }
          ]
        },
        {
          "begin": "(\\$alias)(?:\\s+(?:[a-zA-Z_][a-zA-Z0-9_]*([.:]))?([a-zA-Z_][a-zA-Z0-9_]*))?\\s*(\\()",
          "beginCaptures": {
            "1": {
              "name": "storage.modifier.function.preprocessoralias.pluto"
            },
            "2": {
              "name": "punctuation.separator.parameter.pluto"
            },
            "3": {
              "name": "entity.name.function.preprocessoralias.pluto"
            },
            "4": {
              "name": "punctuation.section.group.begin.pluto"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.group.end.pluto"
            }
          },
          "name": "meta.preprocessoralias.pluto",
          "patterns": [
            {
              "match": "[a-zA-Z_][a-zA-Z0-9_]*",
              "name": "variable.parameter.preprocessoralias.pluto"
            },
            {
              "match": ",",
              "name": "punctuation.separator.comma.pluto"
            }
          ]
        },
        {
          "begin": "(\\$type)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\s*(=)",
          "beginCaptures": {
            "1": {
              "name": "storage.type.named.pluto"
            },
            "2": {
              "name": "entity.name.type.pluto"
            },
            "3": {
              "name": "keyword.operator.assignment.pluto"
            }
          },
          "end": "(?=$)",
          "name": "meta.type.named.pluto",
          "patterns": [
            {
              "include": "#function_type_no_colon"
            },
            {
              "include": "#table_type_no_colon"
            },
            {
              "match": "\\??(?:(?:string|number|int|float|bool(?:ean)?|function|table|userdata|any|nil|[a-zA-Z_][a-zA-Z0-9_]*)\\|)*(?:string|number|int|float|bool(?:ean)?|function|table|userdata|any|nil|[a-zA-Z_][a-zA-Z0-9_]*)\\??",
              "name": "storage.type.primitive.pluto"
            }
          ]
        },
        {
          "match": "\\b(function)($|\\s+)(?:[a-zA-Z_][a-zA-Z0-9_]*([.:]))?([a-zA-Z_][a-zA-Z0-9_]*)?",
          "captures": {
            "1": {
              "name": "storage.type.function.pluto"
            },
            "2": {
              "name": "punctuation.separator.parameter.pluto"
            },
            "3": {
              "name": "entity.name.function.pluto"
            }
          },
          "name": "meta.function.incomplete.pluto"
        },
        {
          "begin": "\\|(?=[a-zA-Z0-9_,\\s]*\\|\\s*->)",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.group.begin.pluto"
            }
          },
          "end": "(\\|)\\s*(->)",
          "endCaptures": {
            "1": {
              "name": "punctuation.section.group.end.pluto"
            },
            "2": {
              "name": "storage.type.function.arrow.pluto"
            }
          },
          "patterns": [
            {
              "match": "[a-zA-Z_][a-zA-Z0-9_]*",
              "name": "variable.parameter.function.pluto"
            },
            {
              "match": ",",
              "name": "punctuation.separator.comma.pluto"
            }
          ]
        },
        {
          "include": "#simpleexp"
        },
        {
          "match": "\\(",
          "name": "punctuation.section.group.begin.pluto"
        },
        {
          "match": "\\)",
          "name": "punctuation.section.group.end.pluto"
        },
        {
          "begin": "(?<=[\\.\\:]cdef|ffi\\.struct)\\s*(\\[(=*)\\[)",
          "beginCaptures": {
            "0": {
              "name": "string.quoted.other.multiline.pluto"
            },
            "1": {
              "name": "punctuation.definition.string.begin.pluto"
            }
          },
          "contentName": "meta.embedded.pluto",
          "end": "(\\]\\2\\])",
          "endCaptures": {
            "0": {
              "name": "string.quoted.other.multiline.pluto"
            },
            "1": {
              "name": "punctuation.definition.string.end.pluto"
            }
          },
          "patterns": [
            {
              "include": "source.c"
            }
          ]
        },
        {
          "begin": "(?<!--)\\[(=*)\\[",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.string.begin.pluto"
            }
          },
          "end": "\\]\\1\\]",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.pluto"
            }
          },
          "name": "string.quoted.other.multiline.pluto"
        },
        {
          "captures": {
            "1": {
              "name": "punctuation.definition.comment.pluto"
            }
          },
          "match": "\\A(#!).*$\\n?",
          "name": "comment.line.shebang.pluto"
        },
        {
          "include": "#block-comment"
        },
        {
          "begin": "-->?",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.pluto"
            }
          },
          "end": "\\n",
          "name": "comment.line.double-dash.pluto",
          "patterns": [
            {
              "include": "#annotations"
            }
          ]
        },
        {
          "captures": {
            "1": {
              "name": "keyword.control.goto.pluto"
            }
          },
          "match": "\\b(goto)\\s+([a-zA-Z_][a-zA-Z0-9_]*)",
          "name": "meta.goto.pluto"
        },
        {
          "captures": {
            "1": {
              "name": "punctuation.definition.label.begin.pluto"
            },
            "2": {
              "name": "punctuation.definition.label.end.pluto"
            }
          },
          "match": "(::)[a-zA-Z_][a-zA-Z0-9_]*(::)",
          "name": "meta.goto-label.pluto"
        },
        {
          "match": "\\?\\?",
          "name": "keyword.operator.nullcoal.pluto"
        },
        {
          "match": "\\?\\.",
          "name": "punctuation.accessor.pluto"
        },
        {
          "match": "(\\?)\\[",
          "captures": {
            "1": {
              "name": "punctuation.accessor.pluto"
            }
          },
          "name": "meta.safe-navigation-array.pluto"
        },
        {
          "match": "(\\|>)\\s*(?:[a-zA-Z_][a-zA-Z0-9_]*([.:]))?([a-zA-Z_][a-zA-Z0-9_]*)",
          "captures": {
            "1": {
              "name": "keyword.operator.pipe.pluto"
            },
            "2": {
              "name": "punctuation.separator.colon.pluto"
            },
            "3": {
              "name": "support.function.any-method.pluto"
            }
          }
        },
        {
          "match": "<(const|close)>",
          "name": "storage.type.attribute.pluto"
        },
        {
          "match": "\\$(define|alias|haltcompiler)\\b",
          "name": "storage.modifier.pluto"
        },
        {
          "begin": "(?<!\\S)(\\$declare)\\s+(?!class)(?!pluto_class)(?!function)(?:(and|break|do|else|elseif|end|false|for|function|goto|if|in|local|nil|not|or|repeat|pluto_use|pluto_switch|pluto_continue|pluto_enum|pluto_new|pluto_class|pluto_export|pluto_try|pluto_catch|switch|continue|enum|new|class|export|try|catch|return|then|true|until|while)\\b|\\w+)\\s*(:)\\s*(\\{)",
          "beginCaptures": {
            "1": {
              "name": "storage.modifier.pluto"
            },
            "2": {
              "name": "invalid.name.reserved.not-narrow.not-overridable.not-optional.not-special.pluto"
            },
            "3": {
              "name": "punctuation.separator.colon.pluto"
            },
            "4": {
              "name": "punctuation.section.table.begin.pluto"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.table.end.pluto"
            }
          },
          "name": "meta.typehint.table.pluto",
          "patterns": [
            {
              "include": "#table_type_body"
            }
          ]
        },
        {
          "match": "(?<!\\S)(\\$declare)\\s+(?!class)(?!pluto_class)(?!function)(?:(and|break|do|else|elseif|end|false|for|function|goto|if|in|local|nil|not|or|repeat|pluto_use|pluto_switch|pluto_continue|pluto_enum|pluto_new|pluto_class|pluto_export|pluto_try|pluto_catch|switch|continue|enum|new|class|export|try|catch|return|then|true|until|while)\\b|\\w+)(?:\\s*(:)\\s+(?!function\\s*\\()(\\??(?:(?:string|number|int|float|bool(?:ean)?|function|table|userdata|any|nil|[a-zA-Z_][a-zA-Z0-9_]*)\\|)*(?:string|number|int|float|bool(?:ean)?|function|table|userdata|any|nil|[a-zA-Z_][a-zA-Z0-9_]*)\\??))?(?!\\s*=\\s*\\|[a-zA-Z0-9_,\\s]*\\|\\s*->)",
          "captures": {
            "1": {
              "name": "storage.modifier.pluto"
            },
            "2": {
              "name": "invalid.name.reserved.not-narrow.not-overridable.not-optional.not-special.pluto"
            },
            "3": {
              "name": "punctuation.separator.colon.pluto"
            },
            "4": {
              "name": "storage.type.primitive.pluto"
            }
          }
        },
        {
          "match": "\\+|-|%|#|\\*|\\/|\\^|==|~=|!=|<=?|>=?|(?<!\\.)\\.{2}(?!\\.)|\\$|\\||~|&",
          "name": "keyword.operator.logical.pluto"
        },
        {
          "match": "\\:?=|->",
          "name": "keyword.operator.assignment.pluto"
        },
        {
          "match": "\\?(?![:(])",
          "name": "keyword.operator.ternary.pluto"
        },
        {
          "match": "(?<=\\s)\\:(?!\\w)",
          "name": "keyword.operator.ternary.pluto"
        },
        {
          "name": "meta.class.pluto",
          "begin": "\\b((?<![.:])(?:pluto_)?class)\\s+(?!begin)(?!end)(?:[a-zA-Z_][a-zA-Z0-9_]*(\\.))?([a-zA-Z_][a-zA-Z0-9_]*)?",
          "beginCaptures": {
            "1": {
              "name": "storage.type.class.pluto"
            },
            "2": {
              "name": "punctuation.separator.parameter.pluto"
            },
            "3": {
              "name": "entity.name.type.class.pluto"
            }
          },
          "end": "\\bend\\b",
          "endCaptures": {
            "0": {
              "name": "keyword.control.pluto"
            }
          },
          "patterns": [
            {
              "begin": "\\b(public|private|protected)\\b",
              "beginCaptures": {
                "1": {
                  "name": "storage.modifier.access.pluto"
                }
              },
              "end": "\\w+"
            },
            {
              "include": "#function_type"
            },
            {
              "include": "#table_type"
            },
            {
              "match": "(:)\\s+(\\([^)]*\\)|\\??(?:(?:string|number|int|float|bool(?:ean)?|function|table|userdata|any|nil|[a-zA-Z_][a-zA-Z0-9_]*|\\{[^}]*\\})\\|)*(?:string|number|int|float|bool(?:ean)?|function|table|userdata|any|nil|[a-zA-Z_][a-zA-Z0-9_]*|\\{[^}]*\\})\\??)",
              "captures": {
                "1": {
                  "name": "punctuation.separator.colon.pluto"
                },
                "2": {
                  "name": "storage.type.primitive.pluto"
                }
              },
              "name": "meta.typehint.pluto"
            },
            {
              "include": "#pluto"
            }
          ]
        },
        {
          "captures": {
            "1": {
              "name": "storage.type.enum.pluto"
            },
            "2": {
              "name": "keyword.control.pluto"
            },
            "3": {
              "name": "entity.name.type.enum.pluto"
            },
            "4": {
              "name": "keyword.control.pluto"
            }
          },
          "match": "\\b((?:pluto_)?enum\\b(?:\\s+class)?)(?:\\s+(begin|do)|(?:\\s+([a-zA-Z_][a-zA-Z0-9_]*)?)(?:\\s+(begin|do))?)?",
          "name": "meta.enum.pluto"
        },
        {
          "captures": {
            "1": {
              "name": "storage.modifier.extends.pluto"
            },
            "2": {
              "name": "punctuation.separator.parameter.pluto"
            },
            "3": {
              "name": "entity.other.inherited-class.pluto"
            }
          },
          "match": "\\b(extends)\\s+(?:[a-zA-Z_][a-zA-Z0-9_]*(\\.))?([a-zA-Z_][a-zA-Z0-9_]*)?",
          "name": "meta.extends.pluto"
        },
        {
          "captures": {
            "1": {
              "name": "keyword.control.pluto"
            },
            "2": {
              "name": "punctuation.separator.parameter.pluto"
            },
            "3": {
              "name": "support.class.pluto"
            }
          },
          "match": "\\b(?<![.:])(new|pluto_new|instanceof)\\s+(?:[a-zA-Z_][a-zA-Z0-9_]*(\\.))?([a-zA-Z_][a-zA-Z0-9_]*)?",
          "name": "meta.classoperator.pluto"
        },
        {
          "match": "\\b(?<![.:])(break|continue|do|else|for|if|elseif|goto|return|switch|pluto_switch|then|repeat|while|until|end|in|as|case|default|begin|pluto_use|pluto_try|pluto_catch|try|catch)\\b",
          "name": "keyword.control.pluto"
        },
        {
          "begin": "\\b(?<!\\.)(local|global)\\s+(?!class)(?!pluto_class)(?!function)(?:(and|break|do|else|elseif|end|false|for|function|goto|if|in|local|nil|not|or|repeat|pluto_use|pluto_switch|pluto_continue|pluto_enum|pluto_new|pluto_class|pluto_export|pluto_try|pluto_catch|switch|continue|enum|new|class|export|try|catch|return|then|true|until|while)\\b|\\w+)\\s*(:)\\s*(\\{)",
          "beginCaptures": {
            "1": {
              "name": "storage.modifier.pluto"
            },
            "2": {
              "name": "invalid.name.reserved.not-narrow.not-overridable.not-optional.not-special.pluto"
            },
            "3": {
              "name": "punctuation.separator.colon.pluto"
            },
            "4": {
              "name": "punctuation.section.table.begin.pluto"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.table.end.pluto"
            }
          },
          "name": "meta.typehint.table.pluto",
          "patterns": [
            {
              "include": "#table_type_body"
            }
          ]
        },
        {
          "include": "#function_type"
        },
        {
          "match": "\\b(?<!\\.)(local|global)\\s+(?!class)(?!pluto_class)(?!function)(?:(and|break|do|else|elseif|end|false|for|function|goto|if|in|local|nil|not|or|repeat|pluto_use|pluto_switch|pluto_continue|pluto_enum|pluto_new|pluto_class|pluto_export|pluto_try|pluto_catch|switch|continue|enum|new|class|export|try|catch|return|then|true|until|while)\\b|\\w+)(?:\\s*(:)\\s+(?!function\\s*\\()(\\??(?:(?:string|number|int|float|bool(?:ean)?|function|table|userdata|any|nil|[a-zA-Z_][a-zA-Z0-9_]*)\\|)*(?:string|number|int|float|bool(?:ean)?|function|table|userdata|any|nil|[a-zA-Z_][a-zA-Z0-9_]*)\\??))?(?!\\s*=\\s*\\|[a-zA-Z0-9_,\\s]*\\|\\s*->)",
          "captures": {
            "1": {
              "name": "storage.modifier.pluto"
            },
            "2": {
              "name": "invalid.name.reserved.not-narrow.not-overridable.not-optional.not-special.pluto"
            },
            "3": {
              "name": "punctuation.separator.colon.pluto"
            },
            "4": {
              "name": "storage.type.primitive.pluto"
            }
          }
        },
        {
          "match": "\\b(?<![.\\:])(local|global|export|pluto_export)\\b",
          "name": "storage.modifier.pluto"
        },
        {
          "match": "\\b(?<![.\\:])(static)(?!\\s*\\()\\b",
          "name": "storage.modifier.pluto"
        },
        {
          "match": "(?<![^.]\\.|:)\\b(false|nil|true)\\b|(?<![.])\\.\\.\\.(?!\\.)",
          "name": "constant.language.pluto"
        },
        {
          "match": "(?<![^.]\\.|:)\\b(_G|_VERSION|_PVERSION|math\\.(pi|huge|mininteger|maxinteger)|os\\.(platform|arch)|json\\.(null|withnull|withorder|msgpack))\\b",
          "name": "constant.language.pluto support.constant.builtin.pluto"
        },
        {
          "match": "(?<![^.]\\.|:)\\b(self)\\b",
          "name": "variable.language.self.pluto"
        },
        {
          "match": "(?<![^.]\\.|:)\\b((pluto_)?parent)\\b",
          "name": "variable.language.parent.pluto"
        },
        {
          "match": "(?<![^.]\\.|:)\\b(assert|collectgarbage|dofile|error|getfenv|getmetatable|ipairs|loadfile|loadstring|module|next|pairs|pcall|print|rawequal|rawget|rawset|require|select|setfenv|setmetatable|tonumber|tostring|type|unpack|xpcall)\\b(?=\\s*(?:[({\"']|\\[\\[))",
          "name": "support.function.pluto"
        },
        {
          "match": "\\b(?<!(?<!\\.)\\.)(?<!:)(coroutine|package|string|utf8|table|math|io|os|debug)\\b",
          "name": "support.function.library.pluto"
        },
        {
          "match": "\\b(and|or|not)\\b",
          "name": "keyword.operator.logical.pluto"
        },
        {
          "match": "!",
          "name": "keyword.operator.logical.pluto"
        },
        {
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\s*=\\s*\\|[a-zA-Z0-9_,\\s]*\\|\\s*->)",
          "captures": {
            "1": {
              "name": "entity.name.function.arrow.pluto"
            }
          }
        },
        {
          "match": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?=\\s*(?:[({\"']|\\$[\"']|\\[\\[))",
          "name": "support.function.any-method.pluto"
        },
        {
          "match": "(?<=[^.]\\.|:)\\b([a-zA-Z_][a-zA-Z0-9_]*)",
          "name": "variable.other.pluto"
        },
        {
          "match": "\\.\\b",
          "name": "punctuation.accessor.pluto"
        },
        {
          "match": "\\b(\\??:)([a-zA-Z0-9_]+)(\\??)",
          "captures": {
            "1": {
              "name": "punctuation.accessor.pluto"
            },
            "2": {
              "name": "support.function.pluto"
            },
            "3": {
              "name": "punctuation.accessor.pluto"
            }
          },
          "name": "meta.method-call.pluto"
        },
        {
          "match": ":",
          "name": "punctuation.separator.colon.pluto"
        },
        {
          "match": ",",
          "name": "punctuation.separator.comma.pluto"
        },
        {
          "match": ";",
          "name": "punctuation.terminator.pluto"
        },
        {
          "begin": "\\[",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.destructuring.begin.pluto"
            }
          },
          "end": "\\]",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.destructuring.end.pluto"
            }
          },
          "name": "meta.destructuring.pluto",
          "patterns": [
            {
              "include": "#pluto"
            }
          ]
        }
      ]
    },
    "block-comment": {
      "patterns": [
        {
          "begin": "--\\[(=*)\\[",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.begin.pluto"
            }
          },
          "end": "\\]\\1\\]",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.end.pluto"
            }
          },
          "name": "comment.block.pluto",
          "patterns": [
            {
              "include": "#annotations"
            }
          ]
        }
      ]
    },
    "simpleexp": {
      "patterns": [
        {
          "match": "(?<![\\w\\d])0[xX][0-9A-Fa-f][0-9A-Fa-f_]*(\\.[0-9A-Fa-f]+)?([eE]-?\\d*)?([pP][-+]\\d+)?",
          "name": "constant.numeric.float.hexadecimal.pluto"
        },
        {
          "match": "(?<![\\w\\d])0[xX][0-9A-Fa-f][0-9A-Fa-f_]*(?![pPeE.0-9])",
          "name": "constant.numeric.integer.hexadecimal.pluto"
        },
        {
          "match": "0[bB][01][01_]*",
          "name": "constant.numeric.integer.binary.pluto"
        },
        {
          "match": "0[oO][0-7][0-7_]*",
          "name": "constant.numeric.integer.octal.pluto"
        },
        {
          "match": "(?<![\\w\\d])\\d[0-9_]*(?![pPeE.0-9])",
          "name": "constant.numeric.integer.pluto"
        },
        {
          "match": "(?<![\\w\\d])\\d+(\\.\\d+)?([eE]-?\\d*)?",
          "name": "constant.numeric.float.pluto"
        },
        {
          "begin": "'",
          "beginCaptures": {
            "0": {
              "name": "string.quoted.single.pluto punctuation.definition.string.begin.pluto"
            }
          },
          "end": "'",
          "endCaptures": {
            "0": {
              "name": "string.quoted.single.pluto punctuation.definition.string.end.pluto"
            }
          },
          "name": "string.quoted.single.pluto",
          "patterns": [
            {
              "begin": "(?<!\\\\z)\\n",
              "end": "(?=')",
              "name": "invalid.multiline-quoted-string.pluto",
              "patterns": [
                {
                  "include": "#pluto"
                }
              ]
            },
            {
              "include": "#string_inner"
            }
          ]
        },
        {
          "begin": "\"",
          "beginCaptures": {
            "0": {
              "name": "string.quoted.double.pluto punctuation.definition.string.begin.pluto"
            }
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "string.quoted.double.pluto punctuation.definition.string.end.pluto"
            }
          },
          "name": "string.quoted.double.pluto",
          "patterns": [
            {
              "begin": "(?<!\\\\z)\\n",
              "end": "(?=\")",
              "name": "invalid.multiline-quoted-string.pluto",
              "patterns": [
                {
                  "include": "#pluto"
                }
              ]
            },
            {
              "include": "#string_inner"
            }
          ]
        },
        {
          "begin": "(\\$)(')",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.pluto"
            },
            "2": {
              "name": "string.quoted.single.pluto punctuation.definition.string.begin.pluto"
            }
          },
          "end": "'",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.string.end.pluto string.pluto"
            }
          },
          "name": "meta.string.quoted.single.interpolation.pluto",
          "patterns": [
            {
              "begin": "\\n",
              "end": "(?=')",
              "name": "invalid.multiline-quoted-string.pluto",
              "patterns": [
                {
                  "include": "#pluto"
                }
              ]
            },
            {
              "include": "#string_inner"
            },
            {
              "include": "#string_interpolation"
            },
            {
              "match": "[^']",
              "name": "string.quoted.single.pluto"
            }
          ]
        },
        {
          "begin": "(\\$)(\")",
          "beginCaptures": {
            "1": {
              "name": "keyword.operator.pluto"
            },
            "2": {
              "name": "string.quoted.double.pluto punctuation.definition.string.begin.pluto"
            }
          },
          "end": "\"",
          "endCaptures": {
            "0": {
              "name": "string.pluto punctuation.definition.string.end.pluto"
            }
          },
          "name": "meta.string.quoted.double.interpolation.pluto",
          "patterns": [
            {
              "begin": "\\n",
              "end": "(?=\")",
              "name": "invalid.multiline-quoted-string.pluto",
              "patterns": [
                {
                  "include": "#pluto"
                }
              ]
            },
            {
              "include": "#string_inner"
            },
            {
              "include": "#string_interpolation"
            },
            {
              "match": "[^\"]",
              "name": "string.quoted.double.pluto"
            }
          ]
        },
        {
          "begin": "\\{",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.table.begin.pluto"
            }
          },
          "end": "\\}",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.table.end.pluto"
            }
          },
          "name": "meta.table.pluto",
          "patterns": [
            {
              "include": "#pluto"
            }
          ]
        }
      ]
    },
    "table_type": {
      "begin": "(:)\\s*(\\{)",
      "beginCaptures": {
        "1": {
          "name": "punctuation.separator.colon.pluto"
        },
        "2": {
          "name": "punctuation.section.table.begin.pluto"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.table.end.pluto"
        }
      },
      "name": "meta.typehint.table.pluto",
      "patterns": [
        {
          "include": "#table_type_body"
        }
      ]
    },
    "table_type_body": {
      "patterns": [
        {
          "match": "[a-zA-Z_][a-zA-Z0-9_]*",
          "name": "variable.other.field.pluto"
        },
        {
          "include": "#function_type"
        },
        {
          "include": "#table_type"
        },
        {
          "match": "(:)\\s+(\\([^)]*\\)|\\??(?:(?:string|number|int|float|bool(?:ean)?|function|table|userdata|any|nil|[a-zA-Z_][a-zA-Z0-9_]*|\\{[^}]*\\})\\|)*(?:string|number|int|float|bool(?:ean)?|function|table|userdata|any|nil|[a-zA-Z_][a-zA-Z0-9_]*|\\{[^}]*\\})\\??)",
          "captures": {
            "1": {
              "name": "punctuation.separator.colon.pluto"
            },
            "2": {
              "name": "storage.type.primitive.pluto"
            }
          },
          "name": "meta.typehint.pluto"
        },
        {
          "match": ";",
          "name": "punctuation.terminator.semicolon.pluto"
        },
        {
          "match": ",",
          "name": "punctuation.separator.comma.pluto"
        }
      ]
    },
    "function_type": {
      "begin": "(:)\\s*(function)\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "punctuation.separator.colon.pluto"
        },
        "2": {
          "name": "storage.type.function.pluto"
        }
      },
      "end": "(?=[,)=\\}\\]\\|\\s]|$)",
      "name": "meta.typehint.function.pluto",
      "patterns": [
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.group.begin.pluto"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.group.end.pluto"
            }
          },
          "patterns": [
            {
              "include": "#function_type_params"
            }
          ]
        },
        {
          "include": "#function_type"
        },
        {
          "include": "#table_type"
        },
        {
          "match": "(:)\\s+(\\([^)]*\\)|\\??(?:(?:string|number|int|float|bool(?:ean)?|function|table|userdata|any|nil|[a-zA-Z_][a-zA-Z0-9_]*|\\{[^}]*\\})\\|)*(?:string|number|int|float|bool(?:ean)?|function|table|userdata|any|nil|[a-zA-Z_][a-zA-Z0-9_]*|\\{[^}]*\\})\\??)",
          "captures": {
            "1": {
              "name": "punctuation.separator.colon.pluto"
            },
            "2": {
              "name": "storage.type.primitive.pluto"
            }
          },
          "name": "meta.typehint.pluto"
        }
      ]
    },
    "function_type_params": {
      "patterns": [
        {
          "match": "[a-zA-Z_][a-zA-Z0-9_]*",
          "name": "variable.parameter.function.pluto"
        },
        {
          "match": ",",
          "name": "punctuation.separator.comma.pluto"
        },
        {
          "match": "\\.\\.\\.",
          "name": "constant.language.pluto"
        },
        {
          "include": "#function_type"
        },
        {
          "include": "#table_type"
        },
        {
          "match": "(:)\\s+(\\([^)]*\\)|\\??(?:(?:string|number|int|float|bool(?:ean)?|function|table|userdata|any|nil|[a-zA-Z_][a-zA-Z0-9_]*|\\{[^}]*\\})\\|)*(?:string|number|int|float|bool(?:ean)?|function|table|userdata|any|nil|[a-zA-Z_][a-zA-Z0-9_]*|\\{[^}]*\\})\\??)",
          "captures": {
            "1": {
              "name": "punctuation.separator.colon.pluto"
            },
            "2": {
              "name": "storage.type.primitive.pluto"
            }
          },
          "name": "meta.typehint.pluto"
        }
      ]
    },
    "function_type_no_colon": {
      "begin": "(function)\\s*(?=\\()",
      "beginCaptures": {
        "1": {
          "name": "storage.type.function.pluto"
        }
      },
      "end": "(?=[,)=\\}\\]\\|\\s]|$)",
      "name": "meta.typehint.function.pluto",
      "patterns": [
        {
          "begin": "\\(",
          "beginCaptures": {
            "0": {
              "name": "punctuation.section.group.begin.pluto"
            }
          },
          "end": "\\)",
          "endCaptures": {
            "0": {
              "name": "punctuation.section.group.end.pluto"
            }
          },
          "patterns": [
            {
              "include": "#function_type_params"
            }
          ]
        },
        {
          "include": "#function_type"
        },
        {
          "include": "#table_type"
        },
        {
          "match": "(:)\\s+(\\([^)]*\\)|\\??(?:(?:string|number|int|float|bool(?:ean)?|function|table|userdata|any|nil|[a-zA-Z_][a-zA-Z0-9_]*|\\{[^}]*\\})\\|)*(?:string|number|int|float|bool(?:ean)?|function|table|userdata|any|nil|[a-zA-Z_][a-zA-Z0-9_]*|\\{[^}]*\\})\\??)",
          "captures": {
            "1": {
              "name": "punctuation.separator.colon.pluto"
            },
            "2": {
              "name": "storage.type.primitive.pluto"
            }
          },
          "name": "meta.typehint.pluto"
        }
      ]
    },
    "table_type_no_colon": {
      "begin": "(\\{)",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.table.begin.pluto"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.table.end.pluto"
        }
      },
      "name": "meta.typehint.table.pluto",
      "patterns": [
        {
          "include": "#table_type_body"
        }
      ]
    },
    "string_inner": {
      "patterns": [
        {
          "match": "\\\\[abfnrtvz\\\\\"'\\n]",
          "name": "constant.character.escape.pluto"
        },
        {
          "match": "\\\\\\d{1,3}",
          "name": "constant.character.escape.byte.pluto"
        },
        {
          "match": "\\\\x[0-9A-Fa-f][0-9A-Fa-f]",
          "name": "constant.character.escape.byte.pluto"
        },
        {
          "match": "\\\\u\\{[0-9A-Fa-f]+\\}",
          "name": "constant.character.escape.unicode.pluto"
        },
        {
          "match": "\\\\{",
          "name": "constant.character.escape.interpolate.pluto"
        },
        {
          "match": "\\\\.",
          "name": "invalid.illegal.character.escape.pluto"
        }
      ]
    },
    "string_interpolation": {
      "begin": "\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.section.interpolation.begin.pluto"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.section.interpolation.end.pluto"
        }
      },
      "name": "meta.interpolation.pluto",
      "patterns": [
        {
          "include": "#pluto"
        }
      ]
    },
    "annotations": {
      "patterns": [
        {
          "match": "\\@(param|see|comment|usage|return|field|author|set|class|name|pragma|alias|copyright|summary|description|release|license|fixme|todo|warning|raise|charset|within|local|export|private|constructor|static|include|module|script|example|topic|submodule|classmod|file|function|lfunction|table|section|type|annotation|factory|pluto_warnings|pluto_use|fallthrough)",
          "name": "entity.name.tag.documentation.pluto"
        }
      ]
    }
  },
  "scopeName": "source.pluto",
  "uuid": "39640FE2-5354-4838-B02A-712D069BA69A"
}