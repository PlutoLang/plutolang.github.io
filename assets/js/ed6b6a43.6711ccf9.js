"use strict";(self.webpackChunkpluto=self.webpackChunkpluto||[]).push([[821],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>d});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=r.createContext({}),i=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},p=function(e){var n=i(e.components);return r.createElement(u.Provider,{value:n},e.children)},m="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},O=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=i(t),O=a,d=m["".concat(u,".").concat(O)]||m[O]||c[O]||o;return t?r.createElement(d,s(s({ref:n},p),{},{components:t})):r.createElement(d,s({ref:n},p))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=O;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l[m]="string"==typeof e?e:a,s[1]=l;for(var i=2;i<o;i++)s[i]=t[i];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}O.displayName="MDXCreateElement"},7033:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>s,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>i});var r=t(7462),a=(t(7294),t(3905));const o={sidebar_position:9},s=void 0,l={unversionedId:"New Features/Enumerations",id:"New Features/Enumerations",title:"Enumerations",description:"Pluto adds the following syntax:",source:"@site/docs/New Features/Enumerations.md",sourceDirName:"New Features",slug:"/New Features/Enumerations",permalink:"/docs/New Features/Enumerations",draft:!1,tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Ternary Expressions",permalink:"/docs/New Features/Ternary Expressions"},next:{title:"For-As Loop",permalink:"/docs/New Features/For-As Loop"}},u={},i=[{value:"Scoped Enums",id:"scoped-enums",level:2},{value:"Reflection",id:"reflection",level:2},{value:"Anonymous Enums",id:"anonymous-enums",level:2},{value:"Using Compatibility Mode?",id:"using-compatibility-mode",level:2}],p={toc:i},m="wrapper";function c(e){let{components:n,...t}=e;return(0,a.kt)(m,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Pluto adds the following syntax:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-pluto"},"enum MyEnum begin\n    OPTION_1,\n    OPTION_2,\n    OPTION_3\nend\n\nassert(OPTION_1 == 1)\nassert(OPTION_2 == 2)\nassert(OPTION_3 == 3)\n")),(0,a.kt)("p",null,"Enums can start at a base number, and increment from there."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-pluto"},"enum MyEnum begin\n    OPTION_1 = 0,\n    OPTION_2,\n    OPTION_3 = 5,\n    OPTION_4\nend\n\nassert(OPTION_1 == 0)\nassert(OPTION_2 == 1)\nassert(OPTION_3 == 5)\nassert(OPTION_4 == 6)\n")),(0,a.kt)("p",null,"Since this enum has a name, we can also access its enumerators with that:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-pluto"},"assert(MyEnum.OPTIION_1 == 0)\n")),(0,a.kt)("h2",{id:"scoped-enums"},"Scoped Enums"),(0,a.kt)("p",null,"You can force usage of the ENUM.ENUMERATOR syntax by using 'enum class':"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-pluto"},"enum class MyEnum begin\n    OPTION_1,\n    OPTION_2,\n    OPTION_3\nend\n\nassert(OPTION_1 == nil)\nassert(MyEnum.OPTION_1 == 1)\n")),(0,a.kt)("h2",{id:"reflection"},"Reflection"),(0,a.kt)("p",null,"When you have a named enum, not only can you get its enumerators, but also reflect upon it with some methods:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-pluto"},'enum MyEnum begin\n    OPTION_1,\n    OPTION_2,\n    OPTION_3\nend\n\nfor k, v in MyEnum:kvmap() do\n    print(k, v) -- "OPTION_1    1" ...\nend\n')),(0,a.kt)("p",null,"The following methods are available: ",(0,a.kt)("inlineCode",{parentName:"p"},":names()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},":values()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},":kvmap()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},":vkmap()")),(0,a.kt)("h2",{id:"anonymous-enums"},"Anonymous Enums"),(0,a.kt)("p",null,"Enums can also be anonymous:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-pluto"},"enum begin\n    OPTION_1,\n    OPTION_2,\n    OPTION_3\nend\n\nassert(OPTION_1 == 1)\nassert(OPTION_2 == 2)\nassert(OPTION_3 == 3)\n")),(0,a.kt)("h2",{id:"using-compatibility-mode"},"Using Compatibility Mode?"),(0,a.kt)("p",null,"You may need to use ",(0,a.kt)("inlineCode",{parentName:"p"},"pluto_enum")," instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"enum"),"."))}c.isMDXComponent=!0}}]);