"use strict";(self.webpackChunkpluto=self.webpackChunkpluto||[]).push([[4556],{31:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>o});var s=n(4848),i=n(8453);const t={sidebar_position:2},l=void 0,a={id:"Runtime Environment/String",title:"String",description:"This page documents the changes & additions to the string library in Pluto, which is built on top of Lua 5.4's.",source:"@site/docs/Runtime Environment/String.md",sourceDirName:"Runtime Environment",slug:"/Runtime Environment/String",permalink:"/docs/Runtime Environment/String",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"OS",permalink:"/docs/Runtime Environment/OS"},next:{title:"Table",permalink:"/docs/Runtime Environment/Table"}},c={},o=[{value:"<code>string.upper</code>",id:"stringupper",level:3},{value:"<code>string.lower</code>",id:"stringlower",level:3},{value:"<code>string.split</code>",id:"stringsplit",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Returns",id:"returns",level:4},{value:"<code>string.rfind</code>",id:"stringrfind",level:3},{value:"<code>string.strip</code>",id:"stringstrip",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Returns",id:"returns-1",level:4},{value:"<code>string.lstrip</code>",id:"stringlstrip",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"<code>string.rstrip</code>",id:"stringrstrip",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Returns",id:"returns-3",level:4},{value:"<code>string.isascii</code>",id:"stringisascii",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"<code>string.islower</code>",id:"stringislower",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"<code>string.isalpha</code>",id:"stringisalpha",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"<code>string.isupper</code>",id:"stringisupper",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"<code>string.isalnum</code>",id:"stringisalnum",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"<code>string.iswhitespace</code>",id:"stringiswhitespace",level:3},{value:"Paramaters",id:"paramaters",level:4},{value:"<code>string.uformat</code>",id:"stringuformat",level:3},{value:"<code>string.replace</code>",id:"stringreplace",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Errors",id:"errors",level:4},{value:"<code>string.truncate</code>",id:"stringtruncate",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-4",level:4},{value:"<code>string.contains</code>",id:"stringcontains",level:3},{value:"Parameters",id:"parameters-11",level:4},{value:"<code>string.casefold</code>",id:"stringcasefold",level:3},{value:"Parameters",id:"parameters-12",level:4},{value:"<code>string.formatint</code>",id:"stringformatint",level:3},{value:"Parameters",id:"parameters-13",level:4},{value:"Errors",id:"errors-1",level:4},{value:"<code>string.partition</code>",id:"stringpartition",level:3},{value:"Parameters",id:"parameters-14",level:4},{value:"Returns",id:"returns-5",level:4},{value:"<code>string.endswith</code>",id:"stringendswith",level:3},{value:"Parameters",id:"parameters-15",level:4},{value:"<code>string.startswith</code>",id:"stringstartswith",level:3},{value:"Parameters",id:"parameters-16",level:4}];function d(e){const r={admonition:"admonition",code:"code",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.p,{children:["This page documents the changes & additions to the ",(0,s.jsx)(r.code,{children:"string"})," library in Pluto, which is built on top of Lua 5.4's."]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"stringupper",children:(0,s.jsx)(r.code,{children:"string.upper"})}),"\n",(0,s.jsx)(r.p,{children:"This function now takes a second parameter that specifies which index to capitalize."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local s = "hello"\r\nassert(s:upper(1) == "Hello")\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"stringlower",children:(0,s.jsx)(r.code,{children:"string.lower"})}),"\n",(0,s.jsx)(r.p,{children:"This function now takes a second parameter that specifies which index to make lowercase."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local s = "HELLO"\r\nassert(s:lower(1) == "hELLO")\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"stringsplit",children:(0,s.jsx)(r.code,{children:"string.split"})}),"\n",(0,s.jsx)(r.p,{children:"Splits a string by a separator."}),"\n",(0,s.jsx)(r.h4,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"The string to split."}),"\n",(0,s.jsx)(r.li,{children:"The separator to split a string by. This can be any string."}),"\n"]}),"\n",(0,s.jsx)(r.h4,{id:"returns",children:"Returns"}),"\n",(0,s.jsx)(r.p,{children:"A table."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",metastring:'title="Splitting a string by a single character."',children:'local s = "hello world, how is everyone doing?"\r\nlocal r = string.split(s, " ")\r\n--[[\r\n    The value of \'r\':\r\n    {\r\n        "hello",\r\n        "world,",\r\n        "how",\r\n        "is",\r\n        "everyone",\r\n        "doing?"\r\n    }\r\n--]]\n'})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",metastring:'title="Splitting a string by a substring."',children:'local s = "helloHALLOWORLDworld,HALLOWORLDhowHALLOWORLDisHALLOWORLDeveryoneHALLOWORLDdoing?"\r\nlocal r = string.split(s, "HALLOWORLD")\r\n--[[\r\n    The value of \'r\':\r\n    {\r\n        "hello",\r\n        "world,",\r\n        "how",\r\n        "is",\r\n        "everyone",\r\n        "doing?"\r\n    }\r\n--]]\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"stringrfind",children:(0,s.jsx)(r.code,{children:"string.rfind"})}),"\n",(0,s.jsxs)(r.p,{children:["Identical to the base Lua ",(0,s.jsx)(r.code,{children:"string.find"})," in every way, except it searches right-to-left instead of left-to-right."]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"stringstrip",children:(0,s.jsx)(r.code,{children:"string.strip"})}),"\n",(0,s.jsx)(r.p,{children:"Strips or trims characters from both ends of a string."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"The string to strip."}),"\n",(0,s.jsxs)(r.li,{children:["A string of characters to strip. Defaults to ",(0,s.jsx)(r.code,{children:" \\n\\r\\t\\v\\0"}),"."]}),"\n"]}),"\n",(0,s.jsx)(r.h4,{id:"returns-1",children:"Returns"}),"\n",(0,s.jsx)(r.p,{children:"The new string."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local s = "{|}hello world{|}"\r\nprint(string.strip(s, "{}|")) --\x3e hello world\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"stringlstrip",children:(0,s.jsx)(r.code,{children:"string.lstrip"})}),"\n",(0,s.jsx)(r.p,{children:"Strips or trims characters from the left side of a string."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"The string to strip."}),"\n",(0,s.jsxs)(r.li,{children:["A string of characters to strip. Defaults to ",(0,s.jsx)(r.code,{children:" \\n\\r\\t\\v\\0"}),"."]}),"\n"]}),"\n",(0,s.jsx)(r.h4,{id:"returns-2",children:"Returns"}),"\n",(0,s.jsx)(r.p,{children:"The new string."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local s = "{|}hello world{|}"\r\nprint(string.lstrip(s, "{}|")) --\x3e hello world{|}\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"stringrstrip",children:(0,s.jsx)(r.code,{children:"string.rstrip"})}),"\n",(0,s.jsx)(r.p,{children:"Strips or trims characters from the right side of a string."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"The string to strip."}),"\n",(0,s.jsxs)(r.li,{children:["A string of characters to strip. Defaults to ",(0,s.jsx)(r.code,{children:" \\n\\r\\t\\v\\0"}),"."]}),"\n"]}),"\n",(0,s.jsx)(r.h4,{id:"returns-3",children:"Returns"}),"\n",(0,s.jsx)(r.p,{children:"The new string."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local s = "{|}hello world{|}"\r\nprint(string.rstrip(s, "{}|")) --\x3e {|}hello world\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"stringisascii",children:(0,s.jsx)(r.code,{children:"string.isascii"})}),"\n",(0,s.jsx)(r.p,{children:"Checks if a string is entirely composed of ASCII characters."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"The string to check."}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local s = "HELLOWORLD123"\r\nprint(string.isascii(s)) --\x3e true\n'})}),"\n",(0,s.jsx)(r.admonition,{type:"info",children:(0,s.jsx)(r.p,{children:"This would exclude any multi-byte characters, like emojis."})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"stringislower",children:(0,s.jsx)(r.code,{children:"string.islower"})}),"\n",(0,s.jsx)(r.p,{children:"Checks if a string is entirely composed of lowercase characters."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"The string to check."}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local s = "helloworld"\r\nprint(string.islower(s)) --\x3e true\n'})}),"\n",(0,s.jsx)(r.admonition,{type:"info",children:(0,s.jsx)(r.p,{children:"Whitespace characters are not lowercase characters."})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"stringisalpha",children:(0,s.jsx)(r.code,{children:"string.isalpha"})}),"\n",(0,s.jsx)(r.p,{children:"Checks if a string is entirely composed of alphabetic characters."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"The string to check."}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local s = "HELLOWORLD"\r\nprint(string.isalpha(s)) --\x3e true\n'})}),"\n",(0,s.jsx)(r.admonition,{type:"info",children:(0,s.jsx)(r.p,{children:"Whitespace characters are not alphabetic characters."})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"stringisupper",children:(0,s.jsx)(r.code,{children:"string.isupper"})}),"\n",(0,s.jsx)(r.p,{children:"Checks if a string is entirely composed of uppercase characters."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"The string to check."}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local s = "HELLOWORLD"\r\nprint(string.isupper(s)) --\x3e true\n'})}),"\n",(0,s.jsx)(r.admonition,{type:"info",children:(0,s.jsx)(r.p,{children:"Whitespace characters are not uppercase characters."})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"stringisalnum",children:(0,s.jsx)(r.code,{children:"string.isalnum"})}),"\n",(0,s.jsx)(r.p,{children:"Checks if a string is entirely composed of alphanumeric characters."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-8",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"The string to check."}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local s = "HELLOWORLD123"\r\nprint(string.isalnum(s)) --\x3e true\n'})}),"\n",(0,s.jsx)(r.admonition,{type:"info",children:(0,s.jsx)(r.p,{children:"Whitespace characters are not alphanumeric characters."})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"stringiswhitespace",children:(0,s.jsx)(r.code,{children:"string.iswhitespace"})}),"\n",(0,s.jsx)(r.p,{children:"Checks if this string is entirely composed of whitespace characters."}),"\n",(0,s.jsx)(r.h4,{id:"paramaters",children:"Paramaters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"The string to check."}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local s = "    \\t \\v \\f     \\t\\t\\t\\t"\r\nprint(string.iswhitespace(s)) --\x3e true\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"stringuformat",children:(0,s.jsx)(r.code,{children:"string.uformat"})}),"\n",(0,s.jsxs)(r.p,{children:["Same as ",(0,s.jsx)(r.code,{children:"string.format"}),", but performs the operation under the ",(0,s.jsx)(r.code,{children:"en_US.UTF-8"})," locale. Ensures the same result on all systems."]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"stringreplace",children:(0,s.jsx)(r.code,{children:"string.replace"})}),"\n",(0,s.jsxs)(r.p,{children:["Replace substrings with another substring. Similar to ",(0,s.jsx)(r.code,{children:"string.gsub"}),", but it operates on plain-text and is not burdened by a pattern capture limit."]}),"\n",(0,s.jsx)(r.h4,{id:"parameters-9",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"original"})," \u2014 The substring to replace."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"substitute"})," \u2014 The replacement substring."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"max_replace"})," \u2014 The maximum number of replacements you wish to occur. The default value is effectively ",(0,s.jsx)(r.code,{children:"0"}),', which means "infinite". If you pass ',(0,s.jsx)(r.code,{children:"1"}),", this leads to a maximum of one replacement, and so on."]}),"\n"]}),"\n",(0,s.jsx)(r.h4,{id:"errors",children:"Errors"}),"\n",(0,s.jsx)(r.p,{children:"An error is thrown under the following conditions:"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"max_replace"})," is less than zero."]}),"\n",(0,s.jsxs)(r.li,{children:["The length of ",(0,s.jsx)(r.code,{children:"substitute"})," is zero."]}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'print(string.replace("Hello, world!", "!", "."))         --\x3e Hello, world.\r\nprint(string.replace("Hello, world!", "apple", ""))      --\x3e Hello, world!\r\nprint(string.replace("Hello, world!", "Hello", "Apple")) --\x3e Apple, world!\r\nprint(string.replace("Hello, world!", "Hello, ", ""))    --\x3e world!\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"stringtruncate",children:(0,s.jsx)(r.code,{children:"string.truncate"})}),"\n",(0,s.jsx)(r.p,{children:"Truncates a given string to a specified length. If an elipsis is desired and the string was actually truncated, the last three characters of the resultant string will be replaced with an elipsis."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-10",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"The string to truncate."}),"\n",(0,s.jsx)(r.li,{children:"The desired length of the truncated string."}),"\n",(0,s.jsxs)(r.li,{children:["A boolean indicating whether or not to replace the last three character of the string with ",(0,s.jsx)(r.code,{children:"..."})," ",(0,s.jsx)(r.strong,{children:"if"})," it is truncated. This is ",(0,s.jsx)(r.code,{children:"false"})," by default."]}),"\n"]}),"\n",(0,s.jsx)(r.h4,{id:"returns-4",children:"Returns"}),"\n",(0,s.jsx)(r.p,{children:"The truncated string."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'print(string.truncate("Hello, world!", 50))      --\x3e Hello, world!\r\nprint(string.truncate("Hello, world!", 5))       --\x3e Hello\r\nprint(string.truncate("Hello, world!", 5, true)) --\x3e He...\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"stringcontains",children:(0,s.jsx)(r.code,{children:"string.contains"})}),"\n",(0,s.jsx)(r.p,{children:"Checks if a string contains a substring."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-11",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"The string to check."}),"\n",(0,s.jsx)(r.li,{children:"The substring to check for."}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local s = "hello world"\r\nprint(string.contains(s, "worl")) --\x3e true\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"stringcasefold",children:(0,s.jsx)(r.code,{children:"string.casefold"})}),"\n",(0,s.jsx)(r.p,{children:"Compares two strings, agnostic of any capitalization."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-12",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"The first string to compare."}),"\n",(0,s.jsx)(r.li,{children:"The second string to compare."}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local s1 = "hello world"\r\nlocal s2 = "heLLo WoRlD"\r\nprint(string.casefold(s1, s2)) --\x3e true\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"stringformatint",children:(0,s.jsx)(r.code,{children:"string.formatint"})}),"\n",(0,s.jsxs)(r.p,{children:["This function makes an integer easier to read by inserting ",(0,s.jsx)(r.code,{children:"separator"})," every ",(0,s.jsx)(r.code,{children:"N"})," characters. It can handle strings representing integers, making it suitable for BigInt modules or any integer beyond Lua's representation limits. If you provide a string, it should consist solely of digits. A single unary operator is permitted at the beginning of the string to indicate whether it's a negative or positive number."]}),"\n",(0,s.jsx)(r.h4,{id:"parameters-13",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"integer"})," \u2014 The integer or string input."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"sep"})," \u2014 The ",(0,s.jsx)(r.code,{children:"separator"})," to use. This must be a single-character string."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"group"})," \u2014 The grouping of each digit pair. This is ",(0,s.jsx)(r.code,{children:"N"}),"."]}),"\n"]}),"\n",(0,s.jsx)(r.h4,{id:"errors-1",children:"Errors"}),"\n",(0,s.jsxs)(r.p,{children:["If the input is a ",(0,s.jsx)(r.strong,{children:"string"})," and does not meet the aforementioned criteria, an error will be thrown."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",metastring:'title="Usage Example"',children:'print(string.formatint(500))      --\x3e 500\r\nprint(string.formatint(-5000))    --\x3e -5,000\r\nprint(string.formatint(50000))    --\x3e 50,000\r\nprint(string.formatint(-500000))  --\x3e -500,000\r\n\r\nprint(string.formatint(500, ".", 2))     --\x3e 5.00\r\nprint(string.formatint("-5000", ",", 1)) --\x3e -5,0,0,0\r\nprint(string.formatint(50000, ",", 4))   --\x3e 5,0000\n'})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",metastring:'title="Error Example"',children:'string.formatint("-500000.4")\n'})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"pluto: test.pluto:3: argument 'integer' for string.formatint was a string, but does not represent a valid integer (bad character: '.')\r\nstack traceback:\r\n        [C]: in function 'string.formatint'\r\n        test.pluto:3: in main chunk\r\n        [C]: in ?\n"})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"stringpartition",children:(0,s.jsx)(r.code,{children:"string.partition"})}),"\n",(0,s.jsx)(r.p,{children:"Splits a string once, on the first occurance of a separator."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-14",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"The string to partition."}),"\n",(0,s.jsx)(r.li,{children:"The separator to partition the string by."}),"\n",(0,s.jsx)(r.li,{children:"A boolean specifying whether to search from the right. By default, this is false, which starts at the left."}),"\n"]}),"\n",(0,s.jsx)(r.h4,{id:"returns-5",children:"Returns"}),"\n",(0,s.jsxs)(r.p,{children:["Two strings: A substring for all the content before the first occurance of ",(0,s.jsx)(r.code,{children:"sep"}),", and another substring for all the content afterwards."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",metastring:'title="A Basic Partition"',children:'local s = "hello world, what\'s up?"\r\nlocal before, after = string.partition(s, " ")\r\n\r\nassert(before == "hello")\r\nassert(after == "world, what\'s up?")\n'})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",metastring:'title="Partioning From The Right"',children:'local s = "hello world, what\'s up?"\r\nlocal before, after = string.partition(s, " ", true)\r\n\r\nassert(before == "hello world, what\'s")\r\nassert(after == "up?")\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"stringendswith",children:(0,s.jsx)(r.code,{children:"string.endswith"})}),"\n",(0,s.jsx)(r.p,{children:"Checks if a string ends with a suffix."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-15",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"The string to check."}),"\n",(0,s.jsx)(r.li,{children:"The substring suffix to check for."}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local s = "hello world"\r\nprint(string.endswith(s, "world")) --\x3e true\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"stringstartswith",children:(0,s.jsx)(r.code,{children:"string.startswith"})}),"\n",(0,s.jsx)(r.p,{children:"Checks if a string starts with a prefix."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-16",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"The string to check."}),"\n",(0,s.jsx)(r.li,{children:"The substring prefix to check for."}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local s = "hello world"\r\nprint(string.startswith(s, "hello")) --\x3e true\n'})})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>l,x:()=>a});var s=n(6540);const i={},t=s.createContext(i);function l(e){const r=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(t.Provider,{value:r},e.children)}}}]);