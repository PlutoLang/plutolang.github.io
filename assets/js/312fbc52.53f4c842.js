"use strict";(self.webpackChunkpluto=self.webpackChunkpluto||[]).push([[5556],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(n),d=r,f=c["".concat(s,".").concat(d)]||c[d]||m[d]||a;return n?o.createElement(f,l(l({ref:t},u),{},{components:n})):o.createElement(f,l({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[c]="string"==typeof e?e:r,l[1]=i;for(var p=2;p<a;p++)l[p]=n[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5972:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>i,toc:()=>p});var o=n(7462),r=(n(7294),n(3905));const a={},l=void 0,i={unversionedId:"QoL Improvements/Local Aliases",id:"QoL Improvements/Local Aliases",title:"Local Aliases",description:"Pluto introduces 2 optional shorthands for the local statement.",source:"@site/docs/QoL Improvements/Local Aliases.md",sourceDirName:"QoL Improvements",slug:"/QoL Improvements/Local Aliases",permalink:"/docs/QoL Improvements/Local Aliases",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Improved Iteration",permalink:"/docs/QoL Improvements/Improved Iteration"},next:{title:"Optional Parentheses",permalink:"/docs/QoL Improvements/Optional Parentheses"}},s={},p=[{value:"Let",id:"let",level:2},{value:"Const",id:"const",level:2},{value:"<code>pluto_use</code> Shorthands",id:"pluto_use-shorthands",level:2},{value:"For Integrators",id:"for-integrators",level:2}],u={toc:p},c="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Pluto introduces 2 optional shorthands for the ",(0,r.kt)("inlineCode",{parentName:"p"},"local")," statement."),(0,r.kt)("h2",{id:"let"},"Let"),(0,r.kt)("p",null,"To enable the ",(0,r.kt)("inlineCode",{parentName:"p"},"let")," keyword, simply do:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-pluto"},"pluto_use let\n")),(0,r.kt)("p",null,"The usage is exactly the same as the ",(0,r.kt)("inlineCode",{parentName:"p"},"local")," keyword."),(0,r.kt)("p",null,"However, note that this will make ",(0,r.kt)("inlineCode",{parentName:"p"},"let")," a reserved keyword, so you can't name any variables as such.\nIf this is causing ambiguities in your script, you can disable it again after you're done with it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-pluto"},"pluto_use let = false\n")),(0,r.kt)("h2",{id:"const"},"Const"),(0,r.kt)("p",null,"To enable the ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," keyword, simply do:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-pluto"},"pluto_use const\n")),(0,r.kt)("p",null,"This allows you to do the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-pluto"},"const meaning = 42\n")),(0,r.kt)("p",null,"As a shorthand for:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-pluto"},"local meaning <const> = 42\n")),(0,r.kt)("h2",{id:"pluto_use-shorthands"},(0,r.kt)("inlineCode",{parentName:"h2"},"pluto_use")," Shorthands"),(0,r.kt)("p",null,"When using ",(0,r.kt)("inlineCode",{parentName:"p"},"pluto_use")," with a version number, you can also enable optional keywords using '+':"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'pluto_use "0.7.0+"')," is the same as ",(0,r.kt)("inlineCode",{parentName:"li"},'pluto_use "0.6.0", let')),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},'pluto_use "0.8.0+"')," is the same as ",(0,r.kt)("inlineCode",{parentName:"li"},'pluto_use "0.8.0", let, const'))),(0,r.kt)("h2",{id:"for-integrators"},"For Integrators"),(0,r.kt)("p",null,"You can enable ",(0,r.kt)("inlineCode",{parentName:"p"},"let")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"const")," in your Pluto environment by default by defining the ",(0,r.kt)("inlineCode",{parentName:"p"},"PLUTO_USE_LET")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"PLUTO_USE_CONST")," macros in ",(0,r.kt)("inlineCode",{parentName:"p"},"luaconf.h")," or your build config."))}m.isMDXComponent=!0}}]);