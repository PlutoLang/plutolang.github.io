"use strict";(self.webpackChunkpluto=self.webpackChunkpluto||[]).push([[3076],{9543:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>c});var l=i(4848),t=i(8453);const s={sidebar_position:2},o=void 0,r={id:"New Features/Compile-Time Evaluation",title:"Compile-Time Evaluation",description:"Pluto's parser provides some powerful constructs which allow you to write code that will never be seen at runtime.",source:"@site/docs/New Features/Compile-Time Evaluation.md",sourceDirName:"New Features",slug:"/New Features/Compile-Time Evaluation",permalink:"/docs/New Features/Compile-Time Evaluation",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"Type Hinting",permalink:"/docs/New Features/Type Hinting"},next:{title:"Destructuring",permalink:"/docs/New Features/Destructuring"}},a={},c=[{value:"Function calls",id:"function-calls",level:2},{value:"Variables",id:"variables",level:2},{value:"Conditionals",id:"conditionals",level:2}];function d(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.p,{children:"Pluto's parser provides some powerful constructs which allow you to write code that will never be seen at runtime."}),"\n",(0,l.jsx)(n.h2,{id:"function-calls",children:"Function calls"}),"\n",(0,l.jsx)(n.p,{children:'Certain standard library functions can be called at compile-time, as long as the arguments are also known at compile-time, by using the "$" symbol before the function call.'}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-pluto",metastring:"showLineNumbers",children:'local runtime = require("crypto").joaat("Hello, World!")\r\nlocal compile = $crypto.joaat("Hello, World!")\r\n\r\nassert(runtime == compile)\n'})}),"\n",(0,l.jsx)(n.p,{children:"If you're unfamiliar with compile-time evaluation, this is essentially what the code turns into:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-pluto",metastring:"showLineNumbers",children:'local runtime = require("crypto").joaat("Hello, World!")\r\nlocal compile = 847757641 -- The JOAAT hash of "Hello, World!"\r\n\r\nassert(runtime == compile)\n'})}),"\n",(0,l.jsx)(n.p,{children:"This is available on preloaded Pluto libraries, such as:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"json"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"base32"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"base58"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"base64"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"crypto"})}),"\n"]}),"\n",(0,l.jsx)(n.p,{children:"And on the following functions:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"tostring"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"utostring"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"tonumber"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.code,{children:"utonumber"})}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"variables",children:"Variables"}),"\n",(0,l.jsxs)(n.p,{children:["Compile-time constant variables can be defined via the ",(0,l.jsx)(n.code,{children:"$define"})," statement:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-pluto",children:"$define a = 123\n"})}),"\n",(0,l.jsx)(n.p,{children:"This may seem identical to a local declared with the const attribute:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-pluto",children:"local a <const> = 123\n"})}),"\n",(0,l.jsxs)(n.p,{children:["However, ",(0,l.jsx)(n.code,{children:"$define"})," also enforces that the assigned variable is a compile-time constant:"]}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-pluto",children:"local a <const> = {}\r\n// ERROR:\r\n$define a = {} -- variable was not assigned a compile-time constant value\n"})}),"\n",(0,l.jsx)(n.h2,{id:"conditionals",children:"Conditionals"}),"\n",(0,l.jsx)(n.p,{children:"If there is certain code you only want to have compiled in for a certain build, such as a debug build, you can use compile-time conditionals:"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-pluto",children:'$define DEBUG = true\r\n\r\n$if DEBUG then\r\n    print("Script running in debug mode")\r\n$else\r\n    print("Script running in release mode")\r\n$end\n'})}),"\n",(0,l.jsx)(n.p,{children:"In this case, only one of the two paths will be compiled in; the rest will not take up any space."})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>r});var l=i(6540);const t={},s=l.createContext(t);function o(e){const n=l.useContext(s);return l.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),l.createElement(s.Provider,{value:n},e.children)}}}]);