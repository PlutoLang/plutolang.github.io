"use strict";(self.webpackChunkpluto=self.webpackChunkpluto||[]).push([[1790],{6427:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>i,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>o});var s=n(4848),c=n(8453);const a={sidebar_position:3},l=void 0,t={id:"Runtime Environment/Crypto",title:"Crypto",description:"Must be included via require.",source:"@site/docs/Runtime Environment/Crypto.md",sourceDirName:"Runtime Environment",slug:"/Runtime Environment/Crypto",permalink:"/docs/Runtime Environment/Crypto",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"CaT",permalink:"/docs/Runtime Environment/CaT"},next:{title:"Exception",permalink:"/docs/Runtime Environment/Exception"}},i={},o=[{value:"Non-Cryptographic Hashing Algorithms",id:"non-cryptographic-hashing-algorithms",level:2},{value:"<code>crypto.lua</code>",id:"cryptolua",level:3},{value:"Parameters",id:"parameters",level:4},{value:"<code>crypto.md5</code>",id:"cryptomd5",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>crypto.djb2</code>",id:"cryptodjb2",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"<code>crypto.fnv1</code>",id:"cryptofnv1",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"<code>crypto.fnv1a</code>",id:"cryptofnv1a",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"<code>crypto.joaat</code>",id:"cryptojoaat",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"<code>crypto.sdbm</code>",id:"cryptosdbm",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"<code>crypto.crc32</code>",id:"cryptocrc32",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"<code>crypto.adler32</code>",id:"cryptoadler32",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"<code>crypto.lookup3</code>",id:"cryptolookup3",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"<code>crypto.times33</code>",id:"cryptotimes33",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"<code>crypto.murmur1</code>",id:"cryptomurmur1",level:3},{value:"Parameters",id:"parameters-11",level:4},{value:"<code>crypto.murmur2</code>",id:"cryptomurmur2",level:3},{value:"Parameters",id:"parameters-12",level:4},{value:"<code>crypto.murmur2a</code>",id:"cryptomurmur2a",level:3},{value:"Parameters",id:"parameters-13",level:4},{value:"<code>crypto.murmur64a</code>",id:"cryptomurmur64a",level:3},{value:"Parameters",id:"parameters-14",level:4},{value:"<code>crypto.murmur64b</code>",id:"cryptomurmur64b",level:3},{value:"Parameters",id:"parameters-15",level:4},{value:"<code>crypto.murmur2neutral</code>",id:"cryptomurmur2neutral",level:3},{value:"Parameters",id:"parameters-16",level:4},{value:"Cryptographic Hashing Algorithms",id:"cryptographic-hashing-algorithms",level:2},{value:"<code>crypto.sha1</code>",id:"cryptosha1",level:3},{value:"Parameters",id:"parameters-17",level:4},{value:"<code>crypto.sha256</code>",id:"cryptosha256",level:3},{value:"Parameters",id:"parameters-18",level:4},{value:"<code>crypto.sha384</code>",id:"cryptosha384",level:3},{value:"Parameters",id:"parameters-19",level:4},{value:"<code>crypto.sha512</code>",id:"cryptosha512",level:3},{value:"Parameters",id:"parameters-20",level:4},{value:"Cryptographic PRNGs",id:"cryptographic-prngs",level:2},{value:"<code>crypto.random</code>",id:"cryptorandom",level:3},{value:"Parameters",id:"parameters-21",level:4},{value:"AES-CBC, AES-CFB",id:"aes-cbc-aes-cfb",level:2},{value:"<code>crypto.encrypt</code>",id:"cryptoencrypt",level:3},{value:"Parameters",id:"parameters-22",level:4},{value:"<code>crypto.decrypt</code>",id:"cryptodecrypt",level:3},{value:"Parameters",id:"parameters-23",level:4},{value:"AES-ECB",id:"aes-ecb",level:2},{value:"<code>crypto.encrypt</code>",id:"cryptoencrypt-1",level:3},{value:"Parameters",id:"parameters-24",level:4},{value:"<code>crypto.decrypt</code>",id:"cryptodecrypt-1",level:3},{value:"Parameters",id:"parameters-25",level:4},{value:"AES-GCM",id:"aes-gcm",level:2},{value:"<code>crypto.encrypt</code>",id:"cryptoencrypt-2",level:3},{value:"Parameters",id:"parameters-26",level:4},{value:"<code>crypto.decrypt</code>",id:"cryptodecrypt-2",level:3},{value:"Parameters",id:"parameters-27",level:4},{value:"RSA",id:"rsa",level:2},{value:"<code>crypto.generatekeypair</code>",id:"cryptogeneratekeypair",level:3},{value:"Parameters",id:"parameters-28",level:4},{value:"<code>crypto.encrypt</code>",id:"cryptoencrypt-3",level:3},{value:"Parameters",id:"parameters-29",level:4},{value:"<code>crypto.decrypt</code>",id:"cryptodecrypt-3",level:3},{value:"Parameters",id:"parameters-30",level:4},{value:"<code>crypto.sign</code>",id:"cryptosign",level:3},{value:"Parameters",id:"parameters-31",level:4},{value:"<code>crypto.verify</code>",id:"cryptoverify",level:3},{value:"Parameters",id:"parameters-32",level:4}];function d(e){const r={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.p,{children:["Must be included via ",(0,s.jsx)(r.code,{children:"require"}),"."]}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"non-cryptographic-hashing-algorithms",children:"Non-Cryptographic Hashing Algorithms"}),"\n",(0,s.jsx)(r.h3,{id:"cryptolua",children:(0,s.jsx)(r.code,{children:"crypto.lua"})}),"\n",(0,s.jsx)(r.p,{children:"Hash a string using Lua's version of the DJB2 non-cryptographic hashing algorithm."}),"\n",(0,s.jsx)(r.h4,{id:"parameters",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"The string to hash."}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local crypto = require("crypto")\r\nlocal str = "hello"\r\nassert(crypto.lua(str) == 2871868277)\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"cryptomd5",children:(0,s.jsx)(r.code,{children:"crypto.md5"})}),"\n",(0,s.jsx)(r.p,{children:"Hash a string using the MD5 semi-cryptographic hashing algorithm."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"The string to hash."}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local crypto = require("crypto")\r\nlocal str = "hello"\r\nassert(crypto.md5(str) == "5eb63bbbe01eeed093cb22bb8f5acdc3")\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"cryptodjb2",children:(0,s.jsx)(r.code,{children:"crypto.djb2"})}),"\n",(0,s.jsx)(r.p,{children:"Hash a string using the DJB2 non-cryptographic hashing algorithm."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"The string to hash."}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local crypto = require("crypto")\r\nlocal str = "hello"\r\nassert(crypto.djb2(str) == 894552257)\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"cryptofnv1",children:(0,s.jsx)(r.code,{children:"crypto.fnv1"})}),"\n",(0,s.jsx)(r.p,{children:"Hash a string using the FNV1 non-cryptographic hashing algorithm."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"The string to hash."}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local crypto = require("crypto")\r\nlocal str = "hello"\r\nassert(crypto.fnv1(str) == 9065573210506989167)\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"cryptofnv1a",children:(0,s.jsx)(r.code,{children:"crypto.fnv1a"})}),"\n",(0,s.jsx)(r.p,{children:"Hash a string using the FNV1A non-cryptographic hashing algorithm."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"The string to hash."}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local crypto = require("crypto")\r\nlocal str = "hello"\r\nassert(crypto.fnv1a(str) == 8618312879776256743)\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"cryptojoaat",children:(0,s.jsx)(r.code,{children:"crypto.joaat"})}),"\n",(0,s.jsx)(r.p,{children:"Hash a string using the JOAAT non-cryptographic hashing algorithm."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"The string to hash."}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local crypto = require("crypto")\r\nlocal str = "hello"\r\nassert(crypto.joaat(str) == 1045060183)\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"cryptosdbm",children:(0,s.jsx)(r.code,{children:"crypto.sdbm"})}),"\n",(0,s.jsx)(r.p,{children:"Hash a string using the SDBM non-cryptographic hashing algorithm."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"The string to hash."}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local crypto = require("crypto")\r\nlocal str = "hello"\r\nassert(crypto.sdbm(str) == 430867652)\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"cryptocrc32",children:(0,s.jsx)(r.code,{children:"crypto.crc32"})}),"\n",(0,s.jsx)(r.p,{children:"Hash a string using the CRC32 non-cryptographic hashing algorithm."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"The string to hash."}),"\n",(0,s.jsx)(r.li,{children:"The initial value for the hash. By default, this is zero."}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local crypto = require("crypto")\r\nlocal str = "hello"\r\nassert(crypto.crc32(str) == 222957957)\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"cryptoadler32",children:(0,s.jsx)(r.code,{children:"crypto.adler32"})}),"\n",(0,s.jsx)(r.p,{children:"Hash a string using the Adler-32 non-cryptographic hashing algorithm."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-8",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"The string to hash."}),"\n",(0,s.jsx)(r.li,{children:"The initial value for the hash. By default, this is zero."}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local crypto = require("crypto")\r\nlocal str = "hello"\r\nassert(crypto.adler32(str) == 103547413)\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"cryptolookup3",children:(0,s.jsx)(r.code,{children:"crypto.lookup3"})}),"\n",(0,s.jsx)(r.p,{children:"Hash a string using the Lookup3 non-cryptographic hashing algorithm."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-9",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"The string to hash."}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local crypto = require("crypto")\r\nlocal str = "hello"\r\nassert(crypto.lookup3(str) == 1252609637)\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"cryptotimes33",children:(0,s.jsx)(r.code,{children:"crypto.times33"})}),"\n",(0,s.jsx)(r.p,{children:"Hash a string using the Times33 non-cryptographic hashing algorithm."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-10",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"The string to hash."}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local crypto = require("crypto")\r\nlocal str = "hello"\r\nassert(crypto.times33(str) == 3889643616)\n'})}),"\n",(0,s.jsx)(r.h3,{id:"cryptomurmur1",children:(0,s.jsx)(r.code,{children:"crypto.murmur1"})}),"\n",(0,s.jsx)(r.p,{children:"Hash a string using the Murmur1 non-cryptographic hashing algorithm."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-11",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"The string to hash."}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local crypto = require("crypto")\r\nlocal str = "hello"\r\nassert(crypto.murmur1(str) == 3154674178)\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"cryptomurmur2",children:(0,s.jsx)(r.code,{children:"crypto.murmur2"})}),"\n",(0,s.jsx)(r.p,{children:"Hash a string using the Murmur2 non-cryptographic hashing algorithm."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-12",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"The string to hash."}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local crypto = require("crypto")\r\nlocal str = "hello"\r\nassert(crypto.murmur2(str) == 1151865881)\n'})}),"\n",(0,s.jsx)(r.h3,{id:"cryptomurmur2a",children:(0,s.jsx)(r.code,{children:"crypto.murmur2a"})}),"\n",(0,s.jsx)(r.p,{children:"Hash a string using the Murmur2A non-cryptographic hashing algorithm."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-13",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"The string to hash."}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local crypto = require("crypto")\r\nlocal str = "hello"\r\nassert(crypto.murmur2a(str) == 2650573207)\n'})}),"\n",(0,s.jsx)(r.h3,{id:"cryptomurmur64a",children:(0,s.jsx)(r.code,{children:"crypto.murmur64a"})}),"\n",(0,s.jsx)(r.p,{children:"Hash a string using the Murmur64A non-cryptographic hashing algorithm."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-14",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"The string to hash."}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local crypto = require("crypto")\r\nlocal str = "hello"\r\nassert(crypto.murmur64a(str) == -3190198453633110066)\n'})}),"\n",(0,s.jsx)(r.h3,{id:"cryptomurmur64b",children:(0,s.jsx)(r.code,{children:"crypto.murmur64b"})}),"\n",(0,s.jsx)(r.p,{children:"Hash a string using the Murmur64A non-cryptographic hashing algorithm."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-15",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"The string to hash."}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local crypto = require("crypto")\r\nlocal str = "hello"\r\nassert(crypto.murmur64b(str) == 7088720765356542432)\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"cryptomurmur2neutral",children:(0,s.jsx)(r.code,{children:"crypto.murmur2neutral"})}),"\n",(0,s.jsx)(r.p,{children:"Hash a string using the Murmur2Neutral non-cryptographic hashing algorithm."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-16",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"The string to hash."}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local crypto = require("crypto")\r\nlocal str = "hello"\r\nassert(crypto.murmur2neutral(str) == 1151865881)\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"cryptographic-hashing-algorithms",children:"Cryptographic Hashing Algorithms"}),"\n",(0,s.jsx)(r.h3,{id:"cryptosha1",children:(0,s.jsx)(r.code,{children:"crypto.sha1"})}),"\n",(0,s.jsx)(r.p,{children:"Hash a string using the SHA-1 cryptographic hashing algorithm."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-17",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"The string to hash."}),"\n",(0,s.jsx)(r.li,{children:"When set to true, returns raw binary data. false outputs lowercase hex digits. By default, this is false."}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local crypto = require("crypto")\r\nassert(crypto.sha1("Pluto") == "bce8c9aca4120776fad6b517874aa09c46405454")\r\nassert(crypto.sha1("Pluto", true) == "\\xbc\\xe8\\xc9\\xac\\xa4\\x12\\x07\\x76\\xfa\\xd6\\xb5\\x17\\x87\\x4a\\xa0\\x9c\\x46\\x40\\x54\\x54")\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"cryptosha256",children:(0,s.jsx)(r.code,{children:"crypto.sha256"})}),"\n",(0,s.jsx)(r.p,{children:"Hash a string using the SHA-256 cryptographic hashing algorithm."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-18",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"The string to hash."}),"\n",(0,s.jsx)(r.li,{children:"When set to true, returns raw binary data. false outputs lowercase hex digits. By default, this is false."}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local crypto = require("crypto")\r\nassert(crypto.sha256("Pluto") == "8dad5f6a7dd2dcd8c35ec2fd7babb499bcad60d27d73fe73eca2ce025dfd3b47")\r\nassert(crypto.sha256("Pluto", true) == "\\x8d\\xad\\x5f\\x6a\\x7d\\xd2\\xdc\\xd8\\xc3\\x5e\\xc2\\xfd\\x7b\\xab\\xb4\\x99\\xbc\\xad\\x60\\xd2\\x7d\\x73\\xfe\\x73\\xec\\xa2\\xce\\x02\\x5d\\xfd\\x3b\\x47")\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"cryptosha384",children:(0,s.jsx)(r.code,{children:"crypto.sha384"})}),"\n",(0,s.jsx)(r.p,{children:"Hash a string using the SHA-384 cryptographic hashing algorithm."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-19",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"The string to hash."}),"\n",(0,s.jsx)(r.li,{children:"When set to true, returns raw binary data. false outputs lowercase hex digits. By default, this is false."}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local crypto = require("crypto")\r\nassert(crypto.sha384("Pluto", false) == "db890233a919b6745d632633c419e14540ff79f1a89bc4ac194b00e7f913f0f06d5d4d7d6cc2b4aaf9485d223afb8cf0")\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h3,{id:"cryptosha512",children:(0,s.jsx)(r.code,{children:"crypto.sha512"})}),"\n",(0,s.jsx)(r.p,{children:"Hash a string using the SHA-512 cryptographic hashing algorithm."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-20",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"The string to hash."}),"\n",(0,s.jsx)(r.li,{children:"When set to true, returns raw binary data. false outputs lowercase hex digits. By default, this is false."}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local crypto = require("crypto")\r\nassert(crypto.sha512("Pluto", false) == "ee8410a8bf9511b94fd6669b5c3e0c4b86e8e4bf7baa8dbd2773d4d6381dd1aecebbe391bef4c6158620ab3f6b794907652d4432c2301d7e1a6caf520565cdf2")\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"cryptographic-prngs",children:"Cryptographic PRNGs"}),"\n",(0,s.jsx)(r.h3,{id:"cryptorandom",children:(0,s.jsx)(r.code,{children:"crypto.random"})}),"\n",(0,s.jsxs)(r.p,{children:["The ",(0,s.jsx)(r.code,{children:"crypto.random"})," function uses your operating system's default PRNG."]}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsxs)(r.li,{children:["On Linux-based systems, this is ",(0,s.jsx)(r.code,{children:"/dev/urandom"}),"."]}),"\n",(0,s.jsxs)(r.li,{children:["On Windows, this is ",(0,s.jsx)(r.code,{children:"BCryptGenRandom"}),"."]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"This is a cryptographically-secure PRNG when your system can provide those services. However, if it does not, then this is not cryptographically secure. Either way, it provides good randomness."}),"\n",(0,s.jsx)(r.h4,{id:"parameters-21",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"The minimum value to return."}),"\n",(0,s.jsx)(r.li,{children:"The maximum value to return, as a range."}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local crypto = require("crypto")\r\nassert(crypto.random(1, 10) < 11)\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"aes-cbc-aes-cfb",children:"AES-CBC, AES-CFB"}),"\n",(0,s.jsx)(r.p,{children:"These unauthenticated AES modes take both a key and an IV. The IV must be unique and unpredictable for each encryption session to ensure security."}),"\n",(0,s.jsx)(r.h3,{id:"cryptoencrypt",children:(0,s.jsx)(r.code,{children:"crypto.encrypt"})}),"\n",(0,s.jsx)(r.h4,{id:"parameters-22",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"data"})," \u2014 The data to be encrypted."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"mode"}),' \u2014 "aes-cbc-pkcs7" or "aes-cfb-pkcs7" for PKCS#7 padding, or "aes-cbc" or "aes-cfb" if you know what you\'re doing.']}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"key"})," \u2014 Must have a length of 16, 24 or 32 for 128-, 192-, or 256-bit AES, respectively."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"iv"})," \u2014 Must have a length of 16."]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"cryptodecrypt",children:(0,s.jsx)(r.code,{children:"crypto.decrypt"})}),"\n",(0,s.jsx)(r.h4,{id:"parameters-23",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"data"})," \u2014 The ciphertext to decrypt."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"mode"}),' \u2014 "aes-cbc-pkcs7" or "aes-cfb-pkcs7" for PKCS#7 padding, or "aes-cbc" or "aes-cfb" if you know what you\'re doing.']}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"key"})," \u2014 Must have a length of 16, 24 or 32 for 128-, 192-, or 256-bit AES, respectively."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"iv"})," \u2014 Must have a length of 16."]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"Returns the decrypted data on success. Throws an error if the padding was incorrect."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local crypto = require "pluto:crypto"\r\nlocal key <const> = "A Top Secret Key"\r\n-- Encrypt\r\nlocal iv = range(16):map(|| -> string.char(math.random(0, 255))):concat("")\r\nlocal plain = "Hello, world!"\r\nlocal enc = plain |> crypto.encrypt|"aes-cbc-pkcs7", key, iv|\r\nprint(dumpvar(enc))\r\n-- Decrypt\r\nprint(crypto.decrypt(enc, "aes-cbc-pkcs7", key, iv)) --\x3e Hello, world!\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"aes-ecb",children:"AES-ECB"}),"\n",(0,s.jsx)(r.p,{children:"This unauthenticated AES mode takes only a key, and is considered to be the weakest. Identical plaintext blocks result in identical ciphertext blocks."}),"\n",(0,s.jsx)(r.h3,{id:"cryptoencrypt-1",children:(0,s.jsx)(r.code,{children:"crypto.encrypt"})}),"\n",(0,s.jsx)(r.h4,{id:"parameters-24",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"data"})," \u2014 The data to be encrypted."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"mode"}),' \u2014 "aes-ecb-pkcs7" for PKCS#7 padding, or "aes-ecb" if you know what you\'re doing.']}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"key"})," \u2014 Must have a length of 16, 24 or 32 for 128-, 192-, or 256-bit AES, respectively."]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"cryptodecrypt-1",children:(0,s.jsx)(r.code,{children:"crypto.decrypt"})}),"\n",(0,s.jsx)(r.h4,{id:"parameters-25",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"mode"}),' \u2014 "aes-ecb-pkcs7" for PKCS#7 padding, or "aes-ecb" if you know what you\'re doing.']}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"data"})," \u2014 The ciphertext to decrypt."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"key"})," \u2014 Must have a length of 16, 24 or 32 for 128-, 192-, or 256-bit AES, respectively."]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"Returns the decrypted data on success. Throws an error if the padding was incorrect."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local crypto = require "pluto:crypto"\r\nlocal key <const> = "A Top Secret Key"\r\n-- Encrypt\r\nlocal plain = "Hello, world!"\r\nlocal enc = plain |> crypto.encrypt|"aes-ecb-pkcs7", key|\r\nprint(dumpvar(enc)) --\x3e string(16) "`p{\ufffd\ufffd\ufffd\ufffdk\\21*.>jG"\r\n-- Decrypt\r\nprint(crypto.decrypt(enc, "aes-ecb-pkcs7", key)) --\x3e Hello, world!\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"aes-gcm",children:"AES-GCM"}),"\n",(0,s.jsx)(r.p,{children:"This authenticated AES mode allows for additional data that will be validated although not encrypted, such as a Message Authentication Code (MAC)."}),"\n",(0,s.jsx)(r.h3,{id:"cryptoencrypt-2",children:(0,s.jsx)(r.code,{children:"crypto.encrypt"})}),"\n",(0,s.jsx)(r.h4,{id:"parameters-26",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"data"})," \u2014 The data to be encrypted."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"mode"}),' \u2014 Must be "aes-gcm". AES-GCM can deal with unpadded data, hence does not need PKCS#7 padding.']}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"aadata"})," \u2014 Authenticated data. Will not be encrypted."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"key"})," \u2014 Must have a length of 16, 24 or 32 for 128-, 192-, or 256-bit AES, respectively."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"iv"})," \u2014 Must have a length of 16."]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"Returns two strings: the ciphertext and the authentication tag."}),"\n",(0,s.jsx)(r.h3,{id:"cryptodecrypt-2",children:(0,s.jsx)(r.code,{children:"crypto.decrypt"})}),"\n",(0,s.jsx)(r.h4,{id:"parameters-27",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"data"})," \u2014 The ciphertext to decrypt."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"mode"}),' \u2014 Must be "aes-gcm".']}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"aadata"})," \u2014 Authenticated data."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"key"})," \u2014 Must have a length of 16, 24 or 32 for 128-, 192-, or 256-bit AES, respectively."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"iv"})," \u2014 Must have a length of 16."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"tag"}),' \u2014 The authentication tag produced by the "encrypt" procedure.']}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"Returns the decrypted data on success. Throws an error if authentication or unpadding failed."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local crypto = require "pluto:crypto"\r\nlocal key <const> = "A Top Secret Key"\r\nlocal aadata = "This is Pluto!"\r\n-- Encrypt\r\nlocal iv = range(16):map(|| -> string.char(math.random(0, 255))):concat("")\r\nlocal plain = "Hello, world!"\r\nlocal enc, tag = plain |> crypto.encrypt|"aes-gcm", aadata, key, iv|\r\nprint(dumpvar(enc))\r\nprint(dumpvar(tag))\r\n-- Decrypt\r\nprint(crypto.decrypt(enc, "aes-gcm", aadata, key, iv, tag)) --\x3e Hello, world!\n'})}),"\n",(0,s.jsx)(r.hr,{}),"\n",(0,s.jsx)(r.h2,{id:"rsa",children:"RSA"}),"\n",(0,s.jsx)(r.h3,{id:"cryptogeneratekeypair",children:(0,s.jsx)(r.code,{children:"crypto.generatekeypair"})}),"\n",(0,s.jsx)(r.h4,{id:"parameters-28",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"mode"}),' \u2014 Must be "rsa".']}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"bits"})," \u2014 A positive integer for a strict bit-length requirement, or a negative integer for a lax requirement. Common values are ",(0,s.jsx)(r.code,{children:"1024"}),", ",(0,s.jsx)(r.code,{children:"2048"}),", and ",(0,s.jsx)(r.code,{children:"4096"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(r.p,{children:["Returns two tables: The public key (consisting of ",(0,s.jsx)(r.code,{children:"n"})," and ",(0,s.jsx)(r.code,{children:"e"}),"), and the private key (consisting of ",(0,s.jsx)(r.code,{children:"p"})," and ",(0,s.jsx)(r.code,{children:"q"}),"). The ",(0,s.jsx)(r.a,{href:"/docs/Runtime%20Environment/Bigint",children:"Bigint class"})," is used for all values."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local pub, priv = crypto.generatekeypair("rsa", 512)\r\nprint(dumpvar(pub))\r\n--\x3e {\r\n--\x3e     ["n"] = 11355630182234424425429331560518598643298965915936825610957270519615363349759012613228119611304846673085167794661819394470107090216347491908311079792054357,\r\n--\x3e     ["e"] = 65537,\r\n--\x3e }\r\nprint(dumpvar(priv))\r\n--\x3e {\r\n--\x3e     ["p"] = 115443384115231951475820445136871322101870729500298182134363293112660251666017,\r\n--\x3e     ["q"] = 98365361248415863235179644468056200977592391948608651522703704315152579004021,\r\n--\x3e }\n'})}),"\n",(0,s.jsx)(r.h3,{id:"cryptoencrypt-3",children:(0,s.jsx)(r.code,{children:"crypto.encrypt"})}),"\n",(0,s.jsx)(r.h4,{id:"parameters-29",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"data"})," \u2014 The data to be encrypted."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"mode"}),' \u2014 "rsa-pkcs1" for PKCS#1 padding, or "rsa" if you know what you\'re doing.']}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"key"})," \u2014 The public or private key to use. Commonly, a public key is used to encrypt data."]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"cryptodecrypt-3",children:(0,s.jsx)(r.code,{children:"crypto.decrypt"})}),"\n",(0,s.jsx)(r.h4,{id:"parameters-30",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"data"})," \u2014 The ciphertext to decrypt."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"mode"}),' \u2014 "rsa-pkcs1" for PKCS#1 padding, or "rsa" if you know what you\'re doing.']}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"key"})," \u2014 The public or private key to use. If the data was encrypted with the public key, the private key is needed to decrypt it."]}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local { base64, bigint, crypto } = require "pluto:*"\r\nlocal priv = {\r\n    p = new bigint("115443384115231951475820445136871322101870729500298182134363293112660251666017"),\r\n    q = new bigint("98365361248415863235179644468056200977592391948608651522703704315152579004021"),\r\n}\r\n-- Derive public key\r\nlocal pub = {\r\n    n = priv.p * priv.q, -- 11355630182234424425429331560518598643298965915936825610957270519615363349759012613228119611304846673085167794661819394470107090216347491908311079792054357\r\n    e = new bigint(0x10001) -- 65537\r\n}\r\n-- Encrypt\r\nlocal enc = crypto.encrypt("A secret message to the owner of the private key.", "rsa-pkcs1", pub)\r\nprint(base64.encode(enc))\r\n-- Decrypt\r\nprint(enc |> crypto.decrypt|"rsa-pkcs1", priv|) --\x3e A secret message to the owner of the private key.\n'})}),"\n",(0,s.jsx)(r.h3,{id:"cryptosign",children:(0,s.jsx)(r.code,{children:"crypto.sign"})}),"\n",(0,s.jsx)(r.h4,{id:"parameters-31",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"data"})," \u2014 The data to sign."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"mode"}),' \u2014 "rsa-sha256" or "rsa-sha1".']}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"key"})," \u2014 The private key to use."]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"cryptoverify",children:(0,s.jsx)(r.code,{children:"crypto.verify"})}),"\n",(0,s.jsx)(r.h4,{id:"parameters-32",children:"Parameters"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"data"})," \u2014 The data that was signed."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"mode"}),' \u2014 "rsa-sha256" or "rsa-sha1".']}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"key"})," \u2014 The public key corresponding to the signer's private key."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.code,{children:"signature"}),' \u2014 The signature produced by the "sign" procedure.']}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"Returns a boolean that indicates if the signature validated successfully."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-pluto",children:'local { base64, bigint, crypto } = require "pluto:*"\r\nlocal priv = {\r\n    p = new bigint("115443384115231951475820445136871322101870729500298182134363293112660251666017"),\r\n    q = new bigint("98365361248415863235179644468056200977592391948608651522703704315152579004021"),\r\n}\r\n-- Derive public key\r\nlocal pub = {\r\n    n = priv.p * priv.q, -- 11355630182234424425429331560518598643298965915936825610957270519615363349759012613228119611304846673085167794661819394470107090216347491908311079792054357\r\n    e = new bigint(0x10001) -- 65537\r\n}\r\n-- Sign\r\nlocal msg = "The canary has left the nest."\r\nlocal sig = msg |> crypto.sign|"rsa-sha256", priv|\r\nprint(base64.encode(sig)) --\x3e un1g04+cwG8WxYDpSlj4PO/hsTqSITgYKycRuR+m3AE6ypLyUCrVHC/0j4M3DeW81ADZVda6TVkC/Ht8EdYeFw==\r\n-- Verify\r\nprint(crypto.verify(msg, "rsa-sha256", pub, sig)) --\x3e true\n'})})]})}function h(e={}){const{wrapper:r}={...(0,c.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>l,x:()=>t});var s=n(6540);const c={},a=s.createContext(c);function l(e){const r=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function t(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:l(e.components),s.createElement(a.Provider,{value:r},e.children)}}}]);