"use strict";(self.webpackChunkpluto=self.webpackChunkpluto||[]).push([[8823],{271:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>a});var t=i(4848),s=i(8453);const r={sidebar_position:1},o=void 0,l={id:"New Features/Type Hinting",title:"Type Hinting",description:"Type-hinting looks like this:",source:"@site/docs/New Features/Type Hinting.md",sourceDirName:"New Features",slug:"/New Features/Type Hinting",permalink:"/docs/New Features/Type Hinting",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Ternary Expressions",permalink:"/docs/New Features/Ternary Expressions"},next:{title:"Compile-Time Evaluation",permalink:"/docs/New Features/Compile-Time Evaluation"}},c={},a=[{value:"What types can I use?",id:"what-types-can-i-use",level:3}];function d(e){const n={admonition:"admonition",code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Type-hinting looks like this:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-pluto",metastring:"showLineNumbers",children:'local var: string = "hello world"\n'})}),"\n",(0,t.jsx)(n.p,{children:"It works with functions too:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-pluto",metastring:"showLineNumbers",children:'local function myfunc(a: string, b: string): number\n    return tonumber(a) + tonumber(b)\nend\n\nprint(myfunc(1, "1")) -- This will emit a warning for argument type mismatch.\n'})}),"\n",(0,t.jsx)(n.p,{children:"There's no effect on performance. This is implemented entirely during the compilation phase."}),"\n",(0,t.jsx)(n.h3,{id:"what-types-can-i-use",children:"What types can I use?"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"string"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"number"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"int"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"float"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"boolean"}),"/",(0,t.jsx)(n.code,{children:"bool"})]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"function"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"table"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.code,{children:"userdata"})}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"void"})," (return type only)"]}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["Prefix a ",(0,t.jsx)(n.code,{children:"?"})," to indicate nil-able types, e.g. ",(0,t.jsx)(n.code,{children:"?string"})," indicates that it may be nil or a string."]}),"\n",(0,t.jsxs)(n.p,{children:["You can also use ",(0,t.jsx)(n.code,{children:"|"})," to delimit alternatives, e.g. ",(0,t.jsx)(n.code,{children:"string|int"})," indicates that it may be a string or an int."]}),"\n",(0,t.jsxs)(n.p,{children:["Putting all of this together, we could also have e.g. ",(0,t.jsx)(n.code,{children:"?string|int"})," to indicate that it may be nil, a string, or an int."]}),"\n",(0,t.jsx)(n.admonition,{type:"info",children:(0,t.jsx)(n.p,{children:"This is a WIP feature, and it's very difficult to implement in a one-pass compiler. Allow tolerance for missing coverage, and report any bugs."})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>l});var t=i(6540);const s={},r=t.createContext(s);function o(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);