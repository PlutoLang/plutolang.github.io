"use strict";(self.webpackChunkpluto=self.webpackChunkpluto||[]).push([[118],{278:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>a});var s=i(4848),t=i(8453);const o={sidebar_position:10},l=void 0,r={id:"Compatibility",title:"Compatibility",description:"Pluto aims to be source- and bytecode-compatible with existing Lua code such that it can simply be used as a drop-in replacement for Lua, and Lua modules can simply be used in Pluto codebases. In the vast majority of cases, we do succeed, but there are a few things to be aware of.",source:"@site/docs/Compatibility.md",sourceDirName:".",slug:"/Compatibility",permalink:"/docs/Compatibility",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Table Length",permalink:"/docs/Optimizations/Table Length"},next:{title:"For Integrators",permalink:"/docs/For Integrators"}},c={},a=[{value:"New Keywords",id:"new-keywords",level:2},{value:"Mitigations",id:"mitigations",level:3},{value:"Compile-time Configuration (pluto_use)",id:"compile-time-configuration-pluto_use",level:3},{value:"Compatible Keywords",id:"compatible-keywords",level:3},{value:"Default Table Metatable",id:"default-table-metatable",level:2}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Pluto aims to be source- and bytecode-compatible with existing Lua code such that it can simply be used as a drop-in replacement for Lua, and Lua modules can simply be used in Pluto codebases. In the vast majority of cases, we do succeed, but there are a few things to be aware of."}),"\n",(0,s.jsx)(n.h2,{id:"new-keywords",children:"New Keywords"}),"\n",(0,s.jsx)(n.p,{children:"Pluto adds the following reserved tokens:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"switch"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"continue"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"enum"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"new"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"class"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"parent"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"export"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"try"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"catch"})}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Which means you can't use them as identifiers. They can still be used with short-hand table indexes and goto labels because Pluto ",(0,s.jsx)(n.a,{href:"QoL%20Improvements/Reserved%20Identifiers",children:"allows reserved keywords to be used in those contexts"}),"."]}),"\n",(0,s.jsx)(n.h3,{id:"mitigations",children:"Mitigations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"For Integrators:"})," Check your ",(0,s.jsx)(n.code,{children:"luaconf.h"}),' file to find the relevant macros under the "Compatibility" heading.']}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"For Scripters:"})," Use ",(0,s.jsx)(n.code,{children:"pluto_use"})," in the source files. ",(0,s.jsx)(n.code,{children:"-- @pluto_use * = false"})," to simply disable all incompatible keywords."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"For Users:"})," Pass the ",(0,s.jsx)(n.code,{children:"-c"})," flag to ",(0,s.jsx)(n.code,{children:"pluto"})," or ",(0,s.jsx)(n.code,{children:"plutoc"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The following sections will go more in-depth on source-level mitigations (for scripters)."}),"\n",(0,s.jsx)(n.h3,{id:"compile-time-configuration-pluto_use",children:"Compile-time Configuration (pluto_use)"}),"\n",(0,s.jsxs)(n.p,{children:["You can change the meaning of Pluto's reserved tokens at any point in your scripts using the ",(0,s.jsx)(n.code,{children:"--@pluto_use"})," comment or ",(0,s.jsx)(n.code,{children:"pluto_use"})," statement."]}),"\n",(0,s.jsxs)(n.p,{children:["For example, to disable all non-compatible keywords except for ",(0,s.jsx)(n.code,{children:"switch"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-pluto",children:"-- @pluto_use * = false, switch\n"})}),"\n",(0,s.jsx)(n.p,{children:"It is also possible to specify a version number, which is a shorthand for the keywords available at that version:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"0.2.0"'})," corresponds to ",(0,s.jsx)(n.code,{children:"* = false, switch, continue"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"0.5.0"'})," corresponds to ",(0,s.jsx)(n.code,{children:"* = false, switch, continue, enum"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"0.6.0"'})," corresponds to ",(0,s.jsx)(n.code,{children:"* = false, switch, continue, enum, new, class, parent, export"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:'"0.8.0"'})," corresponds to ",(0,s.jsx)(n.code,{children:"* = false, switch, continue, enum, new, class, parent, export, try, catch"})]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"So, writing a portable script that only makes use of Pluto 0.8.0's features requires this at the beginning:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-pluto",children:'pluto_use "0.8.0"\n'})}),"\n",(0,s.jsx)(n.p,{children:"This feature also supports quick encompassing of optional features. So, instead of:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-pluto",children:'pluto_use "0.8.0", global\n'})}),"\n",(0,s.jsxs)(n.p,{children:["You can use a '+' after the version number to also enable all of the optional features. As of 0.9.0, the only optional feature is ",(0,s.jsx)(n.a,{href:"New%20Features/Explicit%20Globals",children:"explicit globals"})," (",(0,s.jsx)(n.code,{children:"global"}),")."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-pluto",children:'pluto_use "0.9.0+"\n-- The same as pluto_use "0.9.0", global\n'})}),"\n",(0,s.jsxs)(n.p,{children:["For module developers and scripts which may be used in future versions of Pluto, we recommend you use ",(0,s.jsx)(n.code,{children:"pluto_use"})," for two reasons:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Portability."})," This will override the compatibility mode settings compiled into Pluto so your script will be parsed identically in all Pluto environments."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Proactive compatibility."})," Any keywords added by future versions of Pluto will also be put in compatibility mode by these statements, so in the off-chance your script uses a future reserved keyword as a variable name, it would still parse as you intended when you wrote it."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"compatible-keywords",children:"Compatible Keywords"}),"\n",(0,s.jsxs)(n.p,{children:["Another way of using Pluto's features regardless of compatibility mode is by prefixing the keyword with ",(0,s.jsx)(n.code,{children:"pluto_"}),". For example, ",(0,s.jsx)(n.code,{children:"switch"})," becomes ",(0,s.jsx)(n.code,{children:"pluto_switch"}),". These Compatibility Mode variants will always be valid, even when Compatibility Mode is disabled."]}),"\n",(0,s.jsx)(n.p,{children:"These are what they look like:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"pluto_switch"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"pluto_continue"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"pluto_enum"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"pluto_new"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"pluto_class"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"pluto_parent"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"pluto_export"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"pluto_try"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.code,{children:"pluto_catch"})}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"default-table-metatable",children:"Default Table Metatable"}),"\n",(0,s.jsxs)(n.p,{children:["This is ",(0,s.jsx)(n.a,{href:"Runtime%20Environment/Global%20&%20Base#default-metatables",children:"a feature in Pluto"})," that, by itself, is a benign QoL improvement for developers. However, in combination with our added standard library functions like ",(0,s.jsx)(n.a,{href:"Runtime%20Environment/Table#tablemin",children:"table.min"}),", it can be an unexpected semantic change:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-pluto",metastring:"showLineNumbers",children:"local function roll(opts)\n    return math.random(opts.min or 1, opts.max or 100)\nend\nprint(roll{ max = 10 })\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"pluto: test.pluto:2: bad argument #1 to 'random' (number expected, got function)\nstack traceback:\n    [C]: in function 'math.rand'\n    test.pluto:2: in local 'roll'\n    test.pluto:4: in main chunk\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Integrators can disable this feature by defining the ",(0,s.jsx)(n.code,{children:"PLUTO_NO_DEFAULT_TABLE_METATABLE"})," macro in their luaconf.h or build config, to aid in a smooth transition, should scripts in their ecosystem require it."]}),"\n",(0,s.jsxs)(n.p,{children:["Scripters are advised to use ",(0,s.jsx)(n.code,{children:"rawget"})," and/or ",(0,s.jsx)(n.code,{children:"type"})," to better codify their expectations. For example, the example above seems to care only about providing fallback values and not at all about type-checking, so ",(0,s.jsx)(n.code,{children:"rawget"})," would be an excellent fit for it:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-pluto",children:'local function roll(opts)\n    return math.random(rawget(opts, "min") or 1, rawget(opts, "max") or 100)\nend\nprint(roll{ max = 10 })\n'})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>r});var s=i(6540);const t={},o=s.createContext(t);function l(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);