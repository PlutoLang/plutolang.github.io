"use strict";(self.webpackChunkpluto=self.webpackChunkpluto||[]).push([[9058],{7205:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>i,contentTitle:()=>t,default:()=>a,frontMatter:()=>d,metadata:()=>s,toc:()=>l});var o=r(4848),c=r(8453);const d={sidebar_position:3},t=void 0,s={id:"Runtime Environment/Scheduler",title:"Scheduler",description:"The scheduler class \u2014 available via require \u2014 can be used to easily set up coroutine-based cooperative multitasking.",source:"@site/docs/Runtime Environment/Scheduler.md",sourceDirName:"Runtime Environment",slug:"/Runtime Environment/Scheduler",permalink:"/docs/Runtime Environment/Scheduler",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"JSON",permalink:"/docs/Runtime Environment/JSON"},next:{title:"Socket",permalink:"/docs/Runtime Environment/Socket"}},i={},l=[{value:"<code>__construct</code>",id:"__construct",level:3},{value:"<code>add</code>",id:"add",level:3},{value:"<code>addloop</code>",id:"addloop",level:3},{value:"<code>run</code>",id:"run",level:3},{value:"<code>yieldfunc</code>",id:"yieldfunc",level:3},{value:"<code>errorfunc</code>",id:"errorfunc",level:3}];function u(e){const n={code:"code",h3:"h3",p:"p",pre:"pre",...(0,c.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsxs)(n.p,{children:["The scheduler class \u2014 available via ",(0,o.jsx)(n.code,{children:"require"})," \u2014 can be used to easily set up coroutine-based cooperative multitasking."]}),"\n",(0,o.jsx)(n.h3,{id:"__construct",children:(0,o.jsx)(n.code,{children:"__construct"})}),"\n",(0,o.jsx)(n.p,{children:"The constructor takes no arguments."}),"\n",(0,o.jsx)(n.h3,{id:"add",children:(0,o.jsx)(n.code,{children:"add"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"add"})," method can be used to turn a function into a coroutine. The coroutine is resumed once and then added to the scheduler."]}),"\n",(0,o.jsx)(n.h3,{id:"addloop",children:(0,o.jsx)(n.code,{children:"addloop"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"addloop"})," method is a wrapper for the ",(0,o.jsx)(n.code,{children:"add"})," method that keeps invoking the given function until it returns false."]}),"\n",(0,o.jsx)(n.h3,{id:"run",children:(0,o.jsx)(n.code,{children:"run"})}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"run"})," method activates the scheduler. The scheduler resumes all coroutines and then calls its yieldfunc until either all coroutines are finished, or coroutine throws an error \u2014 in which case it is rethrown."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-pluto",children:'local scheduler = new (require"pluto:scheduler") ()\r\n\r\nlocal loops = 0\r\nscheduler:addloop(function()\r\n    ++loops\r\n    print(loops)\r\n    return loops != 5\r\nend)\r\nscheduler:run()\r\n--\x3e 1\r\n--\x3e 2\r\n--\x3e 3\r\n--\x3e 4\r\n--\x3e 5\r\n\r\nscheduler:add(function()\r\n    print("3...")\r\n    coroutine.sleep(1000)\r\n    print("2...")\r\n    coroutine.sleep(1000)\r\n    print("1...")\r\n    coroutine.sleep(1000)\r\n    print("Boom!")\r\nend)\r\nscheduler:run()\r\n--\x3e 3...\r\n--\x3e 2...\r\n--\x3e 1...\r\n--\x3e Boom!\n'})}),"\n",(0,o.jsx)(n.h3,{id:"yieldfunc",children:(0,o.jsx)(n.code,{children:"yieldfunc"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"yieldfunc"})," is a property on the scheduler that can be used to customize how the scheduler itself yields. By default, this is a function calling ",(0,o.jsx)(n.code,{children:"os.sleep(1)"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-pluto",children:'local scheduler = new (require"pluto:scheduler") ()\r\n\r\n-- Yield to OS every second instead of every millisecond.\r\nscheduler.yieldfunc = || -> os.sleep(1000)\r\n\r\nlocal loops = 0\r\nscheduler:addloop(function()\r\n    ++loops\r\n    print(loops)\r\n    return loops != 5\r\nend)\r\nscheduler:run()\r\n--\x3e 1\r\n--\x3e 2\r\n--\x3e 3\r\n--\x3e 4\r\n--\x3e 5\n'})}),"\n",(0,o.jsx)(n.h3,{id:"errorfunc",children:(0,o.jsx)(n.code,{children:"errorfunc"})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"errorfunc"})," is a property on the scheduler that can optionally be set to customize how the scheduler reports errors in its coroutines. By default, this is ",(0,o.jsx)(n.code,{children:"nil"}),", in which case any coroutine errors are rethrown (via ",(0,o.jsx)(n.code,{children:"coroutine.xresume"}),")."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-pluto",children:'local { scheduler } = require "*"\r\n\r\nlocal sched = new scheduler()\r\nsched.errorfunc = |err| -> do print(debug.traceback(err)) end\r\nsched:add(function()\r\n    error("this is urgent: fatal error")\r\nend)\n'})})]})}function a(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(u,{...e})}):u(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>t,x:()=>s});var o=r(6540);const c={},d=o.createContext(c);function t(e){const n=o.useContext(d);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(c):e.components||c:t(e.components),o.createElement(d.Provider,{value:n},e.children)}}}]);