"use strict";(self.webpackChunkpluto=self.webpackChunkpluto||[]).push([[2963],{3533:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>x,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var t=r(4848),i=r(8453);const o={sidebar_position:3},s=void 0,a={id:"Runtime Environment/XML",title:"XML",description:"Must be included via require.",source:"@site/docs/Runtime Environment/XML.md",sourceDirName:"Runtime Environment",slug:"/Runtime Environment/XML",permalink:"/docs/Runtime Environment/XML",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Vector3",permalink:"/docs/Runtime Environment/Vector3"},next:{title:"Optimizations",permalink:"/docs/category/optimizations"}},l={},d=[{value:"<code>xml.encode</code>",id:"xmlencode",level:3},{value:"Parameters",id:"parameters",level:4},{value:"<code>xml.decode</code>",id:"xmldecode",level:3},{value:"Parameters",id:"parameters-1",level:4}];function c(e){const n={code:"code",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["Must be included via ",(0,t.jsx)(n.code,{children:"require"}),"."]}),"\n",(0,t.jsx)(n.h3,{id:"xmlencode",children:(0,t.jsx)(n.code,{children:"xml.encode"})}),"\n",(0,t.jsx)(n.p,{children:"Returns a string of XML."}),"\n",(0,t.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"data"})," \u2014 A table or string to encode as XML."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"pretty"})," \u2014 Whether to return a human-readable string of XML. Defaults to ",(0,t.jsx)(n.code,{children:"false"}),"."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-pluto",children:'local xml = require "pluto:xml"\r\n\r\nprint(xml.encode({\r\n    tag = "root",\r\n    children = {\r\n        {\r\n            tag = "entry",\r\n            attributes = {\r\n                ["type"] = "primary"\r\n            },\r\n            children = {\r\n                "Text node"\r\n            }\r\n        },\r\n        {\r\n            tag = "entry"\r\n        }\r\n    }\r\n}, true))\r\n--\x3e <root>\r\n--\x3e     <entry type="primary">\r\n--\x3e         Text node\r\n--\x3e     </entry>\r\n--\x3e     <entry></entry>\r\n--\x3e </root>\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h3,{id:"xmldecode",children:(0,t.jsx)(n.code,{children:"xml.decode"})}),"\n",(0,t.jsx)(n.p,{children:"Returns a table representing the XML data."}),"\n",(0,t.jsx)(n.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"data"})," \u2014 The XML data to decode."]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.code,{children:"parser"}),' \u2014 Which parser to use against the data. Can be "html", "xml" (default), or "lax" (XML but accepts attributes without ',(0,t.jsx)(n.code,{children:"="}),")."]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-pluto",children:'local xml = require "pluto:xml"\r\n\r\nlocal root = xml.decode([[\r\n    <entries>\r\n        <entry type="primary">\r\n            <name>primary</name>\r\n        </entry>\r\n    </entries>\r\n]])\r\n\r\nprint(dumpvar(root))\r\n--\x3e {\r\n--\x3e     ["tag"] = string(7) "entries",\r\n--\x3e     ["children"] = {\r\n--\x3e         [1] = {\r\n--\x3e             ["tag"] = string(5) "entry",\r\n--\x3e             ["attributes"] = {\r\n--\x3e                 ["type"] = string(7) "primary",\r\n--\x3e             },\r\n--\x3e             ["children"] = {\r\n--\x3e                 [1] = {\r\n--\x3e                     ["tag"] = string(4) "name",\r\n--\x3e                     ["children"] = {\r\n--\x3e                         [1] = string(7) "primary",\r\n--\x3e                     },\r\n--\x3e                 },\r\n--\x3e             },\r\n--\x3e         },\r\n--\x3e     },\r\n--\x3e }\n'})}),"\n",(0,t.jsxs)(n.p,{children:["For ease of use, the returned tables have an ",(0,t.jsx)(n.code,{children:"__index"})," metamethod:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-pluto",children:'-- root is <entries>, so its first child is <entry>.\r\n-- we make use of the metamethod to get to <name>:\r\nprint(dumpvar(root.children[1].name))\r\n--\x3e {\r\n--\x3e     ["tag"] = string(4) "name",\r\n--\x3e     ["children"] = {\r\n--\x3e         [1] = string(7) "primary",\r\n--\x3e     },\r\n--\x3e }\n'})}),"\n",(0,t.jsx)(n.p,{children:'If there is no single root element, a "body" element is implied as the root:'}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-pluto",children:'local xml = require "pluto:xml"\r\n\r\nprint(dumpvar(xml.decode([[\r\n    <entry/>\r\n    <entry/>\r\n]])))\r\n\r\n--\x3e {\r\n--\x3e     ["tag"] = string(4) "body",\r\n--\x3e     ["children"] = {\r\n--\x3e         [1] = {\r\n--\x3e             ["tag"] = string(5) "entry",\r\n--\x3e         },\r\n--\x3e         [2] = {\r\n--\x3e             ["tag"] = string(5) "entry",\r\n--\x3e         },\r\n--\x3e     },\r\n--\x3e }\n'})})]})}function x(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>a});var t=r(6540);const i={},o=t.createContext(i);function s(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);