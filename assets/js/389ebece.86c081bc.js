"use strict";(self.webpackChunkpluto=self.webpackChunkpluto||[]).push([[5881],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>h});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(t),m=r,h=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return t?a.createElement(h,i(i({ref:n},c),{},{components:t})):a.createElement(h,i({ref:n},c))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3374:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const o={},i=void 0,l={unversionedId:"New Features/Compiler Warnings",id:"New Features/Compiler Warnings",title:"Compiler Warnings",description:"Pluto offers optional compiler warnings for certain misbehaviors.",source:"@site/docs/New Features/Compiler Warnings.md",sourceDirName:"New Features",slug:"/New Features/Compiler Warnings",permalink:"/docs/New Features/Compiler Warnings",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Compile-Time Evaluation",permalink:"/docs/New Features/Compile-Time Evaluation"},next:{title:"Object-Oriented Programming",permalink:"/docs/New Features/Object-Oriented Programming"}},s={},p=[{value:"Warning Types",id:"warning-types",level:2},{value:"var-shadow",id:"var-shadow",level:3},{value:"global-shadow",id:"global-shadow",level:3},{value:"type-mismatch",id:"type-mismatch",level:3},{value:"unreachable-code",id:"unreachable-code",level:3},{value:"excessive-arguments",id:"excessive-arguments",level:3},{value:"bad-practice",id:"bad-practice",level:3},{value:"possible-typo",id:"possible-typo",level:3},{value:"non-portable-code",id:"non-portable-code",level:3},{value:"non-portable-name",id:"non-portable-name",level:3},{value:"non-portable-bytecode",id:"non-portable-bytecode",level:3},{value:"Compile-time Configuration",id:"compile-time-configuration",level:2},{value:"Changing Warning States",id:"changing-warning-states",level:3},{value:"Disable Warnings On Line",id:"disable-warnings-on-line",level:3}],c={toc:p},u="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Pluto offers optional compiler warnings for certain misbehaviors."),(0,r.kt)("h2",{id:"warning-types"},"Warning Types"),(0,r.kt)("h3",{id:"var-shadow"},"var-shadow"),(0,r.kt)("p",null,"This is raised when a new local is created with the same name as an existing one."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local var = 5\ndo\n  local var = "hello"\nend\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"file.pluto:3: warning: duplicate local declaration [var-shadow]\n    3 | local var = \"hello\"\n      | ^^^^^^^^^^^^^^^^^^^ here: this shadows the initial declaration of 'var' on line 1.\n")),(0,r.kt)("h3",{id:"global-shadow"},"global-shadow"),(0,r.kt)("p",null,"This is raised when a new local is created with the same name as a global variable."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},"local table = {}\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"file.pluto:1: warning: duplicate global declaration [global-shadow]\n    1 | local table = {}\n      | ^^^^^^^^^^^^^^^^ here: this shadows the initial global definition of 'table'\n")),(0,r.kt)("p",null,"To avoid excessive annoyance, this warning type is off by default. To enable it, scripters can use the ",(0,r.kt)("a",{parentName:"p",href:"#compile-time-configuration"},"compile-time configuration")," and integrators can define the ",(0,r.kt)("inlineCode",{parentName:"p"},"PLUTO_WARN_GLOBAL_SHADOW")," macro."),(0,r.kt)("p",null,"Furthermore, this only covers the globals 'table', 'string', and 'arg' by default. Integrators can overwrite the ",(0,r.kt)("inlineCode",{parentName:"p"},"PLUTO_COMMON_GLOBAL_NAMES")," macro to change this list."),(0,r.kt)("h3",{id:"type-mismatch"},"type-mismatch"),(0,r.kt)("p",null,"This is raised when the type of an expression doesn't match the hinted type."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local var: number = 5\nvar = "hello"\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"file.pluto:2: warning: variable type mismatch [type-mismatch]\n    2 | var = \"hello\"\n      | ^^^^^^^^^^^^^ here: 'var' type-hinted as 'number', but assigned a string value.\n")),(0,r.kt)("h3",{id:"unreachable-code"},"unreachable-code"),(0,r.kt)("p",null,"This is raised when a block of code will never be ran."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'for i = 1, 10 do\n  if i == 5 then\n    continue\n    print("message")\n  end\nend\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"file.pluto:4: warning: unreachable code [unreachable-code]\n    4 | print(\"message\")\n      | ^^^^^^^^^^^^^^^^ here: this code comes after an escaping 'continue' statement.\n")),(0,r.kt)("h3",{id:"excessive-arguments"},"excessive-arguments"),(0,r.kt)("p",null,"This is raised when too many arguments are given to a non-vararg function."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},"local function func(a, b, c)\n\nend\n\nfunc(1, 2, 3, 4)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"file.pluto:5: warning: too many arguments [excessive-arguments]\n    5 | func(1, 2, 3, 4)\n      | ^^^^^^^^^^^^^^^^ here: expected 3 arguments, got 4.\n")),(0,r.kt)("h3",{id:"bad-practice"},"bad-practice"),(0,r.kt)("p",null,"This is raised when the code does something stupid but not quite stupid enough to cause an error."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},"pluto_use *\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"file.pluto:1: warning: 'pluto_use *' is a bad idea because future Pluto versions may add keywords that will break your script [bad-practice]\n    1 | pluto_use *\n      | ^^^^^^^^^^^ here: consider using 'pluto_use \"0.8.0\"' instead\n")),(0,r.kt)("h3",{id:"possible-typo"},"possible-typo"),(0,r.kt)("p",null,"This is raised when the code seems syntactically incorrect."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},"local magic const = 42\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"file.pluto:1: warning: Possibly mistyped attribute [possible-typo]\n    1 | local magic const = 42\n      | ^^^^^^^^^^^^^^^^^^^^^^ here: Did you mean '<const>'?\n")),(0,r.kt)("h3",{id:"non-portable-code"},"non-portable-code"),(0,r.kt)("p",null,"This is raised when the code may not be considered valid by all Pluto environments due to compatibility mode."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'new exception("Not implemented")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"file.pluto:1: warning: non-portable keyword usage [non-portable-code]\n    1 | new exception(\"Not implemented\")\n      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ here: use 'pluto_new' instead, or 'pluto_use' this keyword: https://pluto.do/compat\n")),(0,r.kt)("p",null,"To avoid excessive annoyance, this warning type is off by default. To enable it, scripters can use the ",(0,r.kt)("a",{parentName:"p",href:"#compile-time-configuration"},"compile-time configuration")," and integrators can define the ",(0,r.kt)("inlineCode",{parentName:"p"},"PLUTO_WARN_NON_PORTABLE_CODE")," macro."),(0,r.kt)("h3",{id:"non-portable-name"},"non-portable-name"),(0,r.kt)("p",null,"This is raised when a variable name is only valid due to compatibility mode."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local class = "fruit"\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"file.pluto:1: warning: 'class' is a non-portable name [non-portable-name]\n    1 | local class = \"fruit\"\n      | ^^^^^^^^^^^^^^^^^^^^^ here: use a different name, or use 'pluto_use' to disable this keyword: https://pluto.do/compat\n")),(0,r.kt)("p",null,"To avoid excessive annoyance, this warning type is off by default. To enable it, scripters can use the ",(0,r.kt)("a",{parentName:"p",href:"#compile-time-configuration"},"compile-time configuration")," and integrators can define the ",(0,r.kt)("inlineCode",{parentName:"p"},"PLUTO_WARN_NON_PORTABLE_NAME")," macro."),(0,r.kt)("h3",{id:"non-portable-bytecode"},"non-portable-bytecode"),(0,r.kt)("p",null,"This is raised when the code will not run in Lua environments (when compiling Pluto to bytecode)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'print("h" in "hello")\n')),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'file.pluto:1: warning: non-portable operator usage [non-portable-bytecode]\n    1 | print("h" in "hello")\n      | ^^^^^^^^^^^^^^^^^^^^^ here: this operator generates bytecode which is incompatible with Lua.\n')),(0,r.kt)("p",null,"To avoid excessive annoyance, this warning type is off by default. To enable it, scripters can use the ",(0,r.kt)("a",{parentName:"p",href:"#compile-time-configuration"},"compile-time configuration")," and integrators can define the ",(0,r.kt)("inlineCode",{parentName:"p"},"PLUTO_WARN_NON_PORTABLE_BYTECODE")," macro."),(0,r.kt)("h2",{id:"compile-time-configuration"},"Compile-time Configuration"),(0,r.kt)("p",null,"The state of each warning type can be changed during compile-time and exception for certain code can be made."),(0,r.kt)("h3",{id:"changing-warning-states"},"Changing Warning States"),(0,r.kt)("p",null,"Warnings have 3 states: 'disable', 'enable', and 'error'. The 'error' state is a more aggressive version of 'enable' that causes compilation to fail if the warning type is raied."),(0,r.kt)("p",null,"To change the state of a warning, write a ",(0,r.kt)("inlineCode",{parentName:"p"},"@pluto_warnings")," comment with the state and warning type joined by a hyphen (-):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-pluto"},'local var = 5\ndo\n  -- @pluto_warnings: disable-var-shadow\n  local var = "hello"\n  -- @pluto_warnings: enable-var-shadow\nend\n')),(0,r.kt)("p",null,"For this, there is also the special type, 'all', which can be used e.g. to enable all warnings except for non-portable-bytecode:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-pluto"},"-- @pluto_warnings: enable-all, disable-non-portable-bytecode\n")),(0,r.kt)("h3",{id:"disable-warnings-on-line"},"Disable Warnings On Line"),(0,r.kt)("p",null,"To disable warnings on a specific line of code, simply put a comment on the line before it with ",(0,r.kt)("inlineCode",{parentName:"p"},"@pluto_warnings: disable-next"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local var = 5\ndo\n  -- @pluto_warnings: disable-next\n  local var = "hello"\nend\n')))}d.isMDXComponent=!0}}]);