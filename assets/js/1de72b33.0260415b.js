"use strict";(self.webpackChunkpluto=self.webpackChunkpluto||[]).push([[7630],{5680:(e,a,n)=>{n.d(a,{xA:()=>p,yg:()=>y});var i=n(6540);function l(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function t(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);a&&(i=i.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?t(Object(n),!0).forEach((function(a){l(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):t(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function o(e,a){if(null==e)return{};var n,i,l=function(e,a){if(null==e)return{};var n,i,l={},t=Object.keys(e);for(i=0;i<t.length;i++)n=t[i],a.indexOf(n)>=0||(l[n]=e[n]);return l}(e,a);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);for(i=0;i<t.length;i++)n=t[i],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var d=i.createContext({}),s=function(e){var a=i.useContext(d),n=a;return e&&(n="function"==typeof e?e(a):r(r({},a),e)),n},p=function(e){var a=s(e.components);return i.createElement(d.Provider,{value:a},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var a=e.children;return i.createElement(i.Fragment,{},a)}},m=i.forwardRef((function(e,a){var n=e.components,l=e.mdxType,t=e.originalType,d=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=s(n),m=l,y=u["".concat(d,".").concat(m)]||u[m]||g[m]||t;return n?i.createElement(y,r(r({ref:a},p),{},{components:n})):i.createElement(y,r({ref:a},p))}));function y(e,a){var n=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var t=n.length,r=new Array(t);r[0]=m;var o={};for(var d in a)hasOwnProperty.call(a,d)&&(o[d]=a[d]);o.originalType=e,o[u]="string"==typeof e?e:l,r[1]=o;for(var s=2;s<t;s++)r[s]=n[s];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3060:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>d,contentTitle:()=>r,default:()=>g,frontMatter:()=>t,metadata:()=>o,toc:()=>s});var i=n(8168),l=(n(6540),n(5680));const t={sidebar_position:13},r=void 0,o={unversionedId:"Changelog",id:"Changelog",title:"Changelog",description:"This page contains the changelogs from all releases of Pluto.",source:"@site/docs/Changelog.md",sourceDirName:".",slug:"/Changelog",permalink:"/docs/Changelog",draft:!1,tags:[],version:"current",sidebarPosition:13,frontMatter:{sidebar_position:13},sidebar:"tutorialSidebar",previous:{title:"For Integrators",permalink:"/docs/For Integrators"}},d={},s=[{value:"0.10.4",id:"0104",level:2},{value:"0.10.3",id:"0103",level:2},{value:"0.10.2",id:"0102",level:2},{value:"0.10.1",id:"0101",level:2},{value:"0.10.0",id:"0100",level:2},{value:"0.9.5",id:"095",level:2},{value:"0.9.4",id:"094",level:2},{value:"0.9.3",id:"093",level:2},{value:"0.9.2",id:"092",level:2},{value:"0.9.1",id:"091",level:2},{value:"0.9.0",id:"090",level:2},{value:"0.8.2",id:"082",level:2},{value:"0.8.1",id:"081",level:2},{value:"0.8.0",id:"080",level:2},{value:"0.7.4",id:"074",level:2},{value:"0.7.3",id:"073",level:2},{value:"0.7.2",id:"072",level:2},{value:"0.7.1",id:"071",level:2},{value:"0.7.0",id:"070",level:2},{value:"0.6.3",id:"063",level:2},{value:"0.6.2",id:"062",level:2},{value:"0.6.1",id:"061",level:2},{value:"0.6.0",id:"060",level:2},{value:"0.5.4",id:"054",level:2},{value:"0.5.3",id:"053",level:2},{value:"0.5.2",id:"052",level:2},{value:"0.5.1",id:"051",level:2},{value:"0.5.0",id:"050",level:2},{value:"0.4.5",id:"045",level:2},{value:"0.4.4",id:"044",level:2},{value:"0.4.3",id:"043",level:2},{value:"0.4.2",id:"042",level:2},{value:"0.4.1",id:"041",level:2},{value:"0.4.0",id:"040",level:2},{value:"0.3.2",id:"032",level:2},{value:"0.3.1",id:"031",level:2},{value:"0.3.0",id:"030",level:2},{value:"0.2.2",id:"022",level:2},{value:"0.2.1",id:"021",level:2},{value:"0.2.0",id:"020",level:2},{value:"0.1.0",id:"010",level:2}],p={toc:s},u="wrapper";function g(e){let{components:a,...n}=e;return(0,l.yg)(u,(0,i.A)({},p,n,{components:a,mdxType:"MDXLayout"}),(0,l.yg)("p",null,"This page contains the changelogs from all ",(0,l.yg)("a",{parentName:"p",href:"https://github.com/PlutoLang/Pluto/releases"},"releases of Pluto"),"."),(0,l.yg)("h2",{id:"0104"},"0.10.4"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Compile-Time Evaluation: Fixed ",(0,l.yg)("inlineCode",{parentName:"li"},"$elseif")," not working"),(0,l.yg)("li",{parentName:"ul"},"Fixed derived classes having their ","_","_","index overwritten")),(0,l.yg)("p",null,"Standard Library:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Improved scheduler's handling of errorfunc so debug.traceback is more useful"),(0,l.yg)("li",{parentName:"ul"},"Optimized base64 decode operations"),(0,l.yg)("li",{parentName:"ul"},"FFI: Fixed unloading library if it's out of scope but its functions are not"),(0,l.yg)("li",{parentName:"ul"},"FFI: Fixed incorrectly writing f32 & f64 values for struct members"),(0,l.yg)("li",{parentName:"ul"},"Fixed various issues with big inputs on dumpvar, exportvar, json.encode, json.decode, xml.encode, & xml.decode")),(0,l.yg)("h2",{id:"0103"},"0.10.3"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Compile-Time Evaluation: ",(0,l.yg)("inlineCode",{parentName:"li"},"io.contents")," and ",(0,l.yg)("inlineCode",{parentName:"li"},"type")," are now also available"),(0,l.yg)("li",{parentName:"ul"},"Compile-Time Evaluation: Table return type is now supported (for functions like ",(0,l.yg)("inlineCode",{parentName:"li"},"url.parse"),")"),(0,l.yg)("li",{parentName:"ul"},"Improved handling when a C++ exception is thrown during ffi.call"),(0,l.yg)("li",{parentName:"ul"},"Fixed not inferring that a keyword should be disabled when used as a global variable",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"For Integrators: Added ",(0,l.yg)("inlineCode",{parentName:"li"},"PLUTO_PARANOID_KEYWORD_DETECTION")," to make this more aggressive"))),(0,l.yg)("li",{parentName:"ul"},"Fixed infinite loop when switch control value contains ",(0,l.yg)("inlineCode",{parentName:"li"},"or")," or ",(0,l.yg)("inlineCode",{parentName:"li"},"and")),(0,l.yg)("li",{parentName:"ul"},"Fixed base32.decode not working correctly on some ARM systems")),(0,l.yg)("h2",{id:"0102"},"0.10.2"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Added io.mkdir as an alias for io.makedir"),(0,l.yg)("li",{parentName:"ul"},"Added io.mkdirs as an alias for io.makedirs"),(0,l.yg)("li",{parentName:"ul"},"Fixed class preparsing issues with 'switch' & 'do' statements"),(0,l.yg)("li",{parentName:"ul"},"Fixed not being able to use reserved identifiers with colon call syntax")),(0,l.yg)("h2",{id:"0101"},"0.10.1"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Compatibility: Fixed not inferring that a keyword should be disabled from parameter"),(0,l.yg)("li",{parentName:"ul"},"Universal Block Opener: Fixed ",(0,l.yg)("inlineCode",{parentName:"li"},"do")," not being accepted instead of ",(0,l.yg)("inlineCode",{parentName:"li"},"then")," for ",(0,l.yg)("inlineCode",{parentName:"li"},"catch")," and ",(0,l.yg)("inlineCode",{parentName:"li"},"$if")),(0,l.yg)("li",{parentName:"ul"},"FFI library: Improved cdef parsing and error reporting"),(0,l.yg)("li",{parentName:"ul"},"Crypto library: Fixed returning incorrect hex digest for MD5 in some cases"),(0,l.yg)("li",{parentName:"ul"},"Socket library: Fixed an issue where the remote closing a connection too soon could cause recv/peek to never see some data that was sent")),(0,l.yg)("h2",{id:"0100"},"0.10.0"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Added chained comparisons (e.g. ",(0,l.yg)("inlineCode",{parentName:"li"},"1 <= i <= #t"),")"),(0,l.yg)("li",{parentName:"ul"},"Added private methods to classes"),(0,l.yg)("li",{parentName:"ul"},"Private fields (and methods) can be declared and accessed anywhere inside the class now. Previously, you needed to define a private field ",(0,l.yg)("em",{parentName:"li"},"before")," you accessed it. This is no longer a restriction."),(0,l.yg)("li",{parentName:"ul"},"Pluto now automatically detects if non-compatible keywords should be enabled or disabled based on usage",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"This is overwritten by the scripter using ",(0,l.yg)("inlineCode",{parentName:"li"},"pluto_use")," or the integrator or user managing compatibility mode, so it only applies when absolutely zero configuration has been applied. This is a significant improvement for lua source code compatibility. "))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"do")," can now be used instead of ",(0,l.yg)("inlineCode",{parentName:"li"},"then")," and ",(0,l.yg)("inlineCode",{parentName:"li"},"begin")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"if")," expressions are now no longer deprecated but require an ",(0,l.yg)("inlineCode",{parentName:"li"},"end")," (e.g. ",(0,l.yg)("inlineCode",{parentName:"li"},"print(if a then b else c end)"),")"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"$define")," statement now requires an assignment"),(0,l.yg)("li",{parentName:"ul"},"Fixed not being able to load Lua C modules on Linux",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"For simplicity in this regard, Pluto now always uses the C ABI to export ",(0,l.yg)("inlineCode",{parentName:"li"},"lua_")," functions and the C++ ABI for ",(0,l.yg)("inlineCode",{parentName:"li"},"pluto_")," functions.")))),(0,l.yg)("p",null,"Standard library:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Added canvas library"),(0,l.yg)("li",{parentName:"ul"},"Added ffi library"),(0,l.yg)("li",{parentName:"ul"},"Added regex library"),(0,l.yg)("li",{parentName:"ul"},"Added assert.contains"),(0,l.yg)("li",{parentName:"ul"},"Added bigint.eq, bigint.lt, & bigint.le"),(0,l.yg)("li",{parentName:"ul"},"Added crypto.ripemd160"),(0,l.yg)("li",{parentName:"ul"},"Added crypto.exportkey & crypto.importkey"),(0,l.yg)("li",{parentName:"ul"},"Added crypto.decompress"),(0,l.yg)("li",{parentName:"ul"},"Added string.tohex & string.fromhex"),(0,l.yg)("li",{parentName:"ul"},"Added table.findindex/findkey, table.back, table.keys, table.modget, table.modset, table.slice, table.countvalues, & table.chunk"),(0,l.yg)("li",{parentName:"ul"},"Added socket.getpeer, socket.peek, socket.getside, socket.istls, & socket.isopen"),(0,l.yg)("li",{parentName:"ul"},"Added optional limit argument to string.split"),(0,l.yg)("li",{parentName:"ul"},"Added io.cwd and io.chdir as aliases for io.currentdir"),(0,l.yg)("li",{parentName:"ul"},"socket.starttls can now be used on server sockets"),(0,l.yg)("li",{parentName:"ul"},"Optimized json.encode with ",(0,l.yg)("inlineCode",{parentName:"li"},"__order")),(0,l.yg)("li",{parentName:"ul"},"Fixed handling when an invalid RSA private key is passed to crypto.encrypt, crypto.decrypt, crypto.sign")),(0,l.yg)("h2",{id:"095"},"0.9.5"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Fixed io.contents not returning an empty string for empty files on Windows"),(0,l.yg)("li",{parentName:"ul"},"Fixed table.clear not resetting cached length"),(0,l.yg)("li",{parentName:"ul"},"Fixed http.request allowing header values to contain CR and LF (CVE-2024-45597)"),(0,l.yg)("li",{parentName:"ul"},"Fixed strings implicitly concatenating with each other"),(0,l.yg)("li",{parentName:"ul"},"Fixed incorrect formatting with some instances of VM dumping"),(0,l.yg)("li",{parentName:"ul"},"PHP build scripts now pass on additional arguments to the compiler")),(0,l.yg)("p",null,"From Lua:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Fixed wrong code gen for indices with comparisons")),(0,l.yg)("h2",{id:"094"},"0.9.4"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Improved field-shadow warning to say which field is shadowed"),(0,l.yg)("li",{parentName:"ul"},"Improved handing of ",(0,l.yg)("inlineCode",{parentName:"li"},"parent")," keyword"),(0,l.yg)("li",{parentName:"ul"},"Improved error message for ",(0,l.yg)("inlineCode",{parentName:"li"},"if then")),(0,l.yg)("li",{parentName:"ul"},"Fixed an 'else if' warning false-positive"),(0,l.yg)("li",{parentName:"ul"},"Fixed compile-time concat sometimes causing a parse error"),(0,l.yg)("li",{parentName:"ul"},"Fixed infinite loop with nested switch expressions when flow should go to default case"),(0,l.yg)("li",{parentName:"ul"},"Fixed exception when raising argument type mismatch warning when expected type is a function"),(0,l.yg)("li",{parentName:"ul"},"Fixed a compatibility issue with ",(0,l.yg)("inlineCode",{parentName:"li"},"return case"))),(0,l.yg)("p",null,"Standard library:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Made string.replace binary-safe and faster"),(0,l.yg)("li",{parentName:"ul"},"CaT module now supports the optional ",(0,l.yg)("a",{parentName:"li",href:"https://github.com/calamity-inc/Soup/blob/senpai/docs/user/cat.md#value-encoding"},"value encoding")," feature")),(0,l.yg)("h2",{id:"093"},"0.9.3"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Added a warning for '(' being used instead of '|' for pipe operator arguments"),(0,l.yg)("li",{parentName:"ul"},"Improved error reporting when an invalid parent is given to 'extends'"),(0,l.yg)("li",{parentName:"ul"},"Fixed extending a global class unexpectedly pushing _G"),(0,l.yg)("li",{parentName:"ul"},"Fixed incorrect results when using 'not' on result of null coalescing operator",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"As a result of this fix, the null coalescing operator is now bytecode-compatible with Lua"))),(0,l.yg)("li",{parentName:"ul"},"Fixed parsing ambiguities with ternary expressions in switch cases")),(0,l.yg)("p",null,"Standard library:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Fixed ",(0,l.yg)("inlineCode",{parentName:"li"},"json.encode(json.decode(..., json.withnull + json.withorder))")," producing unexpected artifacts"),(0,l.yg)("li",{parentName:"ul"},"Fixed data corruption when json.decode is used on large data"),(0,l.yg)("li",{parentName:"ul"},"Fixed insufficient TLS peer verification in HTTP library and socket.starttls in non-WASM builds (CVE-2024-32973)")),(0,l.yg)("h2",{id:"092"},"0.9.2"),(0,l.yg)("p",null,"This release fixes several regressions made in 0.9.1:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Fixed failing to compile on aarch64"),(0,l.yg)("li",{parentName:"ul"},"Fixed method calls no longer working in ternary expressions even with parentheses"),(0,l.yg)("li",{parentName:"ul"},"Fixed walrus operator no longer being usable within unary operator expressions")),(0,l.yg)("p",null,"Furthermore, it improves the walrus operator in regards to disallowing UB and clarifying related error messages."),(0,l.yg)("h2",{id:"091"},"0.9.1"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Improved try/catch"),(0,l.yg)("li",{parentName:"ul"},"Improved parsing of for-as loops"),(0,l.yg)("li",{parentName:"ul"},"Deprecated if expressions (",(0,l.yg)("inlineCode",{parentName:"li"},"if a then b else c"),") in favor of ternary expressions (",(0,l.yg)("inlineCode",{parentName:"li"},"a ? b : c"),")"),(0,l.yg)("li",{parentName:"ul"},"Fixed instances of ",(0,l.yg)("inlineCode",{parentName:"li"},":")," starting method call when it should delimit ternary expression"),(0,l.yg)("li",{parentName:"ul"},"Fixed unreachable-code triggering for non-constant values"),(0,l.yg)("li",{parentName:"ul"},"Fixed repeat + continue being able to read uninitialized variables"),(0,l.yg)("li",{parentName:"ul"},"Fixed break and continue possibly not closing upvalues"),(0,l.yg)("li",{parentName:"ul"},"Fixed continue not working as expected when passing through switch statement"),(0,l.yg)("li",{parentName:"ul"},"Fixed switch cases being able to read uninitialized variables"),(0,l.yg)("li",{parentName:"ul"},"Fixed inconsistent behavior with safe navigtion method calls and multiple return values"),(0,l.yg)("li",{parentName:"ul"},"Fixed walrus operator being able to cause UB or corrupt the stack"),(0,l.yg)("li",{parentName:"ul"},"Fixed pipe operator possibly generating incorrect code")),(0,l.yg)("p",null,"Huge thanks to @XmiliaH for reporting the majority of bugs fixed in this update and helping fix them."),(0,l.yg)("h2",{id:"090"},"0.9.0"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Added ",(0,l.yg)("inlineCode",{parentName:"li"},"$define")," statement"),(0,l.yg)("li",{parentName:"ul"},"Added pipe operator (",(0,l.yg)("inlineCode",{parentName:"li"},"|>"),")"),(0,l.yg)("li",{parentName:"ul"},"Added compound XOR operator (",(0,l.yg)("inlineCode",{parentName:"li"},"~="),")"),(0,l.yg)("li",{parentName:"ul"},"Added optional ",(0,l.yg)("inlineCode",{parentName:"li"},"global")," keyword and 'implicit-global' warning"),(0,l.yg)("li",{parentName:"ul"},"Added ",(0,l.yg)("inlineCode",{parentName:"li"},"@fallthrough")," annotation and 'unannotated-fallthrough' warning"),(0,l.yg)("li",{parentName:"ul"},"Added ",(0,l.yg)("inlineCode",{parentName:"li"},"<nodiscard>")," function attribute and 'discarded-return' warning"),(0,l.yg)("li",{parentName:"ul"},"Added 'field-shadow' warning"),(0,l.yg)("li",{parentName:"ul"},"Lambdas can now have full bodies by starting with 'do' (e.g. ",(0,l.yg)("inlineCode",{parentName:"li"},"|a| -> do return a end"),")"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"pluto_use")," can now also be used via ",(0,l.yg)("inlineCode",{parentName:"li"},"@pluto_use")," in comments"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"new")," operator now also supports static 'new' function"),(0,l.yg)("li",{parentName:"ul"},"Deprecated ",(0,l.yg)("inlineCode",{parentName:"li"},"**")," operator (use ",(0,l.yg)("inlineCode",{parentName:"li"},"^")," instead)"),(0,l.yg)("li",{parentName:"ul"},"Deprecated ",(0,l.yg)("inlineCode",{parentName:"li"},"let")," statement (use ",(0,l.yg)("inlineCode",{parentName:"li"},"local")," instead)"),(0,l.yg)("li",{parentName:"ul"},"Deprecated ",(0,l.yg)("inlineCode",{parentName:"li"},"const")," statement (use ",(0,l.yg)("inlineCode",{parentName:"li"},"local")," with ",(0,l.yg)("inlineCode",{parentName:"li"},"<const>")," or ",(0,l.yg)("inlineCode",{parentName:"li"},"$define")," instead)"),(0,l.yg)("li",{parentName:"ul"},"Deprecated ",(0,l.yg)("inlineCode",{parentName:"li"},"<constexpr>")," attribute (replaced by ",(0,l.yg)("inlineCode",{parentName:"li"},"$define")," statement)"),(0,l.yg)("li",{parentName:"ul"},"Re-added compile-time concat optimization"),(0,l.yg)("li",{parentName:"ul"},"Fixed switch cases being able to jump into the scope of a variable"),(0,l.yg)("li",{parentName:"ul"},"Fixed being able to set ",(0,l.yg)("inlineCode",{parentName:"li"},"nil")," as a default argument")),(0,l.yg)("p",null,"Standard library:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Added '*' library"),(0,l.yg)("li",{parentName:"ul"},"Added 'cat' library"),(0,l.yg)("li",{parentName:"ul"},"Added 'http' library"),(0,l.yg)("li",{parentName:"ul"},"Added 'socket' library"),(0,l.yg)("li",{parentName:"ul"},"Added 'xml' library"),(0,l.yg)("li",{parentName:"ul"},"Added 'bigint' class"),(0,l.yg)("li",{parentName:"ul"},"Added 'scheduler' class"),(0,l.yg)("li",{parentName:"ul"},"Added os.platform constant"),(0,l.yg)("li",{parentName:"ul"},"Added range function"),(0,l.yg)("li",{parentName:"ul"},"Added io.contents function"),(0,l.yg)("li",{parentName:"ul"},"Added io.relative function"),(0,l.yg)("li",{parentName:"ul"},"Added copying variants of existing functions (table.sorted, table.mapped, table.filtered, table.reversed, table.reordered)"),(0,l.yg)("li",{parentName:"ul"},"Added table.size function"),(0,l.yg)("li",{parentName:"ul"},"Added table.clear function"),(0,l.yg)("li",{parentName:"ul"},"Added table.reduce, table.min, & table.max functions"),(0,l.yg)("li",{parentName:"ul"},"Added table.find function"),(0,l.yg)("li",{parentName:"ul"},"Added table.checkall function"),(0,l.yg)("li",{parentName:"ul"},"Added coroutine.sleep function"),(0,l.yg)("li",{parentName:"ul"},"Added crypto.generatekeypair function"),(0,l.yg)("li",{parentName:"ul"},"Added crypto.encrypt & crypto.decrypt functions"),(0,l.yg)("li",{parentName:"ul"},"Added crypto.sign & crypto.verify functions"),(0,l.yg)("li",{parentName:"ul"},"Added crypto.sha1, crypto.sha384, & crypto.sha512 functions"),(0,l.yg)("li",{parentName:"ul"},"Added crypto.adler32 function"),(0,l.yg)("li",{parentName:"ul"},"Added url.parse function"),(0,l.yg)("li",{parentName:"ul"},"Added math.round function"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"json.encode")," now supports ",(0,l.yg)("inlineCode",{parentName:"li"},"__order")," for objects"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"json.decode")," now has an optional flags parameter, they can be combined via binary OR",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"json.withnull")," makes it decode JSON nulls as ",(0,l.yg)("inlineCode",{parentName:"li"},"json.null")," instead of ",(0,l.yg)("inlineCode",{parentName:"li"},"nil")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"json.withorder")," makes it produce ",(0,l.yg)("inlineCode",{parentName:"li"},"__order")," field for objects"))),(0,l.yg)("li",{parentName:"ul"},"coroutines/threads now have a metatable by default"),(0,l.yg)("li",{parentName:"ul"},"base64.encode & base32.encode changed padding parameter's default value from false to true (base64.urlencode is unchanged)"),(0,l.yg)("li",{parentName:"ul"},"Fixed crypto.fnv1 & crypto.fnv1a producing incorrect hashes for non-ASCII strings")),(0,l.yg)("p",null,"CLI:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Added '-c' flag to pluto & plutoc to enable compatibility mode")),(0,l.yg)("p",null,"For integrators:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Added ",(0,l.yg)("inlineCode",{parentName:"li"},"PLUTO_READ_FILE_HOOK")," & ",(0,l.yg)("inlineCode",{parentName:"li"},"PLUTO_WRITE_FILE_HOOK")),(0,l.yg)("li",{parentName:"ul"},"Added ",(0,l.yg)("inlineCode",{parentName:"li"},"PLUTO_HTTP_REQUEST_HOOK")),(0,l.yg)("li",{parentName:"ul"},"Removed ",(0,l.yg)("inlineCode",{parentName:"li"},"PLUTO_USE_THROW")," as we now default to using C++ exceptions for Lua errors to avoid breaking RAII semantics. You can still specify ",(0,l.yg)("inlineCode",{parentName:"li"},"LUA_USE_LONGJMP")," if you want long jumps.")),(0,l.yg)("h2",{id:"082"},"0.8.2"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Added variable scoping warnings to switch statements to highlight code that will break in 0.9.0"),(0,l.yg)("li",{parentName:"ul"},"Improved some error messages"),(0,l.yg)("li",{parentName:"ul"},"Fixed base32 & base64 functions not being binary-safe"),(0,l.yg)("li",{parentName:"ul"},"Removed compile-time concat optimization because it could produce incorrect results")),(0,l.yg)("h2",{id:"081"},"0.8.1"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Added a specialized error message for ",(0,l.yg)("inlineCode",{parentName:"li"},"local class =")," etc"),(0,l.yg)("li",{parentName:"ul"},"'exportvar' now prefixes function bytecode with 'load'"),(0,l.yg)("li",{parentName:"ul"},"Improved code generation for switch blocks"),(0,l.yg)("li",{parentName:"ul"},'Improved "possibly unwanted function call" warning'),(0,l.yg)("li",{parentName:"ul"},"Fixed dumpvar & exportvar not handling recursion of sub-tables"),(0,l.yg)("li",{parentName:"ul"},"Fixed assert.equal & assert.nequal ignoring extra fields in value2"),(0,l.yg)("li",{parentName:"ul"},"Fixed 'until' possibly using a variable from wrong scope due to 'continue'"),(0,l.yg)("li",{parentName:"ul"},"Fixed var-shadow warning for named vararg being raised on the wrong line")),(0,l.yg)("p",null,"For integrators:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Added ",(0,l.yg)("inlineCode",{parentName:"li"},"PLUTO_MEMORY_LIMIT")),(0,l.yg)("li",{parentName:"ul"},"Added ",(0,l.yg)("inlineCode",{parentName:"li"},"PLUTO_NO_DEBUGLIB")),(0,l.yg)("li",{parentName:"ul"},"Added ",(0,l.yg)("inlineCode",{parentName:"li"},"PLUTO_NO_COROLIB"))),(0,l.yg)("p",null,"For a more comprehensive overview of the changes, ",(0,l.yg)("a",{parentName:"p",href:"https://github.com/PlutoLang/Pluto/compare/0.8.0...0.8.1"},"take a look at the commit log"),"."),(0,l.yg)("h2",{id:"080"},"0.8.0"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Added switch expressions"),(0,l.yg)("li",{parentName:"ul"},"Added shorthand fallthrough syntax for switch statement & expression, e.g. ",(0,l.yg)("inlineCode",{parentName:"li"},"case 1, 2: ...")),(0,l.yg)("li",{parentName:"ul"},"Added try...catch statement"),(0,l.yg)("li",{parentName:"ul"},"Added spaceship operator (",(0,l.yg)("inlineCode",{parentName:"li"},"<=>"),")"),(0,l.yg)("li",{parentName:"ul"},"Added safe navigation for method calls: ",(0,l.yg)("inlineCode",{parentName:"li"},"nilable_inst?:method()"),", ",(0,l.yg)("inlineCode",{parentName:"li"},"inst:nilable_method?()"),", ",(0,l.yg)("inlineCode",{parentName:"li"},"nilable_inst?:nilable_method?()")),(0,l.yg)("li",{parentName:"ul"},"Added optional 'const' keyword as shorthand for ",(0,l.yg)("inlineCode",{parentName:"li"},"local ... <const> [= ...]"),", enabled with ",(0,l.yg)("inlineCode",{parentName:"li"},"pluto_use const"),"."),(0,l.yg)("li",{parentName:"ul"},"Added ",(0,l.yg)("inlineCode",{parentName:"li"},'pluto_use "VERSION+"')),(0,l.yg)("li",{parentName:"ul"},"Tables now have a metatable by default (",(0,l.yg)("inlineCode",{parentName:"li"},"{ __index = _G.table }"),")."),(0,l.yg)("li",{parentName:"ul"},"Added '!' as an alias for 'not'"),(0,l.yg)("li",{parentName:"ul"},"Added 'private' modifier for class fields"),(0,l.yg)("li",{parentName:"ul"},"Improved 'class' and 'extends' to support indexed names"),(0,l.yg)("li",{parentName:"ul"},"Improved 'instanceof' to be usable with more complex expressions"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"export")," now works in all scopes, not just the main body"),(0,l.yg)("li",{parentName:"ul"},"Updated ",(0,l.yg)("inlineCode",{parentName:"li"},"in")," operator on tables to check values instead of keys"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"\\{")," is now a valid escape sequence (for interpolated strings)"),(0,l.yg)("li",{parentName:"ul"},"Fixed to-be-closed variables not working in switch cases"),(0,l.yg)("li",{parentName:"ul"},"Fixed 'new' not working as expected if it was disabled by the environment and re-enabled by 'pluto_use'"),(0,l.yg)("li",{parentName:"ul"},"Fixed 'enum class' not incrementing enumerator values"),(0,l.yg)("li",{parentName:"ul"},"Fixed not being able to use expressions such as increment in enum without parentheses"),(0,l.yg)("li",{parentName:"ul"},"Added compile-time concat optimization")),(0,l.yg)("p",null,"Warnings:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Added warning for local attributes used without '","<","' ... '",">","'"),(0,l.yg)("li",{parentName:"ul"},"Now propagating types for global variables so when their value is assigned to something, mismatches can be detected."),(0,l.yg)("li",{parentName:"ul"},"Added optional ",(0,l.yg)("inlineCode",{parentName:"li"},"global-shadow")," warning which is like ",(0,l.yg)("inlineCode",{parentName:"li"},"var-shadow")," but for globals that are especially vulnerable to obscure shadowing bugs (to prevent excessive annoyance).",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"These globals include: ",(0,l.yg)("inlineCode",{parentName:"li"},"arg"),",",(0,l.yg)("inlineCode",{parentName:"li"},"string"),", and ",(0,l.yg)("inlineCode",{parentName:"li"},"table"),". Integrators can change this via ",(0,l.yg)("inlineCode",{parentName:"li"},"PLUTO_COMMON_GLOBAL_NAMES")),(0,l.yg)("li",{parentName:"ul"},"Global shadow warnings do not apply to localization optimization (i.e, ",(0,l.yg)("inlineCode",{parentName:"li"},"local table = table"),")"))),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"var-shadow")," has been improved to check more enclosing scopes"),(0,l.yg)("li",{parentName:"ul"},"Improved ",(0,l.yg)("inlineCode",{parentName:"li"},"unreachable-code")),(0,l.yg)("li",{parentName:"ul"},"Fixed var-shadow warning for locals used in switch cases despite break"),(0,l.yg)("li",{parentName:"ul"},"Added optional ",(0,l.yg)("inlineCode",{parentName:"li"},"non-portable-code"),", ",(0,l.yg)("inlineCode",{parentName:"li"},"non-portable-bytecode"),", and ",(0,l.yg)("inlineCode",{parentName:"li"},"non-portable-name")," warning types"),(0,l.yg)("li",{parentName:"ul"},"Warnings can now be promoted to errors, e.g. ",(0,l.yg)("inlineCode",{parentName:"li"},"@pluto_warnings error-all"))),(0,l.yg)("p",null,"Standard library:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Soup is now always linked in, obsoleting ",(0,l.yg)("inlineCode",{parentName:"li"},"_PSOUP")),(0,l.yg)("li",{parentName:"ul"},"Added assertion library (see ",(0,l.yg)("a",{parentName:"li",href:"https://github.com/PlutoLang/Pluto/pull/426"},"here")," for more preliminary detail)"),(0,l.yg)("li",{parentName:"ul"},"Added url library (encode & decode)"),(0,l.yg)("li",{parentName:"ul"},"Added exception class"),(0,l.yg)("li",{parentName:"ul"},"Added vector3 class"),(0,l.yg)("li",{parentName:"ul"},"Added dumpvar & exportvar"),(0,l.yg)("li",{parentName:"ul"},"Added string.truncate"),(0,l.yg)("li",{parentName:"ul"},"Added string.replace \u2014 a slightly faster, but mostly more straightforward alternative to gsub.",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Most notably, not burdened by ",(0,l.yg)("inlineCode",{parentName:"li"},"MAX_CAPTURES")))),(0,l.yg)("li",{parentName:"ul"},"Added string.formatint (supports any BigInt impl that can offer the user a string representation)",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Also supports any grouping & any separator without concerning locale."))),(0,l.yg)("li",{parentName:"ul"},"Added table.filter"),(0,l.yg)("li",{parentName:"ul"},"Added table.map"),(0,l.yg)("li",{parentName:"ul"},"Added table.reverse"),(0,l.yg)("li",{parentName:"ul"},"Added table.reorder"),(0,l.yg)("li",{parentName:"ul"},"Added io.currentdir"),(0,l.yg)("li",{parentName:"ul"},"Added io.part"),(0,l.yg)("li",{parentName:"ul"},"Added io.writetime"),(0,l.yg)("li",{parentName:"ul"},"Added math.isnan"),(0,l.yg)("li",{parentName:"ul"},"Added compareversions"),(0,l.yg)("li",{parentName:"ul"},"Added wcall"),(0,l.yg)("li",{parentName:"ul"},"Added math.atan2 as an alias for math.atan"),(0,l.yg)("li",{parentName:"ul"},"Added json.null"),(0,l.yg)("li",{parentName:"ul"},"io.absolute now has an optional argument to request a canonicalized absolute path"),(0,l.yg)("li",{parentName:"ul"},"Updated string.rfind to accept Lua patterns"),(0,l.yg)("li",{parentName:"ul"},"Renamed io.copyto to io.copy"),(0,l.yg)("li",{parentName:"ul"},"Renamed base64.url_encode & base64.url_decode to base64.urlencode & base64.urldecode"),(0,l.yg)("li",{parentName:"ul"},"Deprecated string.find_first_of & string.find_first_not_of in favor of string.find"),(0,l.yg)("li",{parentName:"ul"},"Deprecated string.find_last_of & string.find_last_not_of in favor of string.rfind"),(0,l.yg)("li",{parentName:"ul"},"Deprecated string.lfind in favor of string.find"),(0,l.yg)("li",{parentName:"ul"},"Deprecated crypto.hexdigest in favor of string.format"),(0,l.yg)("li",{parentName:"ul"},"Modified ",(0,l.yg)("inlineCode",{parentName:"li"},"require"),(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Prioritizes local files now to ensure compatibility. Added ",(0,l.yg)("inlineCode",{parentName:"li"},'require("pluto:libname")')," to explicitly request pluto libraries if ever needed (normal still works for pluto libraries, we just check for local files first)."))),(0,l.yg)("li",{parentName:"ul"},"Removed base58")),(0,l.yg)("p",null,"For integrators:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Added ",(0,l.yg)("inlineCode",{parentName:"li"},"PLUTO_NO_FILESYSTEM")," - disables all filesystem access (for sandboxing)."),(0,l.yg)("li",{parentName:"ul"},"Added ",(0,l.yg)("inlineCode",{parentName:"li"},"PLUTO_WARN_NON_PORTABLE_CODE")),(0,l.yg)("li",{parentName:"ul"},"Added ",(0,l.yg)("inlineCode",{parentName:"li"},"PLUTO_WARN_NON_PORTABLE_BYTECODE")),(0,l.yg)("li",{parentName:"ul"},"Added ",(0,l.yg)("inlineCode",{parentName:"li"},"PLUTO_WARN_NON_PORTABLE_NAME")),(0,l.yg)("li",{parentName:"ul"},"Added ",(0,l.yg)("inlineCode",{parentName:"li"},"PLUTO_NO_BINARIES")," - disables all dll/so/c module loading (for sandboxing)"),(0,l.yg)("li",{parentName:"ul"},"Added ",(0,l.yg)("inlineCode",{parentName:"li"},"luaG_addsrcinfo"))),(0,l.yg)("p",null,"Far more information can be found at our documentation: ",(0,l.yg)("a",{parentName:"p",href:"https://pluto-lang.org/"},"https://pluto-lang.org/")),(0,l.yg)("h2",{id:"074"},"0.7.4"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Fixed unexpected behavior when using a ternary expression inside of an interpolated string"),(0,l.yg)("li",{parentName:"ul"},"Fixed ",(0,l.yg)("inlineCode",{parentName:"li"},"table.contains")," returning ",(0,l.yg)("inlineCode",{parentName:"li"},"0")," instead of the actual key for non-integer key types"),(0,l.yg)("li",{parentName:"ul"},"Fixed REPL not recognizing multi-line statements"),(0,l.yg)("li",{parentName:"ul"},"Fixed Pluto-injected code corrupting bytecode")),(0,l.yg)("p",null,"For integrators:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Added ",(0,l.yg)("inlineCode",{parentName:"li"},"PLUTO_LOADCLIB_HOOK"))),(0,l.yg)("h2",{id:"073"},"0.7.3"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Updated error semantics of os.remove & os.rename to match Lua's again (return false instead of raising error), Pluto's 'io' versions of these functions remain unchanged"),(0,l.yg)("li",{parentName:"ul"},"Fixed ",(0,l.yg)("inlineCode",{parentName:"li"},"extends")," not copying over metamethods"),(0,l.yg)("li",{parentName:"ul"},'Fixed "memory allocation error: block too big" when parsing ',(0,l.yg)("inlineCode",{parentName:"li"},"--[[]]")),(0,l.yg)("li",{parentName:"ul"},"Fixed allowing function calls to primitives, causing ambiguities with exprstat after assignment"),(0,l.yg)("li",{parentName:"ul"},"Fixed string.upper & string.lower delimiting on '\\0'"),(0,l.yg)("li",{parentName:"ul"},"Some other improvements and bugfixes")),(0,l.yg)("h2",{id:"072"},"0.7.2"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"String interpolation now allows nested strings"),(0,l.yg)("li",{parentName:"ul"},'Improved "unreachable code" warning'),(0,l.yg)("li",{parentName:"ul"},"Improved some error messages"),(0,l.yg)("li",{parentName:"ul"},"Fixed string interpolation not working with string call syntax"),(0,l.yg)("li",{parentName:"ul"},"Fixed rare issues with 'new', 'extends' and 'instanceof' operators")),(0,l.yg)("h2",{id:"071"},"0.7.1"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Fixed string interpolation not working with single-quoted strings after 0.7.0"),(0,l.yg)("li",{parentName:"ul"},"Fixed os.sleep disregarding execution time limit"),(0,l.yg)("li",{parentName:"ul"},"Fixed scripts being able to go past execution time limit with coroutines")),(0,l.yg)("h2",{id:"070"},"0.7.0"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Added table destructuring (",(0,l.yg)("inlineCode",{parentName:"li"},"local '{' NAME [= FIELD][, ...] '}' '=' TABLE"),")"),(0,l.yg)("li",{parentName:"ul"},"Added array destructuring (",(0,l.yg)("inlineCode",{parentName:"li"},"local '[' NAME[, ...] ']' '=' TABLE"),")"),(0,l.yg)("li",{parentName:"ul"},"Added ",(0,l.yg)("inlineCode",{parentName:"li"},"pluto_use <* | version | token> [= false]")," to toggle non-compatible keywords"),(0,l.yg)("li",{parentName:"ul"},"Added ",(0,l.yg)("inlineCode",{parentName:"li"},"pluto_use let [= false]")," to toggle 'let' alias for 'local'"),(0,l.yg)("li",{parentName:"ul"},"Added ++ statement",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Also supports ",(0,l.yg)("inlineCode",{parentName:"li"},"++t.prop")))),(0,l.yg)("li",{parentName:"ul"},"Added constructor promotion"),(0,l.yg)("li",{parentName:"ul"},"Added compile-time conditionals"),(0,l.yg)("li",{parentName:"ul"},"Improved class expression & statement",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Now supports property declaration without value"),(0,l.yg)("li",{parentName:"ul"},"Now supports type hints (currently without warnings)"),(0,l.yg)("li",{parentName:"ul"},"Now supports access modifiers (currently without warnings or errors)"),(0,l.yg)("li",{parentName:"ul"},"Can now optionally use 'begin' before body"))),(0,l.yg)("li",{parentName:"ul"},"Improved string interpolation to support any expression, not just variable names"),(0,l.yg)("li",{parentName:"ul"},"Improved type hints to support alternatives, e.g. ",(0,l.yg)("inlineCode",{parentName:"li"},"string|int")),(0,l.yg)("li",{parentName:"ul"},"Named arguments may now be used in conjunction with positional arguments"),(0,l.yg)("li",{parentName:"ul"},"Improved 'new' expression to support direct member access into the table it created, e.g. ",(0,l.yg)("inlineCode",{parentName:"li"},'print(new Human("John").name)')),(0,l.yg)("li",{parentName:"ul"},"'new' may now also be used as a statement"),(0,l.yg)("li",{parentName:"ul"},"Fixed loading of precompiled code from files with non-Latin path on Windows"),(0,l.yg)("li",{parentName:"ul"},"Fixed behavior of 'in' expression when used on a temporary table")),(0,l.yg)("p",null,"Out-of-the-box Compatibility:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"'parent' may now be overwritten via local or parameter name"),(0,l.yg)("li",{parentName:"ul"},"All reserved identifiers can now be used with shorthand table syntax and goto")),(0,l.yg)("p",null,"Standard library:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Added coroutine.xresume")),(0,l.yg)("p",null,"For integrators:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Added ",(0,l.yg)("inlineCode",{parentName:"li"},"PLUTO_USE_LET"))),(0,l.yg)("p",null,"More detailed documentation can be found ",(0,l.yg)("a",{parentName:"p",href:"https://pluto-lang.org/"},"here"),"."),(0,l.yg)("h2",{id:"063"},"0.6.3"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Defaults arguments now produce Lua-compatible bytecode"),(0,l.yg)("li",{parentName:"ul"},"Fixed default arguments not working for methods"),(0,l.yg)("li",{parentName:"ul"},"Fixed named arguments, etc. not working for upvalue functions"),(0,l.yg)("li",{parentName:"ul"},"Fixed 'in' expression for when right-hand operand is nested table"),(0,l.yg)("li",{parentName:"ul"},"Fixed 'in' expression being too greedy in consuming righthand operand")),(0,l.yg)("p",null,"For integrators:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Added PLUTO_LUA_LINKABLE")),(0,l.yg)("h2",{id:"062"},"0.6.2"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},'Optional Parentheses now works for table types and with chained "suffix expressions"'),(0,l.yg)("li",{parentName:"ul"},"Fixed ",(0,l.yg)("inlineCode",{parentName:"li"},"new")," overwriting user-defined ",(0,l.yg)("inlineCode",{parentName:"li"},"__index")),(0,l.yg)("li",{parentName:"ul"},"Fixed infinite recursion with multi-level parent calls"),(0,l.yg)("li",{parentName:"ul"},"Fixed some other small issues")),(0,l.yg)("p",null,"Performance:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Optimized lua_insert, lua_remove, & lua_replace (Optimization by @gottfriedleibniz)"),(0,l.yg)("li",{parentName:"ul"},"Optimized luaO_ceillog2 (Inspired by @gottfriedleibniz)"),(0,l.yg)("li",{parentName:"ul"},"Enabled Lua's jump table for clang build as well"),(0,l.yg)("li",{parentName:"ul"},"Fixed a VM performance regression introduced by Pluto")),(0,l.yg)("h2",{id:"061"},"0.6.1"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Improved suggestions (for when using plutoc with the language server)"),(0,l.yg)("li",{parentName:"ul"},"Optimized switch statement code generation (now omits cases leading to default case)"),(0,l.yg)("li",{parentName:"ul"},"Fixed producing syntax error when 'case' or 'default' is used outside of switch"),(0,l.yg)("li",{parentName:"ul"},"Fixed using 'export' outside of global scope not producing an error"),(0,l.yg)("li",{parentName:"ul"},"Fixed some confusing error messages"),(0,l.yg)("li",{parentName:"ul"},"Pulled in the latest Lua changes so some Lua bugs are now fixed")),(0,l.yg)("h2",{id:"060"},"0.6.0"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Added ",(0,l.yg)("inlineCode",{parentName:"li"},"<constexpr>")," attribute to force locals to be compile-time constants"),(0,l.yg)("li",{parentName:"ul"},"Added ",(0,l.yg)("inlineCode",{parentName:"li"},"$expr")," syntax for compile-time evaluation of select functions"),(0,l.yg)("li",{parentName:"ul"},"Added ",(0,l.yg)("inlineCode",{parentName:"li"},"export [NAME=VALUE | function | class]")," syntax"),(0,l.yg)("li",{parentName:"ul"},"Added named arguments (",(0,l.yg)("inlineCode",{parentName:"li"},"name=value")," in funcargs)"),(0,l.yg)("li",{parentName:"ul"},"Added named varargs (",(0,l.yg)("inlineCode",{parentName:"li"},"...NAME"),"), automatically puts the varargs into a table with the given name"),(0,l.yg)("li",{parentName:"ul"},"A subset of Soup is now vendored with Pluto so standard library features that rely on it should now be more viable"),(0,l.yg)("li",{parentName:"ul"},'Removed deprecated "pluto_case" and "pluto_default" keywords'),(0,l.yg)("li",{parentName:"ul"},"Removed ",(0,l.yg)("inlineCode",{parentName:"li"},"when")," statement")),(0,l.yg)("p",null,"Enums:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Added ",(0,l.yg)("inlineCode",{parentName:"li"},"ENUM.ENUMERATOR")," syntax for named enums",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Added ",(0,l.yg)("inlineCode",{parentName:"li"},"ENUM CLASS NAME ...")," syntax to force usage of this syntax"))),(0,l.yg)("li",{parentName:"ul"},"Added enum reflection for named enums (",(0,l.yg)("inlineCode",{parentName:"li"},":names()"),", ",(0,l.yg)("inlineCode",{parentName:"li"},":values()"),", ",(0,l.yg)("inlineCode",{parentName:"li"},":kvmap()"),", ",(0,l.yg)("inlineCode",{parentName:"li"},":vkmap()"),")")),(0,l.yg)("p",null,"Object-oriented programming:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Added ",(0,l.yg)("inlineCode",{parentName:"li"},"new TABLE(...)")," syntax (creates new table, sets TABLE as its metatable + ",(0,l.yg)("strong",{parentName:"li"},"index, calls `:"),"construct(...)` if exists)"),(0,l.yg)("li",{parentName:"ul"},"Added 'class' statement & expression (similar to table but without need for ',' or ';' after properties and functions)",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"'class' and 'local class' statements also support ",(0,l.yg)("inlineCode",{parentName:"li"},"extends NAME")," which sets ",(0,l.yg)("strong",{parentName:"li"},"parent property and metatable with "),"index"),(0,l.yg)("li",{parentName:"ul"},"Added ",(0,l.yg)("inlineCode",{parentName:"li"},"static function NAME")," for use within table constructor/class definition (equal to ",(0,l.yg)("inlineCode",{parentName:"li"},"NAME = function"),")"))),(0,l.yg)("li",{parentName:"ul"},"Added 'parent' expression",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"parent.PROP")," -> ",(0,l.yg)("inlineCode",{parentName:"li"},"self.__parent.PROP")),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"parent:METHOD(...)")," -> ",(0,l.yg)("inlineCode",{parentName:"li"},"self.__parent.METHOD(self, ...)")))),(0,l.yg)("li",{parentName:"ul"},"Added ",(0,l.yg)("inlineCode",{parentName:"li"},"TABLE instanceof METATABLE")," operator")),(0,l.yg)("p",null,"Type hints:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Added 'int' & 'float' type hints (more restrictive than 'number')"),(0,l.yg)("li",{parentName:"ul"},"Added 'void' type hint for function return type")),(0,l.yg)("p",null,"Standard library:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Added utonumber, utostring, & string.uformat"),(0,l.yg)("li",{parentName:"ul"},"Added ",(0,l.yg)("inlineCode",{parentName:"li"},"instanceof(TABLE, METATABLE)"))),(0,l.yg)("p",null,"For integrators upgrading to Pluto 0.6.0:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Consider defining ",(0,l.yg)("inlineCode",{parentName:"li"},"PLUTO_COMPATIBLE_NEW"),", ",(0,l.yg)("inlineCode",{parentName:"li"},"PLUTO_COMPATIBLE_CLASS"),", ",(0,l.yg)("inlineCode",{parentName:"li"},"PLUTO_COMPATIBLE_PARENT")," & ",(0,l.yg)("inlineCode",{parentName:"li"},"PLUTO_COMPATIBLE_EXPORT")," so 'new', 'class', 'parent' & 'export' will not be reserved keywords just yet, instead 'pluto_new', 'pluto_class', 'pluto_parent' & 'pluto_export' can be used.")),(0,l.yg)("p",null,"More detailed documentation can be found ",(0,l.yg)("a",{parentName:"p",href:"https://pluto-lang.org/"},"here"),"."),(0,l.yg)("h2",{id:"054"},"0.5.4"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Default arguments now support tables"),(0,l.yg)("li",{parentName:"ul"},"Pluto now supports building with C ABI so you can replace Lua's shared library with Pluto's without needing to change the program"),(0,l.yg)("li",{parentName:"ul"},"Fixed ",(0,l.yg)("inlineCode",{parentName:"li"},"return")," before ",(0,l.yg)("inlineCode",{parentName:"li"},"case")," or ",(0,l.yg)("inlineCode",{parentName:"li"},"default")," causing a syntax error"),(0,l.yg)("li",{parentName:"ul"},"Fixed access violation on lua_close with strings as default parameters")),(0,l.yg)("h2",{id:"053"},"0.5.3"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Default arguments now support compile-time constant variables, unary ",(0,l.yg)("inlineCode",{parentName:"li"},"-"),", and pseudo-unary ",(0,l.yg)("inlineCode",{parentName:"li"},"+")),(0,l.yg)("li",{parentName:"ul"},"Re-added ",(0,l.yg)("inlineCode",{parentName:"li"},"os.remove")," & ",(0,l.yg)("inlineCode",{parentName:"li"},"os.rename")," because they originated in Lua and should not have been removed"),(0,l.yg)("li",{parentName:"ul"},"Fixed some instances of errors not providing a code snippet and reporting the wrong line"),(0,l.yg)("li",{parentName:"ul"},"Fixed enumerators being limited to 32-bit values"),(0,l.yg)("li",{parentName:"ul"},"Fixed warning disable/enable being global-only"),(0,l.yg)("li",{parentName:"ul"},"Removed if-goto optimisation due to various edge cases where goto is not executed")),(0,l.yg)("h2",{id:"052"},"0.5.2"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Enum statement: Now supports compile-time constant variables when setting value"),(0,l.yg)("li",{parentName:"ul"},"Fixed ",(0,l.yg)("inlineCode",{parentName:"li"},"require"),", ",(0,l.yg)("inlineCode",{parentName:"li"},"dofile"),", etc. not taking UTF-8 encoded paths on Windows"),(0,l.yg)("li",{parentName:"ul"},"Fixed pluto & plutoc not being able to execute files with foreign names on Windows")),(0,l.yg)("h2",{id:"051"},"0.5.1"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Enum Statement: Now supports unary ",(0,l.yg)("inlineCode",{parentName:"li"},"-")," and pseudo-unary ",(0,l.yg)("inlineCode",{parentName:"li"},"+")," when setting value"),(0,l.yg)("li",{parentName:"ul"},"Replaced locals limit with registers limit so you can have more compile-time constants"),(0,l.yg)("li",{parentName:"ul"},"Fixed Pluto's IO functions not taking UTF-8 encoded paths"),(0,l.yg)("li",{parentName:"ul"},"Fixed UB when emitting unfinished string error, possibly resulting in an access violation")),(0,l.yg)("h2",{id:"050"},"0.5.0"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},'Added "for ITERABLE as VALUE" loop'),(0,l.yg)("li",{parentName:"ul"},"Added $-strings (string interpolation)"),(0,l.yg)("li",{parentName:"ul"},"Added prefix ++ operator"),(0,l.yg)("li",{parentName:"ul"},"Added support for binary number literals."),(0,l.yg)("li",{parentName:"ul"},"Added C-style enums"),(0,l.yg)("li",{parentName:"ul"},"Added ",(0,l.yg)("inlineCode",{parentName:"li"},"_PSOUP")," global"),(0,l.yg)("li",{parentName:"ul"},"Updated ",(0,l.yg)("inlineCode",{parentName:"li"},"package.path")," to look for .pluto files in working directory by default"),(0,l.yg)("li",{parentName:"ul"},'Deprecated "pluto_case" and "pluto_default" (now "case" and "default", respectively)'),(0,l.yg)("li",{parentName:"ul"},"Removed what was deprecated in 0.4.0 (sleep -> os.sleep, os.remove -> io.remove, os.rename -> io.rename)"),(0,l.yg)("li",{parentName:"ul"},"Added execution time limit (optional, must be enabled in luaconf.h)"),(0,l.yg)("li",{parentName:"ul"},"Added content moderation")),(0,l.yg)("p",null,"Standard Library:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Added io.makedirs")),(0,l.yg)("p",null,"Standard Library (Soup):"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Added ",(0,l.yg)("inlineCode",{parentName:"li"},"base64")),(0,l.yg)("li",{parentName:"ul"},"Added ",(0,l.yg)("inlineCode",{parentName:"li"},"base58")),(0,l.yg)("li",{parentName:"ul"},"Added ",(0,l.yg)("inlineCode",{parentName:"li"},"base32")),(0,l.yg)("li",{parentName:"ul"},"Added ",(0,l.yg)("inlineCode",{parentName:"li"},"json"))),(0,l.yg)("h2",{id:"045"},"0.4.5"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Improved wording of some warning & error messages"),(0,l.yg)("li",{parentName:"ul"},'Fixed excessive "duplicate local declaration" warnings'),(0,l.yg)("li",{parentName:"ul"},"Cherry-picked some Lua commits, so the following Lua bugs are now fixed:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"'break' may not properly close variable in a 'for' loop"),(0,l.yg)("li",{parentName:"ul"},"error message in 'table.remove'"),(0,l.yg)("li",{parentName:"ul"},"'utf8.codes' accepts spurious continuation bytes"),(0,l.yg)("li",{parentName:"ul"},"Negation in constant folding of '>>' may overflow"),(0,l.yg)("li",{parentName:"ul"},"stack overflow with nesting of coroutine.close")))),(0,l.yg)("h2",{id:"044"},"0.4.4"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Added math.rand as an alias for math.random"),(0,l.yg)("li",{parentName:"ul"},"Changed unknown type hint to be warning instead of error"),(0,l.yg)("li",{parentName:"ul"},"Reverted table.insert optimation due to unexpected behavior"),(0,l.yg)("li",{parentName:"ul"},"Some minor tweaks")),(0,l.yg)("h2",{id:"043"},"0.4.3"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Improved most error messages, and vastly improved the internal code for them."),(0,l.yg)("li",{parentName:"ul"},"These reserved tokens can be used as identifiers outside of their functional context: ",(0,l.yg)("inlineCode",{parentName:"li"},"default"),", ",(0,l.yg)("inlineCode",{parentName:"li"},"case")),(0,l.yg)("li",{parentName:"ul"},"Optimized the performance of ",(0,l.yg)("inlineCode",{parentName:"li"},"table.insert"),". Roughly 3x faster, but still slightly slower than ",(0,l.yg)("inlineCode",{parentName:"li"},"t[#t + 1]")),(0,l.yg)("li",{parentName:"ul"},"Pluto can now be built using ",(0,l.yg)("a",{parentName:"li",href:"https://github.com/calamity-inc/Sun"},"Sun"),".")),(0,l.yg)("h2",{id:"042"},"0.4.2"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Fixes a regression introduced in Pluto 0.4.1 that prevented the walrus operator from working within lambda functions that are passed as function arguments")),(0,l.yg)("h2",{id:"041"},"0.4.1"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Updated lexer to tokenise in a separate pass",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"This fixes Pluto's error messages sometimes not showing the full line"))),(0,l.yg)("li",{parentName:"ul"},"Disallowed use of the walrus operator within a function call because it was found to be more janky than expected")),(0,l.yg)("h2",{id:"040"},"0.4.0"),(0,l.yg)("p",null,"Additions:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Walrus Operator"),(0,l.yg)("li",{parentName:"ul"},"Default parameters for functions."),(0,l.yg)("li",{parentName:"ul"},"New standard library: ",(0,l.yg)("inlineCode",{parentName:"li"},"lcryptlib"),", for various hash algorithms and cryptographic PRNGs. "),(0,l.yg)("li",{parentName:"ul"},"New warnings:",(0,l.yg)("ul",{parentName:"li"},(0,l.yg)("li",{parentName:"ul"},"Unreachable code."),(0,l.yg)("li",{parentName:"ul"},"Too many function arguments.")))),(0,l.yg)("p",null,"Improvements:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Switch case may now use variables."),(0,l.yg)("li",{parentName:"ul"},"Shorthand ternary syntax from C/C++."),(0,l.yg)("li",{parentName:"ul"},"Warnings can be configured with comments."),(0,l.yg)("li",{parentName:"ul"},"Improved performance of some common arithmetic algorithms."),(0,l.yg)("li",{parentName:"ul"},"VM Dumping has been rewritten for superb runtime detail on all opcodes, their arguments, their results, etc."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"string.upper")," & ",(0,l.yg)("inlineCode",{parentName:"li"},"string.lower")," take a second parameter indicating a specific index to change. Absence of this parameter preserves default behavior.")),(0,l.yg)("h2",{id:"032"},"0.3.2"),(0,l.yg)("p",null,"Improvements:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"io.copyto")," will now overwrite existing files instead of throwing an exception."),(0,l.yg)("li",{parentName:"ul"},"Improve error handling of other exception-prone IO functions.")),(0,l.yg)("h2",{id:"031"},"0.3.1"),(0,l.yg)("p",null,"Bugfix:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"String.split would previously invoke an infinite loop when an empty string is used as the delimiter.")),(0,l.yg)("h2",{id:"030"},"0.3.0"),(0,l.yg)("p",null,"Additions:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Inlined method creation."),(0,l.yg)("li",{parentName:"ul"},"STR in STR expressions."),(0,l.yg)("li",{parentName:"ul"},"KEY in INDEXABLE expressions."),(0,l.yg)("li",{parentName:"ul"},"Generalized iteration, no need for ",(0,l.yg)("inlineCode",{parentName:"li"},"pairs"),"."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"io.listdir")),(0,l.yg)("li",{parentName:"ul"},"Reserved keywords as valid fields."),(0,l.yg)("li",{parentName:"ul"},"Null-coalescing operator (w/ compound operator)."),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"continue N")," & ",(0,l.yg)("inlineCode",{parentName:"li"},"break N")," for manipulating outer loops."),(0,l.yg)("li",{parentName:"ul"},"Optional type-hinting, with parser warnings."),(0,l.yg)("li",{parentName:"ul"},'Safe accessor navigation, to avoid "attempt to index nil" errors for deeply nested fields.')),(0,l.yg)("p",null,"Changes:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"table.contains")," now returns an index if found and nil otherwise (previously returned true or false).")),(0,l.yg)("p",null,"Improvements:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Switch no longer has syntactic restrictions"),(0,l.yg)("li",{parentName:"ul"},"Greater switch performance")),(0,l.yg)("p",null,"Documentation for the new changes can be found ",(0,l.yg)("a",{parentName:"p",href:"https://plutolang.github.io/"},"here"),"."),(0,l.yg)("h2",{id:"022"},"0.2.2"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Fixes a bug with the ",(0,l.yg)("inlineCode",{parentName:"li"},"continue")," keyword")),(0,l.yg)("h2",{id:"021"},"0.2.1"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Added VM Dump"),(0,l.yg)("li",{parentName:"ul"},"Implemented long jump optimisation")),(0,l.yg)("h2",{id:"020"},"0.2.0"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Added compile-time warnings for duplicate local declarations"),(0,l.yg)("li",{parentName:"ul"},"Added optional ANSI color sequences in various error & warning messages"),(0,l.yg)("li",{parentName:"ul"},"Added support for ternary expressions"),(0,l.yg)("li",{parentName:"ul"},"Added continue statement"),(0,l.yg)("li",{parentName:"ul"},"Added Table Freezing / Immutability"),(0,l.yg)("li",{parentName:"ul"},"Added Switch/Case statements"),(0,l.yg)("li",{parentName:"ul"},"Added user_data to global_State"),(0,l.yg)("li",{parentName:"ul"},"Added !="),(0,l.yg)("li",{parentName:"ul"},"Added compatibility mode"),(0,l.yg)("li",{parentName:"ul"},"Added table.contains"),(0,l.yg)("li",{parentName:"ul"},"Added new time functions to os api"),(0,l.yg)("li",{parentName:"ul"},"Added negative string indexing"),(0,l.yg)("li",{parentName:"ul"},"Added compound concatenation operator"),(0,l.yg)("li",{parentName:"ul"},"Added new string functions"),(0,l.yg)("li",{parentName:"ul"},"Added portable jumptable implementation that can be optionally enabled"),(0,l.yg)("li",{parentName:"ul"},"Added REPEAT .. WHEN loop support"),(0,l.yg)("li",{parentName:"ul"},"Added new IO library functions"),(0,l.yg)("li",{parentName:"ul"},"Added _PVERSION"),(0,l.yg)("li",{parentName:"ul"},"Implemented table length cache optimisation (2x speedup)"),(0,l.yg)("li",{parentName:"ul"},"Implemented optional parentheses around string literals for method invocation"),(0,l.yg)("li",{parentName:"ul"},"Increased local variable limit from 200 to 249"),(0,l.yg)("li",{parentName:"ul"},"Rebased with Lua for latest bugfixes")),(0,l.yg)("h2",{id:"010"},"0.1.0"),(0,l.yg)("p",null,"Initial version."),(0,l.yg)("p",null,"Notable features:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Lambda expressions"),(0,l.yg)("li",{parentName:"ul"},"Arbitrary character insertion in numeral literals"),(0,l.yg)("li",{parentName:"ul"},"Many compound operators"),(0,l.yg)("li",{parentName:"ul"},(0,l.yg)("inlineCode",{parentName:"li"},"**")," exponent operator")))}g.isMDXComponent=!0}}]);