"use strict";(self.webpackChunkpluto=self.webpackChunkpluto||[]).push([[5181],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>g});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},l=Object.keys(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)a=l[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var u=r.createContext({}),s=function(e){var t=r.useContext(u),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},c=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,l=e.originalType,u=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=s(a),d=n,g=p["".concat(u,".").concat(d)]||p[d]||m[d]||l;return a?r.createElement(g,i(i({ref:t},c),{},{components:a})):r.createElement(g,i({ref:t},c))}));function g(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=a.length,i=new Array(l);i[0]=d;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o[p]="string"==typeof e?e:n,i[1]=o;for(var s=2;s<l;s++)i[s]=a[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},3999:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>s});var r=a(7462),n=(a(7294),a(3905));const l={sidebar_position:15},i=void 0,o={unversionedId:"New Features/Destructuring",id:"New Features/Destructuring",title:"Destructuring",description:"Destructuring is a better way to assign local variables from expressions that return a table.",source:"@site/docs/New Features/Destructuring.md",sourceDirName:"New Features",slug:"/New Features/Destructuring",permalink:"/docs/New Features/Destructuring",draft:!1,tags:[],version:"current",sidebarPosition:15,frontMatter:{sidebar_position:15},sidebar:"tutorialSidebar",previous:{title:"Named Varargs",permalink:"/docs/New Features/Named Varargs"},next:{title:"Constexpr Attribute",permalink:"/docs/New Features/Constexpr Attribute"}},u={},s=[{value:"Array destructuring",id:"array-destructuring",level:2},{value:"Table destructuring",id:"table-destructuring",level:2},{value:"Different variable name",id:"different-variable-name",level:3}],c={toc:s},p="wrapper";function m(e){let{components:t,...a}=e;return(0,n.kt)(p,(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Destructuring is a better way to assign local variables from expressions that return a table."),(0,n.kt)("h2",{id:"array-destructuring"},"Array destructuring"),(0,n.kt)("p",null,"Assuming we have this table:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-pluto"},"local t = { 3, 6, 9 }\n")),(0,n.kt)("p",null,"This is how we would assign each value to variables called ",(0,n.kt)("inlineCode",{parentName:"p"},"a"),", ",(0,n.kt)("inlineCode",{parentName:"p"},"b"),", and ",(0,n.kt)("inlineCode",{parentName:"p"},"c")," using the Lua and Pluto ways:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-pluto",metastring:'title="Lua way"',title:'"Lua','way"':!0},"local a = t[1]\nlocal b = t[2]\nlocal c = t[3]\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-pluto",metastring:'title="Pluto way"',title:'"Pluto','way"':!0},"local [a, b, c] = t\n")),(0,n.kt)("h2",{id:"table-destructuring"},"Table destructuring"),(0,n.kt)("p",null,"Assuming we have this table:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-pluto"},'local t = {\n    name = "John",\n    age = 42\n}\n')),(0,n.kt)("p",null,"This is how we would assign each field to a variable of the same name using the Lua and Pluto ways:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-pluto",metastring:'title="Lua way"',title:'"Lua','way"':!0},"local name = t.name\nlocal age = t.age\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-pluto",metastring:'title="Pluto way"',title:'"Pluto','way"':!0},"local { name, age } = t\n")),(0,n.kt)("h3",{id:"different-variable-name"},"Different variable name"),(0,n.kt)("p",null,"Assuming we have the same table as above, this is how we'd assign the ",(0,n.kt)("inlineCode",{parentName:"p"},"name")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"age")," fields to ",(0,n.kt)("inlineCode",{parentName:"p"},"n")," and ",(0,n.kt)("inlineCode",{parentName:"p"},"a")," variables, respectively, using the Lua and Pluto ways:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-pluto",metastring:'title="Lua way"',title:'"Lua','way"':!0},"local n = t.name\nlocal a = t.age\n")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-pluto",metastring:'title="Pluto way"',title:'"Pluto','way"':!0},"local { n = name, a = age } = t\n")))}m.isMDXComponent=!0}}]);