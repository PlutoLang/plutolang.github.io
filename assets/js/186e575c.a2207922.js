"use strict";(self.webpackChunkpluto=self.webpackChunkpluto||[]).push([[5351],{212:(e,n,l)=>{l.r(n),l.d(n,{assets:()=>d,contentTitle:()=>i,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=l(4848),t=l(8453);const a={sidebar_position:2},i=void 0,s={id:"Runtime Environment/Table",title:"Table",description:"This page documents the changes & additions to the table library in Pluto, which is built on top of Lua 5.4's.",source:"@site/docs/Runtime Environment/Table.md",sourceDirName:"Runtime Environment",slug:"/Runtime Environment/Table",permalink:"/docs/Runtime Environment/Table",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"String",permalink:"/docs/Runtime Environment/String"},next:{title:"Assert",permalink:"/docs/Runtime Environment/Assert"}},d={},c=[{value:"<code>table.sort</code>",id:"tablesort",level:3},{value:"<code>table.sorted</code>",id:"tablesorted",level:3},{value:"<code>table.size</code>",id:"tablesize",level:3},{value:"Parameters",id:"parameters",level:4},{value:"<code>table.clear</code>",id:"tableclear",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>table.freeze</code>",id:"tablefreeze",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Returns",id:"returns",level:4},{value:"<code>table.isfrozen</code>",id:"tableisfrozen",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"<code>table.contains</code>",id:"tablecontains",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Returns",id:"returns-1",level:4},{value:"<code>table.find</code>",id:"tablefind",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Returns",id:"returns-2",level:4},{value:"<code>table.reverse</code>",id:"tablereverse",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Returns",id:"returns-3",level:4},{value:"<code>table.reversed</code>",id:"tablereversed",level:3},{value:"<code>table.reorder</code>",id:"tablereorder",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Returns",id:"returns-4",level:4},{value:"<code>table.reordered</code>",id:"tablereordered",level:3},{value:"<code>table.foreach</code>",id:"tableforeach",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"<code>table.filter</code>",id:"tablefilter",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Returns",id:"returns-5",level:4},{value:"<code>table.filtered</code>",id:"tablefiltered",level:3},{value:"<code>table.map</code>",id:"tablemap",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"Returns",id:"returns-6",level:4},{value:"<code>table.mapped</code>",id:"tablemapped",level:3},{value:"<code>table.reduce</code>",id:"tablereduce",level:3},{value:"Parameters",id:"parameters-11",level:4},{value:"Returns",id:"returns-7",level:4},{value:"<code>table.min</code>",id:"tablemin",level:3},{value:"Parameters",id:"parameters-12",level:4},{value:"<code>table.max</code>",id:"tablemax",level:3},{value:"Parameters",id:"parameters-13",level:4},{value:"<code>table.checkall</code>",id:"tablecheckall",level:3},{value:"Parameters",id:"parameters-14",level:4}];function o(e){const n={code:"code",h3:"h3",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["This page documents the changes & additions to the ",(0,r.jsx)(n.code,{children:"table"})," library in Pluto, which is built on top of Lua 5.4's."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"tablesort",children:(0,r.jsx)(n.code,{children:"table.sort"})}),"\n",(0,r.jsxs)(n.p,{children:["This function was modified to return the input table instead of ",(0,r.jsx)(n.code,{children:"nil"}),", such that:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-pluto",children:"local t = { 3, 2, 1 }\r\nt = t:sort(...)\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Will not result in ",(0,r.jsx)(n.code,{children:"t"})," becoming ",(0,r.jsx)(n.code,{children:"nil"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"tablesorted",children:(0,r.jsx)(n.code,{children:"table.sorted"})}),"\n",(0,r.jsxs)(n.p,{children:["Copying variant of ",(0,r.jsx)(n.code,{children:"table.sort"}),"; returns a new table instead of modifying the input table. Note that nested tables will not be copied."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"tablesize",children:(0,r.jsx)(n.code,{children:"table.size"})}),"\n",(0,r.jsx)(n.p,{children:"Returns the number of elements in the table, counting both the array part and hash part."}),"\n",(0,r.jsx)(n.h4,{id:"parameters",children:"Parameters"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"The table to check."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-pluto",children:'local t = { 1, 2, 3, ["foo"] = "bar" }\r\nprint(t:size()) --\x3e 4\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"tableclear",children:(0,r.jsx)(n.code,{children:"table.clear"})}),"\n",(0,r.jsx)(n.p,{children:"Remove all elements from the table."}),"\n",(0,r.jsx)(n.h4,{id:"parameters-1",children:"Parameters"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"The table to clear."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-pluto",children:'local t = { 1, 2, 3, ["foo"] = "bar" }\r\nprint(t:size()) --\x3e 4\r\nt:clear()\r\nprint(t:size()) --\x3e 0\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"tablefreeze",children:(0,r.jsx)(n.code,{children:"table.freeze"})}),"\n",(0,r.jsx)(n.p,{children:"Freezes a table to prevent modification."}),"\n",(0,r.jsx)(n.h4,{id:"parameters-2",children:"Parameters"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"The table to freeze"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:"The input table."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-pluto",children:'local t = table.freeze({...})\r\n-- `table.freeze(t)` on another line will work fine too.\r\nt.key = "value" -- Fails.\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"tableisfrozen",children:(0,r.jsx)(n.code,{children:"table.isfrozen"})}),"\n",(0,r.jsx)(n.p,{children:"Checks if this table is frozen."}),"\n",(0,r.jsx)(n.h4,{id:"parameters-3",children:"Parameters"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"The table to check."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-pluto",children:"local t = {}\r\ntable.freeze(t)\r\nassert(table.isfrozen(t) == true)\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"tablecontains",children:(0,r.jsx)(n.code,{children:"table.contains"})}),"\n",(0,r.jsx)(n.p,{children:"Checks if this table contains an element."}),"\n",(0,r.jsx)(n.h4,{id:"parameters-4",children:"Parameters"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"The table to check."}),"\n",(0,r.jsx)(n.li,{children:"The element to check for."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-1",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:["The index or key if found, otherwise ",(0,r.jsx)(n.code,{children:"nil"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-pluto",children:'local t = { 1, 2, 3, 4, 5, 6, key = "value" }\r\nassert(table.contains(t, 4) == 4)\r\nassert(table.contains(t, "value") == "key")\r\nassert(table.contains(t, "nothing") == nil)\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"tablefind",children:(0,r.jsx)(n.code,{children:"table.find"})}),"\n",(0,r.jsx)(n.p,{children:"Looks for an element in a table."}),"\n",(0,r.jsx)(n.h4,{id:"parameters-5",children:"Parameters"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"The table to check."}),"\n",(0,r.jsx)(n.li,{children:"The callback function responsible for checking each element."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-2",children:"Returns"}),"\n",(0,r.jsxs)(n.p,{children:["The element if found, otherwise ",(0,r.jsx)(n.code,{children:"nil"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-pluto",children:'local items = {\r\n    { id = 1, name = "Apple" },\r\n    { id = 2, name = "Banana" },\r\n}\r\n\r\nprint(items:find(|item| -> item.id == 1).name) --\x3e Apple\n'})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"tablereverse",children:(0,r.jsx)(n.code,{children:"table.reverse"})}),"\n",(0,r.jsx)(n.p,{children:"Reverses the array elements of a table."}),"\n",(0,r.jsx)(n.h4,{id:"parameters-6",children:"Parameters"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"The table to reverse."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-3",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:"The input table."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-pluto",children:'local t = { 1, 2, hello = "world", 3, 4, 5, key = "value" }\r\n\r\nprint(dumpvar(t))\r\nlocal same = t:reverse()\r\nassert(same == t)\r\nprint(dumpvar(t))\r\n\r\n--[[\r\nBefore:\r\n{\r\n    [1] = 1,\r\n    [2] = 2,\r\n    [3] = 3,\r\n    [4] = 4,\r\n    [5] = 5,\r\n    ["key"] = string(5) "value",\r\n    ["hello"] = string(5) "world",\r\n}\r\n\r\nAfter:\r\n{\r\n    [1] = 5,\r\n    [2] = 4,\r\n    [3] = 3,\r\n    [4] = 2,\r\n    [5] = 1,\r\n    ["key"] = string(5) "value",\r\n    ["hello"] = string(5) "world",\r\n}\r\n--]]\n'})}),"\n",(0,r.jsx)(n.h3,{id:"tablereversed",children:(0,r.jsx)(n.code,{children:"table.reversed"})}),"\n",(0,r.jsxs)(n.p,{children:["Copying variant of ",(0,r.jsx)(n.code,{children:"table.reverse"}),"; returns a new table instead of modifying the input table. Note that nested tables will not be copied."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"tablereorder",children:(0,r.jsx)(n.code,{children:"table.reorder"})}),"\n",(0,r.jsx)(n.p,{children:"Reorders the array portion of a table so it becomes a continuous array with no holes."}),"\n",(0,r.jsx)(n.h4,{id:"parameters-7",children:"Parameters"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"The table."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-4",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:"The input table."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-pluto",children:'local assert = require("assert")\r\nlocal t1 = { 1, nil, 2, nil, nil, 3, nil, 4 }\r\n\r\nassert.equal(t1:reorder(), { 1, 2, 3, 4 })\n'})}),"\n",(0,r.jsx)(n.h3,{id:"tablereordered",children:(0,r.jsx)(n.code,{children:"table.reordered"})}),"\n",(0,r.jsxs)(n.p,{children:["Copying variant of ",(0,r.jsx)(n.code,{children:"table.reorder"}),"; returns a new table instead of modifying the input table. Note that nested tables will not be copied."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"tableforeach",children:(0,r.jsx)(n.code,{children:"table.foreach"})}),"\n",(0,r.jsx)(n.p,{children:"Note that this function is not the same as the Lua function that was deprecated/removed in 5.1."}),"\n",(0,r.jsx)(n.h4,{id:"parameters-8",children:"Parameters"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"The table."}),"\n",(0,r.jsx)(n.li,{children:"The callback to be called for every element."}),"\n",(0,r.jsxs)(n.li,{children:["An optional bool if the callback function also takes a key (",(0,r.jsx)(n.code,{children:"|k, v|"}),") as opposed to only a value (",(0,r.jsx)(n.code,{children:"|v|"}),")."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-pluto",children:"local t = { 1, 2, 3 }\r\nt:foreach(print)\r\n--\x3e 1\r\n--\x3e 2\r\n--\x3e 3\n"})}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"tablefilter",children:(0,r.jsx)(n.code,{children:"table.filter"})}),"\n",(0,r.jsxs)(n.p,{children:["Filters away keys (both array and non-array) that fail to meet the condition established by ",(0,r.jsx)(n.code,{children:"callback"}),". Elimination is done by setting the value to ",(0,r.jsx)(n.code,{children:"nil"}),", consider using ",(0,r.jsx)(n.code,{children:"table.reorder"})," if you want a continuous array after filtering."]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-9",children:"Parameters"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"The table."}),"\n",(0,r.jsxs)(n.li,{children:["The callback responsible for deciding which keys to keep or remove. This should return ",(0,r.jsx)(n.code,{children:"false"})," or ",(0,r.jsx)(n.code,{children:"nil"})," if you want the key to be eliminated."]}),"\n",(0,r.jsxs)(n.li,{children:["An optional bool if the callback function also takes a key (",(0,r.jsx)(n.code,{children:"|k, v|"}),") as opposed to only a value (",(0,r.jsx)(n.code,{children:"|v|"}),")."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-5",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:"The input table."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-pluto",children:'data = { 1, 2, 3, 4, 5 }\r\ndata:filter(|v| -> v % 2 ~= 0):reorder():concat(" ") |> print -- "1 3 5"\r\n\r\ndata = { 2, 2, 3, 4, 4 }\r\ndata:filter(|k, v| -> k == v, true):reorder():concat(" ") |> print -- "2 3 4"\n'})}),"\n",(0,r.jsx)(n.h3,{id:"tablefiltered",children:(0,r.jsx)(n.code,{children:"table.filtered"})}),"\n",(0,r.jsxs)(n.p,{children:["Copying variant of ",(0,r.jsx)(n.code,{children:"table.filter"}),"; returns a new table instead of modifying the input table. Note that nested tables will not be copied."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"tablemap",children:(0,r.jsx)(n.code,{children:"table.map"})}),"\n",(0,r.jsxs)(n.p,{children:["Remaps every key to a new value, provided by the ",(0,r.jsx)(n.code,{children:"callback"})," function."]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-10",children:"Parameters"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"The table."}),"\n",(0,r.jsx)(n.li,{children:"The callback responsible for producing the updated values."}),"\n",(0,r.jsxs)(n.li,{children:["An optional bool if the callback function also takes a key (",(0,r.jsx)(n.code,{children:"|k, v|"}),") as opposed to only a value (",(0,r.jsx)(n.code,{children:"|v|"}),")."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-6",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:"The input table."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-pluto",children:'data = "41 20 68"\r\ndata:split(" "):map(tonumber):map(|v| -> v + 1):concat(" ") |> print -- "42 21 69"\r\n\r\ndata = "10 15 10"\r\ndata:split(" "):map(tonumber):map(|k, v| -> k * v, true):concat(" ") |> print -- "10 30 30"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["In this example, we first use the ",(0,r.jsx)(n.code,{children:"tonumber"})," function to turn the strings into numbers, then add 1 to them. (Although the first step is not needed in Lua/Pluto since the ",(0,r.jsx)(n.code,{children:"+"})," operator would take care of it, it is used here for demonstration purposes.)"]}),"\n",(0,r.jsx)(n.h3,{id:"tablemapped",children:(0,r.jsx)(n.code,{children:"table.mapped"})}),"\n",(0,r.jsxs)(n.p,{children:["Copying variant of ",(0,r.jsx)(n.code,{children:"table.map"}),"; returns a new table instead of modifying the input table. Note that nested tables will not be copied."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"tablereduce",children:(0,r.jsx)(n.code,{children:"table.reduce"})}),"\n",(0,r.jsxs)(n.p,{children:["For every value stored in the table, computes ",(0,r.jsx)(n.code,{children:"accumulator = f(value, accumulator)"}),", returning the accumulator at the end."]}),"\n",(0,r.jsx)(n.h4,{id:"parameters-11",children:"Parameters"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"The table."}),"\n",(0,r.jsx)(n.li,{children:"The callback responsible for producing the updated accumulator."}),"\n",(0,r.jsxs)(n.li,{children:["The initial value of accumulator. If absent, the accumulator is initialized with ",(0,r.jsx)(n.code,{children:"0"}),"."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"returns-7",children:"Returns"}),"\n",(0,r.jsx)(n.p,{children:"The accumulator."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-pluto",children:"local t = { 1, 2, 3 }\r\nt:reduce(|value, accumulator| -> value + accumulator) |> print --\x3e 6\n"})}),"\n",(0,r.jsx)(n.h3,{id:"tablemin",children:(0,r.jsx)(n.code,{children:"table.min"})}),"\n",(0,r.jsx)(n.p,{children:"Returns the smallest value stored in the table."}),"\n",(0,r.jsx)(n.h4,{id:"parameters-12",children:"Parameters"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"The table."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-pluto",children:"local t = { 1, 2, 3 }\r\nprint(t:min()) --\x3e 1\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This is identical to ",(0,r.jsx)(n.code,{children:":reduce(math.min, math.maxinteger)"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"tablemax",children:(0,r.jsx)(n.code,{children:"table.max"})}),"\n",(0,r.jsx)(n.p,{children:"Returns the largest value stored in the table."}),"\n",(0,r.jsx)(n.h4,{id:"parameters-13",children:"Parameters"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"The table."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-pluto",children:"local t = { 1, 2, 3 }\r\nprint(t:max()) --\x3e 3\n"})}),"\n",(0,r.jsxs)(n.p,{children:["This is identical to ",(0,r.jsx)(n.code,{children:":reduce(math.max, math.mininteger)"}),"."]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h3,{id:"tablecheckall",children:(0,r.jsx)(n.code,{children:"table.checkall"})}),"\n",(0,r.jsx)(n.p,{children:"Runs the given function against all elements, returning true if all of them match."}),"\n",(0,r.jsx)(n.h4,{id:"parameters-14",children:"Parameters"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"The table."}),"\n",(0,r.jsx)(n.li,{children:"The callback responsible for checking each element."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-pluto",children:'print({ 2, 4, 6 }:checkall(|x| -> x % 2 == 0) ? "All are even" : "Some are odd") --\x3e All are even\r\nprint({ 1, 2, 3 }:checkall(|x| -> x % 2 == 0) ? "All are even" : "Some are odd") --\x3e Some are odd\n'})})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},8453:(e,n,l)=>{l.d(n,{R:()=>i,x:()=>s});var r=l(6540);const t={},a=r.createContext(t);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);