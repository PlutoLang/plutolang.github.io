"use strict";(self.webpackChunkpluto=self.webpackChunkpluto||[]).push([[5999],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>y});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function d(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=r.createContext({}),c=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=c(e.components);return r.createElement(i.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,s=d(e,["components","mdxType","originalType","parentName"]),u=c(t),m=o,y=u["".concat(i,".").concat(m)]||u[m]||p[m]||a;return t?r.createElement(y,l(l({ref:n},s),{},{components:t})):r.createElement(y,l({ref:n},s))}));function y(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,l=new Array(a);l[0]=m;var d={};for(var i in n)hasOwnProperty.call(n,i)&&(d[i]=n[i]);d.originalType=e,d[u]="string"==typeof e?e:o,l[1]=d;for(var c=2;c<a;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3408:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>d,toc:()=>c});var r=t(7462),o=(t(7294),t(3905));const a={},l=void 0,d={unversionedId:"Runtime Environment/JSON Functions",id:"Runtime Environment/JSON Functions",title:"JSON Functions",description:"Only available if you compiled Pluto with Soup. Must be included via require.",source:"@site/docs/Runtime Environment/JSON Functions.md",sourceDirName:"Runtime Environment",slug:"/Runtime Environment/JSON Functions",permalink:"/docs/Runtime Environment/JSON Functions",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Base64 Functions",permalink:"/docs/Runtime Environment/Base64 Functions"},next:{title:"Compatibility",permalink:"/docs/Compatibility"}},i={},c=[{value:"json",id:"json",level:2},{value:"json.encode(data, pretty)",id:"jsonencodedata-pretty",level:3},{value:"Parameters:",id:"parameters",level:4},{value:"json.decode(data)",id:"jsondecodedata",level:3},{value:"Parameters:",id:"parameters-1",level:4}],s={toc:c},u="wrapper";function p(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,r.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("admonition",{type:"info"},(0,o.kt)("p",{parentName:"admonition"},"Only available if you compiled Pluto with Soup. Must be included via ",(0,o.kt)("inlineCode",{parentName:"p"},"require"),".")),(0,o.kt)("h2",{id:"json"},"json"),(0,o.kt)("h3",{id:"jsonencodedata-pretty"},"json.encode(data, pretty)"),(0,o.kt)("p",null,"Returns a string of JSON."),(0,o.kt)("h4",{id:"parameters"},"Parameters:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"data")," \u2014 A boolean, number, string, or table to encode as JSON."),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"pretty")," \u2014 Whether to return a human-readable string of JSON.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-pluto"},'local json = require("json")\nlocal data, encoded\n\ndata = "Hello, World!"\nencoded = json.encode(data, true)\n--[[\n    "Hello, World!"\n--]]\n\ndata = \n{\n    key = "Hello, World!"\n    nested = {\n        nested_key = 1337\n    }\n}\nencoded = json.encode(data, true)\n--[[\n    {\n        "nested": {\n            "nested_key": 1337\n        },\n        "key": "Hello, World!"\n    }\n--]]\n')),(0,o.kt)("h3",{id:"jsondecodedata"},"json.decode(data)"),(0,o.kt)("p",null,"Returns multiple potential types. If you pass a serialized boolean, number, or string, then it will return the same type. If you pass a complex JSON object, it will return a table."),(0,o.kt)("h4",{id:"parameters-1"},"Parameters:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("inlineCode",{parentName:"li"},"data")," \u2014 The JSON data to decode.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-pluto"},'local json = require("json")\nlocal data, encoded, decoded\n\n-- Basic Type\n\ndata = "Hello, World!"\nencoded = json.encode(data, true)\ndecoded = json.decode(encoded)\n\nassert(decoded == data)\nassert(type(decoded) == "string")\n\n-- Complex Type\n\ndata = {\n    key = "Hello",\n    nested = {\n        nested_key = 1337\n    }\n}\nencoded = json.encode(data, true)\ndecoded = json.decode(encoded)\n\nassert(decoded.key == "Hello")\nassert(type(decoded) == "table")\nassert(decoded.nested.nested_key == 1337)\n')))}p.isMDXComponent=!0}}]);