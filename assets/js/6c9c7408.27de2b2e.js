"use strict";(self.webpackChunkpluto=self.webpackChunkpluto||[]).push([[8618],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=p(n),c=r,h=m["".concat(s,".").concat(c)]||m[c]||d[c]||o;return n?a.createElement(h,l(l({ref:t},u),{},{components:n})):a.createElement(h,l({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[m]="string"==typeof e?e:r,l[1]=i;for(var p=2;p<o;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7282:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:3},l=void 0,i={unversionedId:"New Operators",id:"New Operators",title:"New Operators",description:"Operator Aliases",source:"@site/docs/New Operators.md",sourceDirName:".",slug:"/New Operators",permalink:"/docs/New Operators",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Beginner's Guide",permalink:"/docs/Beginners Guide"},next:{title:"New Features",permalink:"/docs/category/new-features"}},s={},p=[{value:"Operator Aliases",id:"operator-aliases",level:2},{value:"Compound Operators",id:"compound-operators",level:2},{value:"Coalescing Operator",id:"coalescing-operator",level:2},{value:"Walrus Operator",id:"walrus-operator",level:2},{value:"Spaceship Operator",id:"spaceship-operator",level:2}],u={toc:p},m="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"operator-aliases"},"Operator Aliases"),(0,r.kt)("p",null,"These operators function the same, but they're more consistent with what's been standardized through programming today."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"!")," is an alias for ",(0,r.kt)("inlineCode",{parentName:"li"},"not"),", the boolean inversion operator."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"**")," is an alias for ",(0,r.kt)("inlineCode",{parentName:"li"},"^"),", the exponent operator."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"!=")," is an alias for ",(0,r.kt)("inlineCode",{parentName:"li"},"~="),", the inequality operator.")),(0,r.kt)("h2",{id:"compound-operators"},"Compound Operators"),(0,r.kt)("p",null,"A plethora of compound operators are available in Pluto:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Modulo: ",(0,r.kt)("inlineCode",{parentName:"li"},"%=")),(0,r.kt)("li",{parentName:"ul"},"Addition: ",(0,r.kt)("inlineCode",{parentName:"li"},"+=")),(0,r.kt)("li",{parentName:"ul"},"Exponent: ",(0,r.kt)("inlineCode",{parentName:"li"},"^=")),(0,r.kt)("li",{parentName:"ul"},"Bitwise OR: ",(0,r.kt)("inlineCode",{parentName:"li"},"|=")),(0,r.kt)("li",{parentName:"ul"},"Subtraction: ",(0,r.kt)("inlineCode",{parentName:"li"},"-=")),(0,r.kt)("li",{parentName:"ul"},"Bitshift left: ",(0,r.kt)("inlineCode",{parentName:"li"},"<<=")),(0,r.kt)("li",{parentName:"ul"},"Bitwise AND: ",(0,r.kt)("inlineCode",{parentName:"li"},"&=")),(0,r.kt)("li",{parentName:"ul"},"Float division: ",(0,r.kt)("inlineCode",{parentName:"li"},"/=")),(0,r.kt)("li",{parentName:"ul"},"Bitshift right: ",(0,r.kt)("inlineCode",{parentName:"li"},">>=")),(0,r.kt)("li",{parentName:"ul"},"Multiplication: ",(0,r.kt)("inlineCode",{parentName:"li"},"*=")),(0,r.kt)("li",{parentName:"ul"},"Concatenation: ",(0,r.kt)("inlineCode",{parentName:"li"},"..=")),(0,r.kt)("li",{parentName:"ul"},"Integer division: ",(0,r.kt)("inlineCode",{parentName:"li"},"//=")),(0,r.kt)("li",{parentName:"ul"},"Nil-Coalescing: ",(0,r.kt)("inlineCode",{parentName:"li"},"??="))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers=true",showLineNumbers:"true"},"local a = 1\na = a + 1 \na += 1\n")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Compound operators will call the same metamethods as the normal arithmetic operation would.")),(0,r.kt)("h2",{id:"coalescing-operator"},"Coalescing Operator"),(0,r.kt)("p",null,"The nil-coalescing operator is helpful for evaluating values against ",(0,r.kt)("inlineCode",{parentName:"p"},"nil"),". "),(0,r.kt)("p",null,"If the left-hand operand is ",(0,r.kt)("inlineCode",{parentName:"p"},"nil"),", it returns the right-hand operand. Otherwise, it returns the left-hand operand."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers=true",showLineNumbers:"true"},'local function say(message)\n    print(message ?? "The message was nil.")\nend\n\nsay() --\x3e The message was nil.\nsay(nil) --\x3e The message was nil.\nsay("Hello, world!") --\x3e Hello, world!\n')),(0,r.kt)("p",null,"It's a cleaner version of this code:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers=true",showLineNumbers:"true"},'local function say(message)\n    if message == nil then\n        message = "The message was nil."\n    end\n\n    print(message)\nend\n\nsay() --\x3e The message was nil.\nsay(nil) --\x3e The message was nil.\nsay("Hello, world!") --\x3e Hello, world!\n')),(0,r.kt)("p",null,"You can even use compound assignment:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local function say(message)\n    message ??= "The message was nil."\n\n    print(message)\nend\n\nsay() --\x3e The message was nil.\nsay(nil) --\x3e The message was nil.\nsay("Hello, world!") --\x3e Hello, world!\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"This operator does not implement any metamethods.")),(0,r.kt)("h2",{id:"walrus-operator"},"Walrus Operator"),(0,r.kt)("p",null,"The Walrus operator allows you to perform assignments inside of conditional expresssions."),(0,r.kt)("p",null,"The second operand to your assignment is the value of the expression."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},"if a := get_value() then\n    -- 'a' was assigned a truthy value.\nelse\n    -- 'a' was assigned a falsy value.\nend\n")),(0,r.kt)("p",null,"You can imagine it like this, but note they're not always the same:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},"local a = get_value()\nif a then\n    -- 'a' was assigned a truthy value.\nelse\n    -- 'a' was assigned a falsy value.\nend\n")),(0,r.kt)("p",null,"What makes the Walrus operator different is that it'll be evaluated as many times as the condition:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},"local function get()\n    return math.random(0, 1)\nend\n\nwhile a := get() do\n    --| In the next iteration:\n    --|   - `a` will be assigned to `get()`.\n    --|   - Then the value will be evaluated for the condition.\n    --|\n    --| This happens because the Walrus operator itself is the condition.\n    --| It's not a short-hand for generating an assignment.\n    --|\n    --| Be aware of this if you intend on using the Walrus operator with loops.\nend\n")),(0,r.kt)("h2",{id:"spaceship-operator"},"Spaceship Operator"),(0,r.kt)("p",null,"The spaceship operator, also known as the three-way comparison operator, allows you to quickly compare 2 values for equality and order."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-pluto"},"local eq = 1 <=> 1\nlocal lt = 3 <=> 42\nlocal gt = 9 <=> 5\nprint(eq, lt, gt) --\x3e 0, -1, 1\n")),(0,r.kt)("p",null,"It works with any type that supports ",(0,r.kt)("inlineCode",{parentName:"p"},"__eq")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"__lt"),", making it well-suited for usage in generic algorithms like sorting. The return values are designed such that you can compare them to ",(0,r.kt)("inlineCode",{parentName:"p"},"0"),", e.g. with the values from above:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-pluto"},"print(eq <= 0) --\x3e true\nprint(lt <= 0) --\x3e true\nprint(gt <= 0) --\x3e false\n")))}d.isMDXComponent=!0}}]);