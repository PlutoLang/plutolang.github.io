"use strict";(self.webpackChunkpluto=self.webpackChunkpluto||[]).push([[1137],{2277:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var s=t(4848),a=t(8453);const i={sidebar_position:3},o=void 0,r={id:"New Features/Object-Oriented Programming",title:"Object-Oriented Programming",description:"Pluto makes a plethora of improvements when it comes to object-oriented programming.",source:"@site/docs/New Features/Object-Oriented Programming.md",sourceDirName:"New Features",slug:"/New Features/Object-Oriented Programming",permalink:"/docs/New Features/Object-Oriented Programming",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Try-Catch Statement",permalink:"/docs/New Features/Try-Catch Statement"},next:{title:"QoL Improvements",permalink:"/docs/category/qol-improvements"}},l={},c=[{value:"Method Creation",id:"method-creation",level:2},{value:"Static Functions",id:"static-functions",level:2},{value:"Try It Yourself",id:"try-it-yourself",level:4},{value:"New Operator",id:"new-operator",level:2},{value:"Try It Yourself",id:"try-it-yourself-1",level:4},{value:"Class Statement",id:"class-statement",level:2},{value:"Class Expression",id:"class-expression",level:3},{value:"Extends",id:"extends",level:3},{value:"Try It Yourself",id:"try-it-yourself-2",level:4},{value:"Parent Expression",id:"parent-expression",level:2},{value:"Try It Yourself",id:"try-it-yourself-3",level:4},{value:"Private Fields",id:"private-fields",level:2},{value:"Try It Yourself",id:"try-it-yourself-4",level:4},{value:"Constructor Promotion",id:"constructor-promotion",level:2},{value:"Try It Yourself",id:"try-it-yourself-5",level:4},{value:"Instanceof Operator",id:"instanceof-operator",level:2},{value:"Try It Yourself",id:"try-it-yourself-6",level:4},{value:"Using Compatibility Mode?",id:"using-compatibility-mode",level:2}];function d(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Pluto makes a plethora of improvements when it comes to object-oriented programming."}),"\n",(0,s.jsx)(n.h2,{id:"method-creation",children:"Method Creation"}),"\n",(0,s.jsx)(n.p,{children:"A series of methods was otherwise ugly to implement into a Lua table."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-pluto",metastring:'showLineNumbers title="Old Code"',children:"local t = {}\n\nfunction t:f1(...) end\nfunction t:f2(...) end\nfunction t:f3(...) end\n"})}),"\n",(0,s.jsx)(n.p,{children:"Now, you can inline these statements inside of your table."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-pluto",metastring:'showLineNumbers title="New Code"',children:"local t = {\n    function f1() end,\n    function f2() end,\n    function f3() end\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"This automatically marks the functions as methods."}),"\n",(0,s.jsx)(n.admonition,{type:"caution",children:(0,s.jsxs)(n.p,{children:["Keep in mind, this produces ",(0,s.jsx)(n.em,{children:"methods"}),", meaning you'll need to use the colon invocation syntax to avoid positional ambiguities in your parameters."]})}),"\n",(0,s.jsx)(n.h2,{id:"static-functions",children:"Static Functions"}),"\n",(0,s.jsx)(n.p,{children:"For consistency with the above syntax, you can use 'static function' to declare non-method functions in your tables:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-pluto",metastring:"showLineNumbers",children:'local t = {\n    static function say(msg)\n        print(msg)\n    end\n}\nt.say("Hello") -- "Hello"\n'})}),"\n",(0,s.jsx)(n.h4,{id:"try-it-yourself",children:(0,s.jsx)(n.a,{href:"https://pluto-lang.org/web/#code=local%20t%20%3D%20%7B%0D%0A%20%20%20%20static%20function%20say(msg)%0D%0A%20%20%20%20%20%20%20%20print(msg)%0D%0A%20%20%20%20end%0D%0A%7D%0D%0At.say(%22Hello%22)%20--%20%22Hello%22",children:"Try It Yourself"})}),"\n",(0,s.jsx)(n.h2,{id:"new-operator",children:"New Operator"}),"\n",(0,s.jsxs)(n.p,{children:["Pluto adds an easy way to make instances with the ",(0,s.jsx)(n.code,{children:"new"})," operator. This operator will also call the ",(0,s.jsx)(n.code,{children:"__construct"})," method if it exists."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-pluto",metastring:"showLineNumbers",children:'local Human = {\n    function __construct(name)\n        self.name = name\n    end\n}\nlocal john = new Human("John")\nprint(john.name) -- John\n'})}),"\n",(0,s.jsx)(n.h4,{id:"try-it-yourself-1",children:(0,s.jsx)(n.a,{href:"https://pluto-lang.org/web/#code=local%20Human%20%3D%20%7B%0D%0A%20%20%20%20function%20__construct(name)%0D%0A%20%20%20%20%20%20%20%20self.name%20%3D%20name%0D%0A%20%20%20%20end%0D%0A%7D%0D%0Alocal%20john%20%3D%20new%20Human(%22John%22)%0D%0Aprint(john.name)%20--%20John",children:"Try It Yourself"})}),"\n",(0,s.jsxs)(n.p,{children:["Note that for compatibility with Lua and C API classes, the ",(0,s.jsx)(n.code,{children:"new"})," operator checks for the existence of a static 'new' function. If it exists, ",(0,s.jsx)(n.code,{children:"new X(...)"})," will be identical to ",(0,s.jsx)(n.code,{children:"X.new(...)"}),"."]}),"\n",(0,s.jsx)(n.h2,{id:"class-statement",children:"Class Statement"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"class"})," statement is similar to a table constructor, but it does not require commas or semicolons:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-pluto",metastring:"showLineNumbers",children:'class Human\n    function __construct(name)\n        self.name = name\n    end\n\n    function __gc()\n        print(self.name .. " died of irrelevance")\n    end\nend\nlocal john = new Human("John")\n'})}),"\n",(0,s.jsxs)(n.p,{children:["The class statement also supports modifiers: ",(0,s.jsx)(n.code,{children:"local class NAME"}),", ",(0,s.jsx)(n.code,{children:"export class NAME"})]}),"\n",(0,s.jsx)(n.h3,{id:"class-expression",children:"Class Expression"}),"\n",(0,s.jsxs)(n.p,{children:["There is also a ",(0,s.jsx)(n.code,{children:"class"})," expression, which can be used e.g. when assigning to a variable:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-pluto",metastring:"showLineNumbers",children:"local Human = class\n    function __construct(name)\n        self.name = name\n    end\nend\n"})}),"\n",(0,s.jsx)(n.h3,{id:"extends",children:"Extends"}),"\n",(0,s.jsxs)(n.p,{children:["The class statement also supports ",(0,s.jsx)(n.code,{children:"extends"})," to specify a parent:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-pluto",metastring:"showLineNumbers",children:"class Entity\n    age = 1\nend\n\nclass Human extends Entity\nend\n\nlocal human = new Human()\nprint(human.age) -- 1\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This also adds a ",(0,s.jsx)(n.code,{children:"__parent"})," field to Human."]}),"\n",(0,s.jsx)(n.h4,{id:"try-it-yourself-2",children:(0,s.jsx)(n.a,{href:"https://pluto-lang.org/web/#code=class%20Entity%0D%0A%20%20%20%20age%20%3D%201%0D%0Aend%0D%0A%0D%0Aclass%20Human%20extends%20Entity%0D%0Aend%0D%0A%0D%0Alocal%20human%20%3D%20new%20Human()%0D%0Aprint(human.age)%20--%201",children:"Try It Yourself"})}),"\n",(0,s.jsx)(n.h2,{id:"parent-expression",children:"Parent Expression"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"parent"})," expression is a shorthand for ",(0,s.jsx)(n.code,{children:"self.__parent"}),", which also supports method call syntax, in which case it's a shorthand for ",(0,s.jsx)(n.code,{children:"self.__parent.METHOD(self, ...)"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-pluto",metastring:"showLineNumbers",children:'class Entity\n    function __construct(name)\n        self.name = name\n    end\nend\n\nclass Human extends Entity\n    -- If we don\'t define __construct, the parent-constructor would be called automatically.\n    -- However, if we overwrite it, we can use parent:__construct to call it manually.\n    function __construct(name)\n        parent:__construct(name)\n    end\nend\n\nlocal human = new Human("John")\nprint(human.name) -- "John"\n'})}),"\n",(0,s.jsxs)(n.p,{children:['Note that if you have a local variable (or function parameter) called "parent", the ',(0,s.jsx)(n.code,{children:"parent"})," expression will defer to it."]}),"\n",(0,s.jsx)(n.h4,{id:"try-it-yourself-3",children:(0,s.jsx)(n.a,{href:"https://pluto-lang.org/web/#code=class%20Entity%0D%0A%20%20%20%20function%20__construct(name)%0D%0A%20%20%20%20%20%20%20%20self.name%20%3D%20name%0D%0A%20%20%20%20end%0D%0Aend%0D%0A%0D%0Aclass%20Human%20extends%20Entity%0D%0A%20%20%20%20--%20If%20we%20don't%20define%20__construct%2C%20the%20parent-constructor%20would%20be%20called%20automatically.%0D%0A%20%20%20%20--%20However%2C%20if%20we%20overwrite%20it%2C%20we%20can%20use%20parent%3A__construct%20to%20call%20it%20manually.%0D%0A%20%20%20%20function%20__construct(name)%0D%0A%20%20%20%20%20%20%20%20parent%3A__construct(name)%0D%0A%20%20%20%20end%0D%0Aend%0D%0A%0D%0Alocal%20human%20%3D%20new%20Human(%22John%22)%0D%0Aprint(human.name)%20--%20%22John%22",children:"Try It Yourself"})}),"\n",(0,s.jsx)(n.h2,{id:"private-fields",children:"Private Fields"}),"\n",(0,s.jsx)(n.p,{children:"Pluto allows you to specify if a field is 'public' or 'private'. Private fields can only be accessed by the class that defined them."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-pluto",children:'class Human\n    public name\n    private age\n\n    function __construct(name, age)\n        self.name = name\n        self.age = age\n    end\n\n    function getAge()\n        return self.age\n    end\nend\n\nlocal human = new Human("John", 42)\nprint(human.name) -- "John"\nprint(human:getAge()) -- 42\nprint(human.age) -- nil\n'})}),"\n",(0,s.jsx)(n.h4,{id:"try-it-yourself-4",children:(0,s.jsx)(n.a,{href:"https://pluto-lang.org/web/#code=class%20Human%0D%0A%20%20%20%20public%20name%0D%0A%20%20%20%20private%20age%0D%0A%0D%0A%20%20%20%20function%20__construct(name%2C%20age)%0D%0A%20%20%20%20%20%20%20%20self.name%20%3D%20name%0D%0A%20%20%20%20%20%20%20%20self.age%20%3D%20age%0D%0A%20%20%20%20end%0D%0A%0D%0A%20%20%20%20function%20getAge()%0D%0A%20%20%20%20%20%20%20%20return%20self.age%0D%0A%20%20%20%20end%0D%0Aend%0D%0A%0D%0Alocal%20human%20%3D%20new%20Human(%22John%22%2C%2042)%0D%0Aprint(human.name)%20--%20%22John%22%0D%0Aprint(human%3AgetAge())%20--%2042%0D%0Aprint(human.age)%20--%20nil",children:"Try It Yourself"})}),"\n",(0,s.jsx)(n.h2,{id:"constructor-promotion",children:"Constructor Promotion"}),"\n",(0,s.jsxs)(n.p,{children:["Because a common task of ",(0,s.jsx)(n.code,{children:"__construct"})," methods is to assign the value of arguments to table fields, Pluto provides a simple syntax to reduce this boilerplate:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-pluto",children:'class Human\n    function __construct(public name, private age)\n    end\n\n    function getAge()\n        return self.age\n    end\nend\n\nlocal human = new Human("John", 42)\nprint(human.name) -- "John"\nprint(human:getAge()) -- 42\nprint(human.age) -- nil\n'})}),"\n",(0,s.jsx)(n.h4,{id:"try-it-yourself-5",children:(0,s.jsx)(n.a,{href:"https://pluto-lang.org/web/#code=class%20Human%0D%0A%20%20%20%20function%20__construct(public%20name%2C%20private%20age)%0D%0A%20%20%20%20end%0D%0A%0D%0A%20%20%20%20function%20getAge()%0D%0A%20%20%20%20%20%20%20%20return%20self.age%0D%0A%20%20%20%20end%0D%0Aend%0D%0A%0D%0Alocal%20human%20%3D%20new%20Human(%22John%22%2C%2042)%0D%0Aprint(human.name)%20--%20%22John%22%0D%0Aprint(human%3AgetAge())%20--%2042%0D%0Aprint(human.age)%20--%20nil",children:"Try It Yourself"})}),"\n",(0,s.jsx)(n.h2,{id:"instanceof-operator",children:"Instanceof Operator"}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"instanceof"})," operator can be used to check if a table is a class instance, including inherited classes:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-pluto",metastring:"showLineNumbers",children:"class Entity end\nclass Human extends Entity end\nlocal e = new Entity()\nlocal h = new Human()\nprint(e instanceof Entity) -- true\nprint(e instanceof Human) -- false\nprint(h instanceof Entity) -- true (by inheritance)\nprint(h instanceof Human) -- true\n"})}),"\n",(0,s.jsx)(n.p,{children:"It can also be used as a function:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-pluto",metastring:"showLineNumbers",children:"class Entity end\nlocal e = new Entity()\nprint(instanceof(e, Entity)) -- true\n"})}),"\n",(0,s.jsx)(n.h4,{id:"try-it-yourself-6",children:(0,s.jsx)(n.a,{href:"https://pluto-lang.org/web/#code=class%20Entity%20end%0D%0Aclass%20Human%20extends%20Entity%20end%0D%0A%0D%0Alocal%20e%20%3D%20new%20Entity()%0D%0Alocal%20h%20%3D%20new%20Human()%0D%0A%0D%0Aprint(e%20instanceof%20Entity)%20--%20true%0D%0Aprint(e%20instanceof%20Human)%20--%20false%0D%0Aprint(h%20instanceof%20Entity)%20--%20true%20(by%20inheritance)%0D%0Aprint(h%20instanceof%20Human)%20--%20true%0D%0A%0D%0Aprint(instanceof(e%2C%20Entity))%20--%20true%0D%0A",children:"Try It Yourself"})}),"\n",(0,s.jsx)(n.admonition,{type:"info",children:(0,s.jsx)(n.p,{children:"Note that, while the instanceof operator generates Lua-compatible bytecode, the instanceof function is a part of Pluto's standard library, and hence unavailable under Lua."})}),"\n",(0,s.jsx)(n.h2,{id:"using-compatibility-mode",children:"Using Compatibility Mode?"}),"\n",(0,s.jsx)(n.p,{children:"Some of the syntax discussed here may be different due to compatiblity mode:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"new"})," -> ",(0,s.jsx)(n.code,{children:"pluto_new"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"class"})," -> ",(0,s.jsx)(n.code,{children:"pluto_class"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"parent"})," -> ",(0,s.jsx)(n.code,{children:"pluto_parent"})]}),"\n"]}),"\n",(0,s.jsxs)(n.p,{children:["Alternatively, ",(0,s.jsx)(n.code,{children:"pluto_use new, class, parent"})," will enable these keywords independently of environment settings."]})]})}function u(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>r});var s=t(6540);const a={},i=s.createContext(a);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);