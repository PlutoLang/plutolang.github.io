"use strict";(self.webpackChunkpluto=self.webpackChunkpluto||[]).push([[7630],{1747:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>t});const s=JSON.parse('{"id":"Changelog","title":"Changelog","description":"This page contains the changelogs from all releases of Pluto.","source":"@site/docs/Changelog.md","sourceDirName":".","slug":"/Changelog","permalink":"/docs/Changelog","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":13,"frontMatter":{"sidebar_position":13},"sidebar":"tutorialSidebar","previous":{"title":"For Integrators","permalink":"/docs/For Integrators"}}');var d=i(4848),l=i(8453);const r={sidebar_position:13},o=void 0,c={},t=[{value:"0.11.3",id:"0113",level:2},{value:"0.11.2",id:"0112",level:2},{value:"0.11.1",id:"0111",level:2},{value:"0.11.0",id:"0110",level:2},{value:"0.10.5",id:"0105",level:2},{value:"0.10.4",id:"0104",level:2},{value:"0.10.3",id:"0103",level:2},{value:"0.10.2",id:"0102",level:2},{value:"0.10.1",id:"0101",level:2},{value:"0.10.0",id:"0100",level:2},{value:"0.9.5",id:"095",level:2},{value:"0.9.4",id:"094",level:2},{value:"0.9.3",id:"093",level:2},{value:"0.9.2",id:"092",level:2},{value:"0.9.1",id:"091",level:2},{value:"0.9.0",id:"090",level:2},{value:"0.8.2",id:"082",level:2},{value:"0.8.1",id:"081",level:2},{value:"0.8.0",id:"080",level:2},{value:"0.7.4",id:"074",level:2},{value:"0.7.3",id:"073",level:2},{value:"0.7.2",id:"072",level:2},{value:"0.7.1",id:"071",level:2},{value:"0.7.0",id:"070",level:2},{value:"0.6.3",id:"063",level:2},{value:"0.6.2",id:"062",level:2},{value:"0.6.1",id:"061",level:2},{value:"0.6.0",id:"060",level:2},{value:"0.5.4",id:"054",level:2},{value:"0.5.3",id:"053",level:2},{value:"0.5.2",id:"052",level:2},{value:"0.5.1",id:"051",level:2},{value:"0.5.0",id:"050",level:2},{value:"0.4.5",id:"045",level:2},{value:"0.4.4",id:"044",level:2},{value:"0.4.3",id:"043",level:2},{value:"0.4.2",id:"042",level:2},{value:"0.4.1",id:"041",level:2},{value:"0.4.0",id:"040",level:2},{value:"0.3.2",id:"032",level:2},{value:"0.3.1",id:"031",level:2},{value:"0.3.0",id:"030",level:2},{value:"0.2.2",id:"022",level:2},{value:"0.2.1",id:"021",level:2},{value:"0.2.0",id:"020",level:2},{value:"0.1.0",id:"010",level:2}];function a(e){const n={a:"a",code:"code",em:"em",h2:"h2",li:"li",p:"p",ul:"ul",...(0,l.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsxs)(n.p,{children:["This page contains the changelogs from all ",(0,d.jsx)(n.a,{href:"https://github.com/PlutoLang/Pluto/releases",children:"releases of Pluto"}),"."]}),"\n",(0,d.jsx)(n.h2,{id:"0113",children:"0.11.3"}),"\n",(0,d.jsx)(n.p,{children:"Fixed some regressions from 0.11.2:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"io.isfile and io.isdir erroring on non-existent paths"}),"\n",(0,d.jsx)(n.li,{children:"io.copy erroring when the destination doesn't exist"}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"0112",children:"0.11.2"}),"\n",(0,d.jsx)(n.p,{children:"Compiler:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Fixed ",(0,d.jsx)(n.code,{children:"extends"})," not inheriting ",(0,d.jsx)(n.code,{children:"__index"}),", ",(0,d.jsx)(n.code,{children:"__mindex"}),", ",(0,d.jsx)(n.code,{children:"__newindex"})]}),"\n",(0,d.jsx)(n.li,{children:"Fixed lexer looping infinitely on a self-referencing alias"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"Runtime:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Fixed ",(0,d.jsx)(n.code,{children:"in"})," for substring checking not being binary safe"]}),"\n",(0,d.jsx)(n.li,{children:"Fixed table.slice crashing when producing a big slice"}),"\n",(0,d.jsxs)(n.li,{children:["Fixed ",(0,d.jsx)(n.code,{children:"exportvar"}),"'s handling of non-finite numbers"]}),"\n",(0,d.jsx)(n.li,{children:"Fixed bigint addition when operands are a mix of positive and negative"}),"\n",(0,d.jsx)(n.li,{children:"Fixed memory leaks under some rare conditions"}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["You can view the full commit log ",(0,d.jsx)(n.a,{href:"https://github.com/PlutoLang/Pluto/compare/0.11.1...0.11.2",children:"here"}),"."]}),"\n",(0,d.jsx)(n.h2,{id:"0111",children:"0.11.1"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Improved implicit-global coverage for multiple assignments within the same statement"}),"\n",(0,d.jsx)(n.li,{children:"Fixed preprocessor aliases not taking multi-token arguments (e.g. function calls)"}),"\n",(0,d.jsx)(n.li,{children:"Fixed compile-time concatenation shadowing optional parentheses"}),"\n",(0,d.jsxs)(n.li,{children:["Fixed ",(0,d.jsx)(n.code,{children:"extends"})," not inheriting ",(0,d.jsx)(n.code,{children:"__pairs"})]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"Standard Library:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"socket.bind now returns the created coroutine and errors are raised to the caller instead of the scheduler"}),"\n",(0,d.jsx)(n.li,{children:"Fixed socket.listen/socket.bind not failing for bound TCP ports on Windows"}),"\n",(0,d.jsxs)(n.li,{children:["Fixed ",(0,d.jsx)(n.code,{children:"os.sleep(1)"})," taking considerably longer than 1ms on Windows"]}),"\n",(0,d.jsxs)(n.li,{children:["Fixed ",(0,d.jsx)(n.code,{children:"scheduler:run"})," yielding after the final tick"]}),"\n",(0,d.jsxs)(n.li,{children:["Fixed ",(0,d.jsx)(n.code,{children:"dumpvar"})," and ",(0,d.jsx)(n.code,{children:"exportvar"}),"'s quoted strings not escaping bytes that would make it invalid UTF-8"]}),"\n",(0,d.jsx)(n.li,{children:"Fixed filesystem errors on Windows not being UTF-8 encoded when the user has a non-English locale"}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["You can view the full commit log ",(0,d.jsx)(n.a,{href:"https://github.com/PlutoLang/Pluto/compare/0.11.0...0.11.1",children:"here"}),"."]}),"\n",(0,d.jsx)(n.h2,{id:"0110",children:"0.11.0"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Added preprocessor aliases (",(0,d.jsx)(n.code,{children:"$alias"}),")"]}),"\n",(0,d.jsxs)(n.li,{children:["Added compile-time evaluated statement ",(0,d.jsx)(n.code,{children:"$assert"})]}),"\n",(0,d.jsx)(n.li,{children:"Added warning for unused local variables"}),"\n",(0,d.jsx)(n.li,{children:"Added octal numerals"}),"\n",(0,d.jsxs)(n.li,{children:["Added ",(0,d.jsx)(n.code,{children:"__mindex"})," metamethod\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"This is now used by default table metatable, elimiting the compatibility concerns it previously had."}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.li,{children:"Export is no longer deprecated but now implies constness"}),"\n",(0,d.jsx)(n.li,{children:"Walrus operator can now initialize multiple variables"}),"\n",(0,d.jsx)(n.li,{children:"Compile-time conditionals can now be equality checks"}),"\n",(0,d.jsxs)(n.li,{children:["Table freezing is now an optional feature, enabled via ",(0,d.jsx)(n.code,{children:"PLUTO_ENABLE_TABLE_FREEZING"})]}),"\n",(0,d.jsx)(n.li,{children:"Fixed implicit conversion of booleans to strings outside of concats"}),"\n",(0,d.jsx)(n.li,{children:"Removed table length cache"}),"\n",(0,d.jsx)(n.li,{children:"Removed let & const"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"Standard library:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Added buffer library"}),"\n",(0,d.jsx)(n.li,{children:"Added table.invert, table.dedup/deduplicate, table.deduped/deduplicated, table.values"}),"\n",(0,d.jsx)(n.li,{children:"Added crypto.crc32c"}),"\n",(0,d.jsx)(n.li,{children:"crypto.random now treats 1-2 arguments like math.random"}),"\n",(0,d.jsx)(n.li,{children:"Added optional 'binary' parameter to crypto.md5"}),"\n",(0,d.jsx)(n.li,{children:"Added ffi.alloc, ffi.write, & ffi.read"}),"\n",(0,d.jsx)(n.li,{children:"Added UDP support to socket.connect"}),"\n",(0,d.jsx)(n.li,{children:"Added socket.isudp, socket.udpserver"}),"\n",(0,d.jsx)(n.li,{children:"Added io.chmod"}),"\n",(0,d.jsx)(n.li,{children:"Added os.arch constant"}),"\n",(0,d.jsx)(n.li,{children:"Added callonce function"}),"\n",(0,d.jsx)(n.li,{children:"Added sdiv, udiv, smod, & umod functions"}),"\n",(0,d.jsxs)(n.li,{children:["string.split's needle parameter is now required (previously defaulted to ",(0,d.jsx)(n.code,{children:'","'}),")"]}),"\n",(0,d.jsx)(n.li,{children:"socket.listen & socket.bind can now be bound to a specific IP address"}),"\n",(0,d.jsx)(n.li,{children:"io.part now returns 'parent, name' if part argument is omitted"}),"\n",(0,d.jsx)(n.li,{children:"Optimized json.encode & json.decode"}),"\n",(0,d.jsxs)(n.li,{children:["Removed ",(0,d.jsx)(n.code,{children:"_PSOUP"})," constant"]}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"0105",children:"0.10.5"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Improved error message when ",(0,d.jsx)(n.code,{children:"new"})," is provided with a nil value"]}),"\n",(0,d.jsx)(n.li,{children:"Fixed ternary expression sometimes picking a bad register"}),"\n",(0,d.jsx)(n.li,{children:"Fixed possible buffer overflow when processing comments"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"Standard Library:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"json.encode now errors when provided with a non-finite number such as NaN or infinity"}),"\n",(0,d.jsx)(n.li,{children:"Fixed a rare crash with json.encode"}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"0104",children:"0.10.4"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Compile-Time Evaluation: Fixed ",(0,d.jsx)(n.code,{children:"$elseif"})," not working"]}),"\n",(0,d.jsx)(n.li,{children:"Fixed derived classes having their __index overwritten"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"Standard Library:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Improved scheduler's handling of errorfunc so debug.traceback is more useful"}),"\n",(0,d.jsx)(n.li,{children:"Optimized base64 decode operations"}),"\n",(0,d.jsx)(n.li,{children:"FFI: Fixed unloading library if it's out of scope but its functions are not"}),"\n",(0,d.jsx)(n.li,{children:"FFI: Fixed incorrectly writing f32 & f64 values for struct members"}),"\n",(0,d.jsx)(n.li,{children:"Fixed various issues with big inputs on dumpvar, exportvar, json.encode, json.decode, xml.encode, & xml.decode"}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"0103",children:"0.10.3"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Compile-Time Evaluation: ",(0,d.jsx)(n.code,{children:"io.contents"})," and ",(0,d.jsx)(n.code,{children:"type"})," are now also available"]}),"\n",(0,d.jsxs)(n.li,{children:["Compile-Time Evaluation: Table return type is now supported (for functions like ",(0,d.jsx)(n.code,{children:"url.parse"}),")"]}),"\n",(0,d.jsx)(n.li,{children:"Improved handling when a C++ exception is thrown during ffi.call"}),"\n",(0,d.jsxs)(n.li,{children:["Fixed not inferring that a keyword should be disabled when used as a global variable\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["For Integrators: Added ",(0,d.jsx)(n.code,{children:"PLUTO_PARANOID_KEYWORD_DETECTION"})," to make this more aggressive"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["Fixed infinite loop when switch control value contains ",(0,d.jsx)(n.code,{children:"or"})," or ",(0,d.jsx)(n.code,{children:"and"})]}),"\n",(0,d.jsx)(n.li,{children:"Fixed base32.decode not working correctly on some ARM systems"}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"0102",children:"0.10.2"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Added io.mkdir as an alias for io.makedir"}),"\n",(0,d.jsx)(n.li,{children:"Added io.mkdirs as an alias for io.makedirs"}),"\n",(0,d.jsx)(n.li,{children:"Fixed class preparsing issues with 'switch' & 'do' statements"}),"\n",(0,d.jsx)(n.li,{children:"Fixed not being able to use reserved identifiers with colon call syntax"}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"0101",children:"0.10.1"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Compatibility: Fixed not inferring that a keyword should be disabled from parameter"}),"\n",(0,d.jsxs)(n.li,{children:["Universal Block Opener: Fixed ",(0,d.jsx)(n.code,{children:"do"})," not being accepted instead of ",(0,d.jsx)(n.code,{children:"then"})," for ",(0,d.jsx)(n.code,{children:"catch"})," and ",(0,d.jsx)(n.code,{children:"$if"})]}),"\n",(0,d.jsx)(n.li,{children:"FFI library: Improved cdef parsing and error reporting"}),"\n",(0,d.jsx)(n.li,{children:"Crypto library: Fixed returning incorrect hex digest for MD5 in some cases"}),"\n",(0,d.jsx)(n.li,{children:"Socket library: Fixed an issue where the remote closing a connection too soon could cause recv/peek to never see some data that was sent"}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"0100",children:"0.10.0"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Added chained comparisons (e.g. ",(0,d.jsx)(n.code,{children:"1 <= i <= #t"}),")"]}),"\n",(0,d.jsx)(n.li,{children:"Added private methods to classes"}),"\n",(0,d.jsxs)(n.li,{children:["Private fields (and methods) can be declared and accessed anywhere inside the class now. Previously, you needed to define a private field ",(0,d.jsx)(n.em,{children:"before"})," you accessed it. This is no longer a restriction."]}),"\n",(0,d.jsxs)(n.li,{children:["Pluto now automatically detects if non-compatible keywords should be enabled or disabled based on usage\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["This is overwritten by the scripter using ",(0,d.jsx)(n.code,{children:"pluto_use"})," or the integrator or user managing compatibility mode, so it only applies when absolutely zero configuration has been applied. This is a significant improvement for lua source code compatibility."]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"do"})," can now be used instead of ",(0,d.jsx)(n.code,{children:"then"})," and ",(0,d.jsx)(n.code,{children:"begin"})]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"if"})," expressions are now no longer deprecated but require an ",(0,d.jsx)(n.code,{children:"end"})," (e.g. ",(0,d.jsx)(n.code,{children:"print(if a then b else c end)"}),")"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"$define"})," statement now requires an assignment"]}),"\n",(0,d.jsxs)(n.li,{children:["Fixed not being able to load Lua C modules on Linux\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["For simplicity in this regard, Pluto now always uses the C ABI to export ",(0,d.jsx)(n.code,{children:"lua_"})," functions and the C++ ABI for ",(0,d.jsx)(n.code,{children:"pluto_"})," functions."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"Standard library:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Added canvas library"}),"\n",(0,d.jsx)(n.li,{children:"Added ffi library"}),"\n",(0,d.jsx)(n.li,{children:"Added regex library"}),"\n",(0,d.jsx)(n.li,{children:"Added assert.contains"}),"\n",(0,d.jsx)(n.li,{children:"Added bigint.eq, bigint.lt, & bigint.le"}),"\n",(0,d.jsx)(n.li,{children:"Added crypto.ripemd160"}),"\n",(0,d.jsx)(n.li,{children:"Added crypto.exportkey & crypto.importkey"}),"\n",(0,d.jsx)(n.li,{children:"Added crypto.decompress"}),"\n",(0,d.jsx)(n.li,{children:"Added string.tohex & string.fromhex"}),"\n",(0,d.jsx)(n.li,{children:"Added table.findindex/findkey, table.back, table.keys, table.modget, table.modset, table.slice, table.countvalues, & table.chunk"}),"\n",(0,d.jsx)(n.li,{children:"Added socket.getpeer, socket.peek, socket.getside, socket.istls, & socket.isopen"}),"\n",(0,d.jsx)(n.li,{children:"Added optional limit argument to string.split"}),"\n",(0,d.jsx)(n.li,{children:"Added io.cwd and io.chdir as aliases for io.currentdir"}),"\n",(0,d.jsx)(n.li,{children:"socket.starttls can now be used on server sockets"}),"\n",(0,d.jsxs)(n.li,{children:["Optimized json.encode with ",(0,d.jsx)(n.code,{children:"__order"})]}),"\n",(0,d.jsx)(n.li,{children:"Fixed handling when an invalid RSA private key is passed to crypto.encrypt, crypto.decrypt, crypto.sign"}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"095",children:"0.9.5"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Fixed io.contents not returning an empty string for empty files on Windows"}),"\n",(0,d.jsx)(n.li,{children:"Fixed table.clear not resetting cached length"}),"\n",(0,d.jsx)(n.li,{children:"Fixed http.request allowing header values to contain CR and LF (CVE-2024-45597)"}),"\n",(0,d.jsx)(n.li,{children:"Fixed strings implicitly concatenating with each other"}),"\n",(0,d.jsx)(n.li,{children:"Fixed incorrect formatting with some instances of VM dumping"}),"\n",(0,d.jsx)(n.li,{children:"PHP build scripts now pass on additional arguments to the compiler"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"From Lua:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Fixed wrong code gen for indices with comparisons"}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"094",children:"0.9.4"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Improved field-shadow warning to say which field is shadowed"}),"\n",(0,d.jsxs)(n.li,{children:["Improved handing of ",(0,d.jsx)(n.code,{children:"parent"})," keyword"]}),"\n",(0,d.jsxs)(n.li,{children:["Improved error message for ",(0,d.jsx)(n.code,{children:"if then"})]}),"\n",(0,d.jsx)(n.li,{children:"Fixed an 'else if' warning false-positive"}),"\n",(0,d.jsx)(n.li,{children:"Fixed compile-time concat sometimes causing a parse error"}),"\n",(0,d.jsx)(n.li,{children:"Fixed infinite loop with nested switch expressions when flow should go to default case"}),"\n",(0,d.jsx)(n.li,{children:"Fixed exception when raising argument type mismatch warning when expected type is a function"}),"\n",(0,d.jsxs)(n.li,{children:["Fixed a compatibility issue with ",(0,d.jsx)(n.code,{children:"return case"})]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"Standard library:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Made string.replace binary-safe and faster"}),"\n",(0,d.jsxs)(n.li,{children:["CaT module now supports the optional ",(0,d.jsx)(n.a,{href:"https://github.com/calamity-inc/Soup/blob/senpai/docs/user/cat.md#value-encoding",children:"value encoding"})," feature"]}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"093",children:"0.9.3"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Added a warning for '(' being used instead of '|' for pipe operator arguments"}),"\n",(0,d.jsx)(n.li,{children:"Improved error reporting when an invalid parent is given to 'extends'"}),"\n",(0,d.jsx)(n.li,{children:"Fixed extending a global class unexpectedly pushing _G"}),"\n",(0,d.jsxs)(n.li,{children:["Fixed incorrect results when using 'not' on result of null coalescing operator\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"As a result of this fix, the null coalescing operator is now bytecode-compatible with Lua"}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.li,{children:"Fixed parsing ambiguities with ternary expressions in switch cases"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"Standard library:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Fixed ",(0,d.jsx)(n.code,{children:"json.encode(json.decode(..., json.withnull + json.withorder))"})," producing unexpected artifacts"]}),"\n",(0,d.jsx)(n.li,{children:"Fixed data corruption when json.decode is used on large data"}),"\n",(0,d.jsx)(n.li,{children:"Fixed insufficient TLS peer verification in HTTP library and socket.starttls in non-WASM builds (CVE-2024-32973)"}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"092",children:"0.9.2"}),"\n",(0,d.jsx)(n.p,{children:"This release fixes several regressions made in 0.9.1:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Fixed failing to compile on aarch64"}),"\n",(0,d.jsx)(n.li,{children:"Fixed method calls no longer working in ternary expressions even with parentheses"}),"\n",(0,d.jsx)(n.li,{children:"Fixed walrus operator no longer being usable within unary operator expressions"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"Furthermore, it improves the walrus operator in regards to disallowing UB and clarifying related error messages."}),"\n",(0,d.jsx)(n.h2,{id:"091",children:"0.9.1"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Improved try/catch"}),"\n",(0,d.jsx)(n.li,{children:"Improved parsing of for-as loops"}),"\n",(0,d.jsxs)(n.li,{children:["Deprecated if expressions (",(0,d.jsx)(n.code,{children:"if a then b else c"}),") in favor of ternary expressions (",(0,d.jsx)(n.code,{children:"a ? b : c"}),")"]}),"\n",(0,d.jsxs)(n.li,{children:["Fixed instances of ",(0,d.jsx)(n.code,{children:":"})," starting method call when it should delimit ternary expression"]}),"\n",(0,d.jsx)(n.li,{children:"Fixed unreachable-code triggering for non-constant values"}),"\n",(0,d.jsx)(n.li,{children:"Fixed repeat + continue being able to read uninitialized variables"}),"\n",(0,d.jsx)(n.li,{children:"Fixed break and continue possibly not closing upvalues"}),"\n",(0,d.jsx)(n.li,{children:"Fixed continue not working as expected when passing through switch statement"}),"\n",(0,d.jsx)(n.li,{children:"Fixed switch cases being able to read uninitialized variables"}),"\n",(0,d.jsx)(n.li,{children:"Fixed inconsistent behavior with safe navigtion method calls and multiple return values"}),"\n",(0,d.jsx)(n.li,{children:"Fixed walrus operator being able to cause UB or corrupt the stack"}),"\n",(0,d.jsx)(n.li,{children:"Fixed pipe operator possibly generating incorrect code"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"Huge thanks to @XmiliaH for reporting the majority of bugs fixed in this update and helping fix them."}),"\n",(0,d.jsx)(n.h2,{id:"090",children:"0.9.0"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Added ",(0,d.jsx)(n.code,{children:"$define"})," statement"]}),"\n",(0,d.jsxs)(n.li,{children:["Added pipe operator (",(0,d.jsx)(n.code,{children:"|>"}),")"]}),"\n",(0,d.jsxs)(n.li,{children:["Added compound XOR operator (",(0,d.jsx)(n.code,{children:"~="}),")"]}),"\n",(0,d.jsxs)(n.li,{children:["Added optional ",(0,d.jsx)(n.code,{children:"global"})," keyword and 'implicit-global' warning"]}),"\n",(0,d.jsxs)(n.li,{children:["Added ",(0,d.jsx)(n.code,{children:"@fallthrough"})," annotation and 'unannotated-fallthrough' warning"]}),"\n",(0,d.jsxs)(n.li,{children:["Added ",(0,d.jsx)(n.code,{children:"<nodiscard>"})," function attribute and 'discarded-return' warning"]}),"\n",(0,d.jsx)(n.li,{children:"Added 'field-shadow' warning"}),"\n",(0,d.jsxs)(n.li,{children:["Lambdas can now have full bodies by starting with 'do' (e.g. ",(0,d.jsx)(n.code,{children:"|a| -> do return a end"}),")"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"pluto_use"})," can now also be used via ",(0,d.jsx)(n.code,{children:"@pluto_use"})," in comments"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"new"})," operator now also supports static 'new' function"]}),"\n",(0,d.jsxs)(n.li,{children:["Deprecated ",(0,d.jsx)(n.code,{children:"**"})," operator (use ",(0,d.jsx)(n.code,{children:"^"})," instead)"]}),"\n",(0,d.jsxs)(n.li,{children:["Deprecated ",(0,d.jsx)(n.code,{children:"let"})," statement (use ",(0,d.jsx)(n.code,{children:"local"})," instead)"]}),"\n",(0,d.jsxs)(n.li,{children:["Deprecated ",(0,d.jsx)(n.code,{children:"const"})," statement (use ",(0,d.jsx)(n.code,{children:"local"})," with ",(0,d.jsx)(n.code,{children:"<const>"})," or ",(0,d.jsx)(n.code,{children:"$define"})," instead)"]}),"\n",(0,d.jsxs)(n.li,{children:["Deprecated ",(0,d.jsx)(n.code,{children:"<constexpr>"})," attribute (replaced by ",(0,d.jsx)(n.code,{children:"$define"})," statement)"]}),"\n",(0,d.jsx)(n.li,{children:"Re-added compile-time concat optimization"}),"\n",(0,d.jsx)(n.li,{children:"Fixed switch cases being able to jump into the scope of a variable"}),"\n",(0,d.jsxs)(n.li,{children:["Fixed being able to set ",(0,d.jsx)(n.code,{children:"nil"})," as a default argument"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"Standard library:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Added '*' library"}),"\n",(0,d.jsx)(n.li,{children:"Added 'cat' library"}),"\n",(0,d.jsx)(n.li,{children:"Added 'http' library"}),"\n",(0,d.jsx)(n.li,{children:"Added 'socket' library"}),"\n",(0,d.jsx)(n.li,{children:"Added 'xml' library"}),"\n",(0,d.jsx)(n.li,{children:"Added 'bigint' class"}),"\n",(0,d.jsx)(n.li,{children:"Added 'scheduler' class"}),"\n",(0,d.jsx)(n.li,{children:"Added os.platform constant"}),"\n",(0,d.jsx)(n.li,{children:"Added range function"}),"\n",(0,d.jsx)(n.li,{children:"Added io.contents function"}),"\n",(0,d.jsx)(n.li,{children:"Added io.relative function"}),"\n",(0,d.jsx)(n.li,{children:"Added copying variants of existing functions (table.sorted, table.mapped, table.filtered, table.reversed, table.reordered)"}),"\n",(0,d.jsx)(n.li,{children:"Added table.size function"}),"\n",(0,d.jsx)(n.li,{children:"Added table.clear function"}),"\n",(0,d.jsx)(n.li,{children:"Added table.reduce, table.min, & table.max functions"}),"\n",(0,d.jsx)(n.li,{children:"Added table.find function"}),"\n",(0,d.jsx)(n.li,{children:"Added table.checkall function"}),"\n",(0,d.jsx)(n.li,{children:"Added coroutine.sleep function"}),"\n",(0,d.jsx)(n.li,{children:"Added crypto.generatekeypair function"}),"\n",(0,d.jsx)(n.li,{children:"Added crypto.encrypt & crypto.decrypt functions"}),"\n",(0,d.jsx)(n.li,{children:"Added crypto.sign & crypto.verify functions"}),"\n",(0,d.jsx)(n.li,{children:"Added crypto.sha1, crypto.sha384, & crypto.sha512 functions"}),"\n",(0,d.jsx)(n.li,{children:"Added crypto.adler32 function"}),"\n",(0,d.jsx)(n.li,{children:"Added url.parse function"}),"\n",(0,d.jsx)(n.li,{children:"Added math.round function"}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"json.encode"})," now supports ",(0,d.jsx)(n.code,{children:"__order"})," for objects"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"json.decode"})," now has an optional flags parameter, they can be combined via binary OR\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"json.withnull"})," makes it decode JSON nulls as ",(0,d.jsx)(n.code,{children:"json.null"})," instead of ",(0,d.jsx)(n.code,{children:"nil"})]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"json.withorder"})," makes it produce ",(0,d.jsx)(n.code,{children:"__order"})," field for objects"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.li,{children:"coroutines/threads now have a metatable by default"}),"\n",(0,d.jsx)(n.li,{children:"base64.encode & base32.encode changed padding parameter's default value from false to true (base64.urlencode is unchanged)"}),"\n",(0,d.jsx)(n.li,{children:"Fixed crypto.fnv1 & crypto.fnv1a producing incorrect hashes for non-ASCII strings"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"CLI:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Added '-c' flag to pluto & plutoc to enable compatibility mode"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"For integrators:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Added ",(0,d.jsx)(n.code,{children:"PLUTO_READ_FILE_HOOK"})," & ",(0,d.jsx)(n.code,{children:"PLUTO_WRITE_FILE_HOOK"})]}),"\n",(0,d.jsxs)(n.li,{children:["Added ",(0,d.jsx)(n.code,{children:"PLUTO_HTTP_REQUEST_HOOK"})]}),"\n",(0,d.jsxs)(n.li,{children:["Removed ",(0,d.jsx)(n.code,{children:"PLUTO_USE_THROW"})," as we now default to using C++ exceptions for Lua errors to avoid breaking RAII semantics. You can still specify ",(0,d.jsx)(n.code,{children:"LUA_USE_LONGJMP"})," if you want long jumps."]}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"082",children:"0.8.2"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Added variable scoping warnings to switch statements to highlight code that will break in 0.9.0"}),"\n",(0,d.jsx)(n.li,{children:"Improved some error messages"}),"\n",(0,d.jsx)(n.li,{children:"Fixed base32 & base64 functions not being binary-safe"}),"\n",(0,d.jsx)(n.li,{children:"Removed compile-time concat optimization because it could produce incorrect results"}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"081",children:"0.8.1"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Added a specialized error message for ",(0,d.jsx)(n.code,{children:"local class ="})," etc"]}),"\n",(0,d.jsx)(n.li,{children:"'exportvar' now prefixes function bytecode with 'load'"}),"\n",(0,d.jsx)(n.li,{children:"Improved code generation for switch blocks"}),"\n",(0,d.jsx)(n.li,{children:'Improved "possibly unwanted function call" warning'}),"\n",(0,d.jsx)(n.li,{children:"Fixed dumpvar & exportvar not handling recursion of sub-tables"}),"\n",(0,d.jsx)(n.li,{children:"Fixed assert.equal & assert.nequal ignoring extra fields in value2"}),"\n",(0,d.jsx)(n.li,{children:"Fixed 'until' possibly using a variable from wrong scope due to 'continue'"}),"\n",(0,d.jsx)(n.li,{children:"Fixed var-shadow warning for named vararg being raised on the wrong line"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"For integrators:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Added ",(0,d.jsx)(n.code,{children:"PLUTO_MEMORY_LIMIT"})]}),"\n",(0,d.jsxs)(n.li,{children:["Added ",(0,d.jsx)(n.code,{children:"PLUTO_NO_DEBUGLIB"})]}),"\n",(0,d.jsxs)(n.li,{children:["Added ",(0,d.jsx)(n.code,{children:"PLUTO_NO_COROLIB"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["For a more comprehensive overview of the changes, ",(0,d.jsx)(n.a,{href:"https://github.com/PlutoLang/Pluto/compare/0.8.0...0.8.1",children:"take a look at the commit log"}),"."]}),"\n",(0,d.jsx)(n.h2,{id:"080",children:"0.8.0"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Added switch expressions"}),"\n",(0,d.jsxs)(n.li,{children:["Added shorthand fallthrough syntax for switch statement & expression, e.g. ",(0,d.jsx)(n.code,{children:"case 1, 2: ..."})]}),"\n",(0,d.jsx)(n.li,{children:"Added try...catch statement"}),"\n",(0,d.jsxs)(n.li,{children:["Added spaceship operator (",(0,d.jsx)(n.code,{children:"<=>"}),")"]}),"\n",(0,d.jsxs)(n.li,{children:["Added safe navigation for method calls: ",(0,d.jsx)(n.code,{children:"nilable_inst?:method()"}),", ",(0,d.jsx)(n.code,{children:"inst:nilable_method?()"}),", ",(0,d.jsx)(n.code,{children:"nilable_inst?:nilable_method?()"})]}),"\n",(0,d.jsxs)(n.li,{children:["Added optional 'const' keyword as shorthand for ",(0,d.jsx)(n.code,{children:"local ... <const> [= ...]"}),", enabled with ",(0,d.jsx)(n.code,{children:"pluto_use const"}),"."]}),"\n",(0,d.jsxs)(n.li,{children:["Added ",(0,d.jsx)(n.code,{children:'pluto_use "VERSION+"'})]}),"\n",(0,d.jsxs)(n.li,{children:["Tables now have a metatable by default (",(0,d.jsx)(n.code,{children:"{ __index = _G.table }"}),")."]}),"\n",(0,d.jsx)(n.li,{children:"Added '!' as an alias for 'not'"}),"\n",(0,d.jsx)(n.li,{children:"Added 'private' modifier for class fields"}),"\n",(0,d.jsx)(n.li,{children:"Improved 'class' and 'extends' to support indexed names"}),"\n",(0,d.jsx)(n.li,{children:"Improved 'instanceof' to be usable with more complex expressions"}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"export"})," now works in all scopes, not just the main body"]}),"\n",(0,d.jsxs)(n.li,{children:["Updated ",(0,d.jsx)(n.code,{children:"in"})," operator on tables to check values instead of keys"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"\\{"})," is now a valid escape sequence (for interpolated strings)"]}),"\n",(0,d.jsx)(n.li,{children:"Fixed to-be-closed variables not working in switch cases"}),"\n",(0,d.jsx)(n.li,{children:"Fixed 'new' not working as expected if it was disabled by the environment and re-enabled by 'pluto_use'"}),"\n",(0,d.jsx)(n.li,{children:"Fixed 'enum class' not incrementing enumerator values"}),"\n",(0,d.jsx)(n.li,{children:"Fixed not being able to use expressions such as increment in enum without parentheses"}),"\n",(0,d.jsx)(n.li,{children:"Added compile-time concat optimization"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"Warnings:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Added warning for local attributes used without '<' ... '>'"}),"\n",(0,d.jsx)(n.li,{children:"Now propagating types for global variables so when their value is assigned to something, mismatches can be detected."}),"\n",(0,d.jsxs)(n.li,{children:["Added optional ",(0,d.jsx)(n.code,{children:"global-shadow"})," warning which is like ",(0,d.jsx)(n.code,{children:"var-shadow"})," but for globals that are especially vulnerable to obscure shadowing bugs (to prevent excessive annoyance).\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["These globals include: ",(0,d.jsx)(n.code,{children:"arg"}),",",(0,d.jsx)(n.code,{children:"string"}),", and ",(0,d.jsx)(n.code,{children:"table"}),". Integrators can change this via ",(0,d.jsx)(n.code,{children:"PLUTO_COMMON_GLOBAL_NAMES"})]}),"\n",(0,d.jsxs)(n.li,{children:["Global shadow warnings do not apply to localization optimization (i.e, ",(0,d.jsx)(n.code,{children:"local table = table"}),")"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"var-shadow"})," has been improved to check more enclosing scopes"]}),"\n",(0,d.jsxs)(n.li,{children:["Improved ",(0,d.jsx)(n.code,{children:"unreachable-code"})]}),"\n",(0,d.jsx)(n.li,{children:"Fixed var-shadow warning for locals used in switch cases despite break"}),"\n",(0,d.jsxs)(n.li,{children:["Added optional ",(0,d.jsx)(n.code,{children:"non-portable-code"}),", ",(0,d.jsx)(n.code,{children:"non-portable-bytecode"}),", and ",(0,d.jsx)(n.code,{children:"non-portable-name"})," warning types"]}),"\n",(0,d.jsxs)(n.li,{children:["Warnings can now be promoted to errors, e.g. ",(0,d.jsx)(n.code,{children:"@pluto_warnings error-all"})]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"Standard library:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Soup is now always linked in, obsoleting ",(0,d.jsx)(n.code,{children:"_PSOUP"})]}),"\n",(0,d.jsxs)(n.li,{children:["Added assertion library (see ",(0,d.jsx)(n.a,{href:"https://github.com/PlutoLang/Pluto/pull/426",children:"here"})," for more preliminary detail)"]}),"\n",(0,d.jsx)(n.li,{children:"Added url library (encode & decode)"}),"\n",(0,d.jsx)(n.li,{children:"Added exception class"}),"\n",(0,d.jsx)(n.li,{children:"Added vector3 class"}),"\n",(0,d.jsx)(n.li,{children:"Added dumpvar & exportvar"}),"\n",(0,d.jsx)(n.li,{children:"Added string.truncate"}),"\n",(0,d.jsxs)(n.li,{children:["Added string.replace \u2014 a slightly faster, but mostly more straightforward alternative to gsub.\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Most notably, not burdened by ",(0,d.jsx)(n.code,{children:"MAX_CAPTURES"})]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["Added string.formatint (supports any BigInt impl that can offer the user a string representation)\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Also supports any grouping & any separator without concerning locale."}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.li,{children:"Added table.filter"}),"\n",(0,d.jsx)(n.li,{children:"Added table.map"}),"\n",(0,d.jsx)(n.li,{children:"Added table.reverse"}),"\n",(0,d.jsx)(n.li,{children:"Added table.reorder"}),"\n",(0,d.jsx)(n.li,{children:"Added io.currentdir"}),"\n",(0,d.jsx)(n.li,{children:"Added io.part"}),"\n",(0,d.jsx)(n.li,{children:"Added io.writetime"}),"\n",(0,d.jsx)(n.li,{children:"Added math.isnan"}),"\n",(0,d.jsx)(n.li,{children:"Added compareversions"}),"\n",(0,d.jsx)(n.li,{children:"Added wcall"}),"\n",(0,d.jsx)(n.li,{children:"Added math.atan2 as an alias for math.atan"}),"\n",(0,d.jsx)(n.li,{children:"Added json.null"}),"\n",(0,d.jsx)(n.li,{children:"io.absolute now has an optional argument to request a canonicalized absolute path"}),"\n",(0,d.jsx)(n.li,{children:"Updated string.rfind to accept Lua patterns"}),"\n",(0,d.jsx)(n.li,{children:"Renamed io.copyto to io.copy"}),"\n",(0,d.jsx)(n.li,{children:"Renamed base64.url_encode & base64.url_decode to base64.urlencode & base64.urldecode"}),"\n",(0,d.jsx)(n.li,{children:"Deprecated string.find_first_of & string.find_first_not_of in favor of string.find"}),"\n",(0,d.jsx)(n.li,{children:"Deprecated string.find_last_of & string.find_last_not_of in favor of string.rfind"}),"\n",(0,d.jsx)(n.li,{children:"Deprecated string.lfind in favor of string.find"}),"\n",(0,d.jsx)(n.li,{children:"Deprecated crypto.hexdigest in favor of string.format"}),"\n",(0,d.jsxs)(n.li,{children:["Modified ",(0,d.jsx)(n.code,{children:"require"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Prioritizes local files now to ensure compatibility. Added ",(0,d.jsx)(n.code,{children:'require("pluto:libname")'})," to explicitly request pluto libraries if ever needed (normal still works for pluto libraries, we just check for local files first)."]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.li,{children:"Removed base58"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"For integrators:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Added ",(0,d.jsx)(n.code,{children:"PLUTO_NO_FILESYSTEM"})," - disables all filesystem access (for sandboxing)."]}),"\n",(0,d.jsxs)(n.li,{children:["Added ",(0,d.jsx)(n.code,{children:"PLUTO_WARN_NON_PORTABLE_CODE"})]}),"\n",(0,d.jsxs)(n.li,{children:["Added ",(0,d.jsx)(n.code,{children:"PLUTO_WARN_NON_PORTABLE_BYTECODE"})]}),"\n",(0,d.jsxs)(n.li,{children:["Added ",(0,d.jsx)(n.code,{children:"PLUTO_WARN_NON_PORTABLE_NAME"})]}),"\n",(0,d.jsxs)(n.li,{children:["Added ",(0,d.jsx)(n.code,{children:"PLUTO_NO_BINARIES"})," - disables all dll/so/c module loading (for sandboxing)"]}),"\n",(0,d.jsxs)(n.li,{children:["Added ",(0,d.jsx)(n.code,{children:"luaG_addsrcinfo"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["Far more information can be found at our documentation: ",(0,d.jsx)(n.a,{href:"https://pluto-lang.org/",children:"https://pluto-lang.org/"})]}),"\n",(0,d.jsx)(n.h2,{id:"074",children:"0.7.4"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Fixed unexpected behavior when using a ternary expression inside of an interpolated string"}),"\n",(0,d.jsxs)(n.li,{children:["Fixed ",(0,d.jsx)(n.code,{children:"table.contains"})," returning ",(0,d.jsx)(n.code,{children:"0"})," instead of the actual key for non-integer key types"]}),"\n",(0,d.jsx)(n.li,{children:"Fixed REPL not recognizing multi-line statements"}),"\n",(0,d.jsx)(n.li,{children:"Fixed Pluto-injected code corrupting bytecode"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"For integrators:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Added ",(0,d.jsx)(n.code,{children:"PLUTO_LOADCLIB_HOOK"})]}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"073",children:"0.7.3"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Updated error semantics of os.remove & os.rename to match Lua's again (return false instead of raising error), Pluto's 'io' versions of these functions remain unchanged"}),"\n",(0,d.jsxs)(n.li,{children:["Fixed ",(0,d.jsx)(n.code,{children:"extends"})," not copying over metamethods"]}),"\n",(0,d.jsxs)(n.li,{children:['Fixed "memory allocation error: block too big" when parsing ',(0,d.jsx)(n.code,{children:"--[[]]"})]}),"\n",(0,d.jsx)(n.li,{children:"Fixed allowing function calls to primitives, causing ambiguities with exprstat after assignment"}),"\n",(0,d.jsx)(n.li,{children:"Fixed string.upper & string.lower delimiting on '\\0'"}),"\n",(0,d.jsx)(n.li,{children:"Some other improvements and bugfixes"}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"072",children:"0.7.2"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"String interpolation now allows nested strings"}),"\n",(0,d.jsx)(n.li,{children:'Improved "unreachable code" warning'}),"\n",(0,d.jsx)(n.li,{children:"Improved some error messages"}),"\n",(0,d.jsx)(n.li,{children:"Fixed string interpolation not working with string call syntax"}),"\n",(0,d.jsx)(n.li,{children:"Fixed rare issues with 'new', 'extends' and 'instanceof' operators"}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"071",children:"0.7.1"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Fixed string interpolation not working with single-quoted strings after 0.7.0"}),"\n",(0,d.jsx)(n.li,{children:"Fixed os.sleep disregarding execution time limit"}),"\n",(0,d.jsx)(n.li,{children:"Fixed scripts being able to go past execution time limit with coroutines"}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"070",children:"0.7.0"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Added table destructuring (",(0,d.jsx)(n.code,{children:"local '{' NAME [= FIELD][, ...] '}' '=' TABLE"}),")"]}),"\n",(0,d.jsxs)(n.li,{children:["Added array destructuring (",(0,d.jsx)(n.code,{children:"local '[' NAME[, ...] ']' '=' TABLE"}),")"]}),"\n",(0,d.jsxs)(n.li,{children:["Added ",(0,d.jsx)(n.code,{children:"pluto_use <* | version | token> [= false]"})," to toggle non-compatible keywords"]}),"\n",(0,d.jsxs)(n.li,{children:["Added ",(0,d.jsx)(n.code,{children:"pluto_use let [= false]"})," to toggle 'let' alias for 'local'"]}),"\n",(0,d.jsxs)(n.li,{children:["Added ++ statement\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Also supports ",(0,d.jsx)(n.code,{children:"++t.prop"})]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.li,{children:"Added constructor promotion"}),"\n",(0,d.jsx)(n.li,{children:"Added compile-time conditionals"}),"\n",(0,d.jsxs)(n.li,{children:["Improved class expression & statement\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Now supports property declaration without value"}),"\n",(0,d.jsx)(n.li,{children:"Now supports type hints (currently without warnings)"}),"\n",(0,d.jsx)(n.li,{children:"Now supports access modifiers (currently without warnings or errors)"}),"\n",(0,d.jsx)(n.li,{children:"Can now optionally use 'begin' before body"}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.li,{children:"Improved string interpolation to support any expression, not just variable names"}),"\n",(0,d.jsxs)(n.li,{children:["Improved type hints to support alternatives, e.g. ",(0,d.jsx)(n.code,{children:"string|int"})]}),"\n",(0,d.jsx)(n.li,{children:"Named arguments may now be used in conjunction with positional arguments"}),"\n",(0,d.jsxs)(n.li,{children:["Improved 'new' expression to support direct member access into the table it created, e.g. ",(0,d.jsx)(n.code,{children:'print(new Human("John").name)'})]}),"\n",(0,d.jsx)(n.li,{children:"'new' may now also be used as a statement"}),"\n",(0,d.jsx)(n.li,{children:"Fixed loading of precompiled code from files with non-Latin path on Windows"}),"\n",(0,d.jsx)(n.li,{children:"Fixed behavior of 'in' expression when used on a temporary table"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"Out-of-the-box Compatibility:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"'parent' may now be overwritten via local or parameter name"}),"\n",(0,d.jsx)(n.li,{children:"All reserved identifiers can now be used with shorthand table syntax and goto"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"Standard library:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Added coroutine.xresume"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"For integrators:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Added ",(0,d.jsx)(n.code,{children:"PLUTO_USE_LET"})]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["More detailed documentation can be found ",(0,d.jsx)(n.a,{href:"https://pluto-lang.org/",children:"here"}),"."]}),"\n",(0,d.jsx)(n.h2,{id:"063",children:"0.6.3"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Defaults arguments now produce Lua-compatible bytecode"}),"\n",(0,d.jsx)(n.li,{children:"Fixed default arguments not working for methods"}),"\n",(0,d.jsx)(n.li,{children:"Fixed named arguments, etc. not working for upvalue functions"}),"\n",(0,d.jsx)(n.li,{children:"Fixed 'in' expression for when right-hand operand is nested table"}),"\n",(0,d.jsx)(n.li,{children:"Fixed 'in' expression being too greedy in consuming righthand operand"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"For integrators:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Added PLUTO_LUA_LINKABLE"}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"062",children:"0.6.2"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:'Optional Parentheses now works for table types and with chained "suffix expressions"'}),"\n",(0,d.jsxs)(n.li,{children:["Fixed ",(0,d.jsx)(n.code,{children:"new"})," overwriting user-defined ",(0,d.jsx)(n.code,{children:"__index"})]}),"\n",(0,d.jsx)(n.li,{children:"Fixed infinite recursion with multi-level parent calls"}),"\n",(0,d.jsx)(n.li,{children:"Fixed some other small issues"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"Performance:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Optimized lua_insert, lua_remove, & lua_replace (Optimization by @gottfriedleibniz)"}),"\n",(0,d.jsx)(n.li,{children:"Optimized luaO_ceillog2 (Inspired by @gottfriedleibniz)"}),"\n",(0,d.jsx)(n.li,{children:"Enabled Lua's jump table for clang build as well"}),"\n",(0,d.jsx)(n.li,{children:"Fixed a VM performance regression introduced by Pluto"}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"061",children:"0.6.1"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Improved suggestions (for when using plutoc with the language server)"}),"\n",(0,d.jsx)(n.li,{children:"Optimized switch statement code generation (now omits cases leading to default case)"}),"\n",(0,d.jsx)(n.li,{children:"Fixed producing syntax error when 'case' or 'default' is used outside of switch"}),"\n",(0,d.jsx)(n.li,{children:"Fixed using 'export' outside of global scope not producing an error"}),"\n",(0,d.jsx)(n.li,{children:"Fixed some confusing error messages"}),"\n",(0,d.jsx)(n.li,{children:"Pulled in the latest Lua changes so some Lua bugs are now fixed"}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"060",children:"0.6.0"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Added ",(0,d.jsx)(n.code,{children:"<constexpr>"})," attribute to force locals to be compile-time constants"]}),"\n",(0,d.jsxs)(n.li,{children:["Added ",(0,d.jsx)(n.code,{children:"$expr"})," syntax for compile-time evaluation of select functions"]}),"\n",(0,d.jsxs)(n.li,{children:["Added ",(0,d.jsx)(n.code,{children:"export [NAME=VALUE | function | class]"})," syntax"]}),"\n",(0,d.jsxs)(n.li,{children:["Added named arguments (",(0,d.jsx)(n.code,{children:"name=value"})," in funcargs)"]}),"\n",(0,d.jsxs)(n.li,{children:["Added named varargs (",(0,d.jsx)(n.code,{children:"...NAME"}),"), automatically puts the varargs into a table with the given name"]}),"\n",(0,d.jsx)(n.li,{children:"A subset of Soup is now vendored with Pluto so standard library features that rely on it should now be more viable"}),"\n",(0,d.jsx)(n.li,{children:'Removed deprecated "pluto_case" and "pluto_default" keywords'}),"\n",(0,d.jsxs)(n.li,{children:["Removed ",(0,d.jsx)(n.code,{children:"when"})," statement"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"Enums:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Added ",(0,d.jsx)(n.code,{children:"ENUM.ENUMERATOR"})," syntax for named enums\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Added ",(0,d.jsx)(n.code,{children:"ENUM CLASS NAME ..."})," syntax to force usage of this syntax"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["Added enum reflection for named enums (",(0,d.jsx)(n.code,{children:":names()"}),", ",(0,d.jsx)(n.code,{children:":values()"}),", ",(0,d.jsx)(n.code,{children:":kvmap()"}),", ",(0,d.jsx)(n.code,{children:":vkmap()"}),")"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"Object-oriented programming:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Added ",(0,d.jsx)(n.code,{children:"new TABLE(...)"})," syntax (creates new table, sets TABLE as its metatable + __index, calls ",(0,d.jsx)(n.code,{children:":__construct(...)"})," if exists)"]}),"\n",(0,d.jsxs)(n.li,{children:["Added 'class' statement & expression (similar to table but without need for ',' or ';' after properties and functions)\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["'class' and 'local class' statements also support ",(0,d.jsx)(n.code,{children:"extends NAME"})," which sets __parent property and metatable with __index"]}),"\n",(0,d.jsxs)(n.li,{children:["Added ",(0,d.jsx)(n.code,{children:"static function NAME"})," for use within table constructor/class definition (equal to ",(0,d.jsx)(n.code,{children:"NAME = function"}),")"]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["Added 'parent' expression\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"parent.PROP"})," -> ",(0,d.jsx)(n.code,{children:"self.__parent.PROP"})]}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"parent:METHOD(...)"})," -> ",(0,d.jsx)(n.code,{children:"self.__parent.METHOD(self, ...)"})]}),"\n"]}),"\n"]}),"\n",(0,d.jsxs)(n.li,{children:["Added ",(0,d.jsx)(n.code,{children:"TABLE instanceof METATABLE"})," operator"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"Type hints:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Added 'int' & 'float' type hints (more restrictive than 'number')"}),"\n",(0,d.jsx)(n.li,{children:"Added 'void' type hint for function return type"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"Standard library:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Added utonumber, utostring, & string.uformat"}),"\n",(0,d.jsxs)(n.li,{children:["Added ",(0,d.jsx)(n.code,{children:"instanceof(TABLE, METATABLE)"})]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"For integrators upgrading to Pluto 0.6.0:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Consider defining ",(0,d.jsx)(n.code,{children:"PLUTO_COMPATIBLE_NEW"}),", ",(0,d.jsx)(n.code,{children:"PLUTO_COMPATIBLE_CLASS"}),", ",(0,d.jsx)(n.code,{children:"PLUTO_COMPATIBLE_PARENT"})," & ",(0,d.jsx)(n.code,{children:"PLUTO_COMPATIBLE_EXPORT"})," so 'new', 'class', 'parent' & 'export' will not be reserved keywords just yet, instead 'pluto_new', 'pluto_class', 'pluto_parent' & 'pluto_export' can be used."]}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["More detailed documentation can be found ",(0,d.jsx)(n.a,{href:"https://pluto-lang.org/",children:"here"}),"."]}),"\n",(0,d.jsx)(n.h2,{id:"054",children:"0.5.4"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Default arguments now support tables"}),"\n",(0,d.jsx)(n.li,{children:"Pluto now supports building with C ABI so you can replace Lua's shared library with Pluto's without needing to change the program"}),"\n",(0,d.jsxs)(n.li,{children:["Fixed ",(0,d.jsx)(n.code,{children:"return"})," before ",(0,d.jsx)(n.code,{children:"case"})," or ",(0,d.jsx)(n.code,{children:"default"})," causing a syntax error"]}),"\n",(0,d.jsx)(n.li,{children:"Fixed access violation on lua_close with strings as default parameters"}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"053",children:"0.5.3"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Default arguments now support compile-time constant variables, unary ",(0,d.jsx)(n.code,{children:"-"}),", and pseudo-unary ",(0,d.jsx)(n.code,{children:"+"})]}),"\n",(0,d.jsxs)(n.li,{children:["Re-added ",(0,d.jsx)(n.code,{children:"os.remove"})," & ",(0,d.jsx)(n.code,{children:"os.rename"})," because they originated in Lua and should not have been removed"]}),"\n",(0,d.jsx)(n.li,{children:"Fixed some instances of errors not providing a code snippet and reporting the wrong line"}),"\n",(0,d.jsx)(n.li,{children:"Fixed enumerators being limited to 32-bit values"}),"\n",(0,d.jsx)(n.li,{children:"Fixed warning disable/enable being global-only"}),"\n",(0,d.jsx)(n.li,{children:"Removed if-goto optimisation due to various edge cases where goto is not executed"}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"052",children:"0.5.2"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Enum statement: Now supports compile-time constant variables when setting value"}),"\n",(0,d.jsxs)(n.li,{children:["Fixed ",(0,d.jsx)(n.code,{children:"require"}),", ",(0,d.jsx)(n.code,{children:"dofile"}),", etc. not taking UTF-8 encoded paths on Windows"]}),"\n",(0,d.jsx)(n.li,{children:"Fixed pluto & plutoc not being able to execute files with foreign names on Windows"}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"051",children:"0.5.1"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Enum Statement: Now supports unary ",(0,d.jsx)(n.code,{children:"-"})," and pseudo-unary ",(0,d.jsx)(n.code,{children:"+"})," when setting value"]}),"\n",(0,d.jsx)(n.li,{children:"Replaced locals limit with registers limit so you can have more compile-time constants"}),"\n",(0,d.jsx)(n.li,{children:"Fixed Pluto's IO functions not taking UTF-8 encoded paths"}),"\n",(0,d.jsx)(n.li,{children:"Fixed UB when emitting unfinished string error, possibly resulting in an access violation"}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"050",children:"0.5.0"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:'Added "for ITERABLE as VALUE" loop'}),"\n",(0,d.jsx)(n.li,{children:"Added $-strings (string interpolation)"}),"\n",(0,d.jsx)(n.li,{children:"Added prefix ++ operator"}),"\n",(0,d.jsx)(n.li,{children:"Added support for binary number literals."}),"\n",(0,d.jsx)(n.li,{children:"Added C-style enums"}),"\n",(0,d.jsxs)(n.li,{children:["Added ",(0,d.jsx)(n.code,{children:"_PSOUP"})," global"]}),"\n",(0,d.jsxs)(n.li,{children:["Updated ",(0,d.jsx)(n.code,{children:"package.path"})," to look for .pluto files in working directory by default"]}),"\n",(0,d.jsx)(n.li,{children:'Deprecated "pluto_case" and "pluto_default" (now "case" and "default", respectively)'}),"\n",(0,d.jsx)(n.li,{children:"Removed what was deprecated in 0.4.0 (sleep -> os.sleep, os.remove -> io.remove, os.rename -> io.rename)"}),"\n",(0,d.jsx)(n.li,{children:"Added execution time limit (optional, must be enabled in luaconf.h)"}),"\n",(0,d.jsx)(n.li,{children:"Added content moderation"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"Standard Library:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Added io.makedirs"}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"Standard Library (Soup):"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Added ",(0,d.jsx)(n.code,{children:"base64"})]}),"\n",(0,d.jsxs)(n.li,{children:["Added ",(0,d.jsx)(n.code,{children:"base58"})]}),"\n",(0,d.jsxs)(n.li,{children:["Added ",(0,d.jsx)(n.code,{children:"base32"})]}),"\n",(0,d.jsxs)(n.li,{children:["Added ",(0,d.jsx)(n.code,{children:"json"})]}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"045",children:"0.4.5"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Improved wording of some warning & error messages"}),"\n",(0,d.jsx)(n.li,{children:'Fixed excessive "duplicate local declaration" warnings'}),"\n",(0,d.jsxs)(n.li,{children:["Cherry-picked some Lua commits, so the following Lua bugs are now fixed:\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"'break' may not properly close variable in a 'for' loop"}),"\n",(0,d.jsx)(n.li,{children:"error message in 'table.remove'"}),"\n",(0,d.jsx)(n.li,{children:"'utf8.codes' accepts spurious continuation bytes"}),"\n",(0,d.jsx)(n.li,{children:"Negation in constant folding of '>>' may overflow"}),"\n",(0,d.jsx)(n.li,{children:"stack overflow with nesting of coroutine.close"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"044",children:"0.4.4"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Added math.rand as an alias for math.random"}),"\n",(0,d.jsx)(n.li,{children:"Changed unknown type hint to be warning instead of error"}),"\n",(0,d.jsx)(n.li,{children:"Reverted table.insert optimation due to unexpected behavior"}),"\n",(0,d.jsx)(n.li,{children:"Some minor tweaks"}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"043",children:"0.4.3"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Improved most error messages, and vastly improved the internal code for them."}),"\n",(0,d.jsxs)(n.li,{children:["These reserved tokens can be used as identifiers outside of their functional context: ",(0,d.jsx)(n.code,{children:"default"}),", ",(0,d.jsx)(n.code,{children:"case"})]}),"\n",(0,d.jsxs)(n.li,{children:["Optimized the performance of ",(0,d.jsx)(n.code,{children:"table.insert"}),". Roughly 3x faster, but still slightly slower than ",(0,d.jsx)(n.code,{children:"t[#t + 1]"})]}),"\n",(0,d.jsxs)(n.li,{children:["Pluto can now be built using ",(0,d.jsx)(n.a,{href:"https://github.com/calamity-inc/Sun",children:"Sun"}),"."]}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"042",children:"0.4.2"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Fixes a regression introduced in Pluto 0.4.1 that prevented the walrus operator from working within lambda functions that are passed as function arguments"}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"041",children:"0.4.1"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Updated lexer to tokenise in a separate pass\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"This fixes Pluto's error messages sometimes not showing the full line"}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.li,{children:"Disallowed use of the walrus operator within a function call because it was found to be more janky than expected"}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"040",children:"0.4.0"}),"\n",(0,d.jsx)(n.p,{children:"Additions:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Walrus Operator"}),"\n",(0,d.jsx)(n.li,{children:"Default parameters for functions."}),"\n",(0,d.jsxs)(n.li,{children:["New standard library: ",(0,d.jsx)(n.code,{children:"lcryptlib"}),", for various hash algorithms and cryptographic PRNGs."]}),"\n",(0,d.jsxs)(n.li,{children:["New warnings:\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Unreachable code."}),"\n",(0,d.jsx)(n.li,{children:"Too many function arguments."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"Improvements:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Switch case may now use variables."}),"\n",(0,d.jsx)(n.li,{children:"Shorthand ternary syntax from C/C++."}),"\n",(0,d.jsx)(n.li,{children:"Warnings can be configured with comments."}),"\n",(0,d.jsx)(n.li,{children:"Improved performance of some common arithmetic algorithms."}),"\n",(0,d.jsx)(n.li,{children:"VM Dumping has been rewritten for superb runtime detail on all opcodes, their arguments, their results, etc."}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"string.upper"})," & ",(0,d.jsx)(n.code,{children:"string.lower"})," take a second parameter indicating a specific index to change. Absence of this parameter preserves default behavior."]}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"032",children:"0.3.2"}),"\n",(0,d.jsx)(n.p,{children:"Improvements:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"io.copyto"})," will now overwrite existing files instead of throwing an exception."]}),"\n",(0,d.jsx)(n.li,{children:"Improve error handling of other exception-prone IO functions."}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"031",children:"0.3.1"}),"\n",(0,d.jsx)(n.p,{children:"Bugfix:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"String.split would previously invoke an infinite loop when an empty string is used as the delimiter."}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"030",children:"0.3.0"}),"\n",(0,d.jsx)(n.p,{children:"Additions:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Inlined method creation."}),"\n",(0,d.jsx)(n.li,{children:"STR in STR expressions."}),"\n",(0,d.jsx)(n.li,{children:"KEY in INDEXABLE expressions."}),"\n",(0,d.jsxs)(n.li,{children:["Generalized iteration, no need for ",(0,d.jsx)(n.code,{children:"pairs"}),"."]}),"\n",(0,d.jsx)(n.li,{children:(0,d.jsx)(n.code,{children:"io.listdir"})}),"\n",(0,d.jsx)(n.li,{children:"Reserved keywords as valid fields."}),"\n",(0,d.jsx)(n.li,{children:"Null-coalescing operator (w/ compound operator)."}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"continue N"})," & ",(0,d.jsx)(n.code,{children:"break N"})," for manipulating outer loops."]}),"\n",(0,d.jsx)(n.li,{children:"Optional type-hinting, with parser warnings."}),"\n",(0,d.jsx)(n.li,{children:'Safe accessor navigation, to avoid "attempt to index nil" errors for deeply nested fields.'}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"Changes:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"table.contains"})," now returns an index if found and nil otherwise (previously returned true or false)."]}),"\n"]}),"\n",(0,d.jsx)(n.p,{children:"Improvements:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Switch no longer has syntactic restrictions"}),"\n",(0,d.jsx)(n.li,{children:"Greater switch performance"}),"\n"]}),"\n",(0,d.jsxs)(n.p,{children:["Documentation for the new changes can be found ",(0,d.jsx)(n.a,{href:"https://plutolang.github.io/",children:"here"}),"."]}),"\n",(0,d.jsx)(n.h2,{id:"022",children:"0.2.2"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsxs)(n.li,{children:["Fixes a bug with the ",(0,d.jsx)(n.code,{children:"continue"})," keyword"]}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"021",children:"0.2.1"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Added VM Dump"}),"\n",(0,d.jsx)(n.li,{children:"Implemented long jump optimisation"}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"020",children:"0.2.0"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Added compile-time warnings for duplicate local declarations"}),"\n",(0,d.jsx)(n.li,{children:"Added optional ANSI color sequences in various error & warning messages"}),"\n",(0,d.jsx)(n.li,{children:"Added support for ternary expressions"}),"\n",(0,d.jsx)(n.li,{children:"Added continue statement"}),"\n",(0,d.jsx)(n.li,{children:"Added Table Freezing / Immutability"}),"\n",(0,d.jsx)(n.li,{children:"Added Switch/Case statements"}),"\n",(0,d.jsx)(n.li,{children:"Added user_data to global_State"}),"\n",(0,d.jsx)(n.li,{children:"Added !="}),"\n",(0,d.jsx)(n.li,{children:"Added compatibility mode"}),"\n",(0,d.jsx)(n.li,{children:"Added table.contains"}),"\n",(0,d.jsx)(n.li,{children:"Added new time functions to os api"}),"\n",(0,d.jsx)(n.li,{children:"Added negative string indexing"}),"\n",(0,d.jsx)(n.li,{children:"Added compound concatenation operator"}),"\n",(0,d.jsx)(n.li,{children:"Added new string functions"}),"\n",(0,d.jsx)(n.li,{children:"Added portable jumptable implementation that can be optionally enabled"}),"\n",(0,d.jsx)(n.li,{children:"Added REPEAT .. WHEN loop support"}),"\n",(0,d.jsx)(n.li,{children:"Added new IO library functions"}),"\n",(0,d.jsx)(n.li,{children:"Added _PVERSION"}),"\n",(0,d.jsx)(n.li,{children:"Implemented table length cache optimisation (2x speedup)"}),"\n",(0,d.jsx)(n.li,{children:"Implemented optional parentheses around string literals for method invocation"}),"\n",(0,d.jsx)(n.li,{children:"Increased local variable limit from 200 to 249"}),"\n",(0,d.jsx)(n.li,{children:"Rebased with Lua for latest bugfixes"}),"\n"]}),"\n",(0,d.jsx)(n.h2,{id:"010",children:"0.1.0"}),"\n",(0,d.jsx)(n.p,{children:"Initial version."}),"\n",(0,d.jsx)(n.p,{children:"Notable features:"}),"\n",(0,d.jsxs)(n.ul,{children:["\n",(0,d.jsx)(n.li,{children:"Lambda expressions"}),"\n",(0,d.jsx)(n.li,{children:"Arbitrary character insertion in numeral literals"}),"\n",(0,d.jsx)(n.li,{children:"Many compound operators"}),"\n",(0,d.jsxs)(n.li,{children:[(0,d.jsx)(n.code,{children:"**"})," exponent operator"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(a,{...e})}):a(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>o});var s=i(6540);const d={},l=s.createContext(d);function r(e){const n=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:r(e.components),s.createElement(l.Provider,{value:n},e.children)}}}]);