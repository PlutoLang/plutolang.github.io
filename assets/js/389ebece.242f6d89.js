"use strict";(self.webpackChunkpluto=self.webpackChunkpluto||[]).push([[3667],{108:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>t,toc:()=>c});var a=i(4848),s=i(8453);const o={},r=void 0,t={id:"New Features/Compiler Warnings",title:"Compiler Warnings",description:"Pluto offers optional compiler warnings for certain misbehaviors.",source:"@site/docs/New Features/Compiler Warnings.md",sourceDirName:"New Features",slug:"/New Features/Compiler Warnings",permalink:"/docs/New Features/Compiler Warnings",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Compile-Time Evaluation",permalink:"/docs/New Features/Compile-Time Evaluation"},next:{title:"Object-Oriented Programming",permalink:"/docs/New Features/Object-Oriented Programming"}},l={},c=[{value:"Warning Types",id:"warning-types",level:2},{value:"var-shadow",id:"var-shadow",level:3},{value:"global-shadow",id:"global-shadow",level:3},{value:"type-mismatch",id:"type-mismatch",level:3},{value:"unreachable-code",id:"unreachable-code",level:3},{value:"excessive-arguments",id:"excessive-arguments",level:3},{value:"bad-practice",id:"bad-practice",level:3},{value:"possible-typo",id:"possible-typo",level:3},{value:"non-portable-code",id:"non-portable-code",level:3},{value:"non-portable-name",id:"non-portable-name",level:3},{value:"non-portable-bytecode",id:"non-portable-bytecode",level:3},{value:"Compile-time Configuration",id:"compile-time-configuration",level:2},{value:"Changing Warning States",id:"changing-warning-states",level:3},{value:"Disable Warnings On Line",id:"disable-warnings-on-line",level:3}];function d(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"Pluto offers optional compiler warnings for certain misbehaviors."}),"\n",(0,a.jsx)(n.h2,{id:"warning-types",children:"Warning Types"}),"\n",(0,a.jsx)(n.h3,{id:"var-shadow",children:"var-shadow"}),"\n",(0,a.jsx)(n.p,{children:"This is raised when a new local is created with the same name as an existing one."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-pluto",metastring:"showLineNumbers",children:'local var = 5\ndo\n  local var = "hello"\nend\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"file.pluto:3: warning: duplicate local declaration [var-shadow]\n    3 | local var = \"hello\"\n      | ^^^^^^^^^^^^^^^^^^^ here: this shadows the initial declaration of 'var' on line 1.\n"})}),"\n",(0,a.jsx)(n.h3,{id:"global-shadow",children:"global-shadow"}),"\n",(0,a.jsx)(n.p,{children:"This is raised when a new local is created with the same name as a global variable."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-pluto",metastring:"showLineNumbers",children:"local table = {}\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"file.pluto:1: warning: duplicate global declaration [global-shadow]\n    1 | local table = {}\n      | ^^^^^^^^^^^^^^^^ here: this shadows the initial global definition of 'table'\n"})}),"\n",(0,a.jsxs)(n.p,{children:["To avoid excessive annoyance, this warning type is off by default. To enable it, scripters can use the ",(0,a.jsx)(n.a,{href:"#compile-time-configuration",children:"compile-time configuration"})," and integrators can define the ",(0,a.jsx)(n.code,{children:"PLUTO_WARN_GLOBAL_SHADOW"})," macro."]}),"\n",(0,a.jsxs)(n.p,{children:["Furthermore, this only covers the globals 'table', 'string', and 'arg' by default. Integrators can overwrite the ",(0,a.jsx)(n.code,{children:"PLUTO_COMMON_GLOBAL_NAMES"})," macro to change this list."]}),"\n",(0,a.jsx)(n.h3,{id:"type-mismatch",children:"type-mismatch"}),"\n",(0,a.jsx)(n.p,{children:"This is raised when the type of an expression doesn't match the hinted type."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-pluto",metastring:"showLineNumbers",children:'local var: number = 5\nvar = "hello"\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"file.pluto:2: warning: variable type mismatch [type-mismatch]\n    2 | var = \"hello\"\n      | ^^^^^^^^^^^^^ here: 'var' type-hinted as 'number', but assigned a string value.\n"})}),"\n",(0,a.jsx)(n.h3,{id:"unreachable-code",children:"unreachable-code"}),"\n",(0,a.jsx)(n.p,{children:"This is raised when a block of code will never be ran."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-pluto",metastring:"showLineNumbers",children:'for i = 1, 10 do\n  if i == 5 then\n    continue\n    print("message")\n  end\nend\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"file.pluto:4: warning: unreachable code [unreachable-code]\n    4 | print(\"message\")\n      | ^^^^^^^^^^^^^^^^ here: this code comes after an escaping 'continue' statement.\n"})}),"\n",(0,a.jsx)(n.h3,{id:"excessive-arguments",children:"excessive-arguments"}),"\n",(0,a.jsx)(n.p,{children:"This is raised when too many arguments are given to a non-vararg function."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-pluto",metastring:"showLineNumbers",children:"local function func(a, b, c)\n\nend\n\nfunc(1, 2, 3, 4)\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"file.pluto:5: warning: too many arguments [excessive-arguments]\n    5 | func(1, 2, 3, 4)\n      | ^^^^^^^^^^^^^^^^ here: expected 3 arguments, got 4.\n"})}),"\n",(0,a.jsx)(n.h3,{id:"bad-practice",children:"bad-practice"}),"\n",(0,a.jsx)(n.p,{children:"This is raised when the code does something stupid but not quite stupid enough to cause an error."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-pluto",metastring:"showLineNumbers",children:"pluto_use *\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"file.pluto:1: warning: 'pluto_use *' is a bad idea because future Pluto versions may add keywords that will break your script [bad-practice]\n    1 | pluto_use *\n      | ^^^^^^^^^^^ here: consider using 'pluto_use \"0.8.0\"' instead\n"})}),"\n",(0,a.jsx)(n.h3,{id:"possible-typo",children:"possible-typo"}),"\n",(0,a.jsx)(n.p,{children:"This is raised when the code seems syntactically incorrect."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-pluto",metastring:"showLineNumbers",children:"local magic const = 42\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"file.pluto:1: warning: Possibly mistyped attribute [possible-typo]\n    1 | local magic const = 42\n      | ^^^^^^^^^^^^^^^^^^^^^^ here: Did you mean '<const>'?\n"})}),"\n",(0,a.jsx)(n.h3,{id:"non-portable-code",children:"non-portable-code"}),"\n",(0,a.jsx)(n.p,{children:"This is raised when the code may not be considered valid by all Pluto environments due to compatibility mode."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-pluto",metastring:"showLineNumbers",children:'new exception("Not implemented")\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"file.pluto:1: warning: non-portable keyword usage [non-portable-code]\n    1 | new exception(\"Not implemented\")\n      | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ here: use 'pluto_new' instead, or 'pluto_use' this keyword: https://pluto.do/compat\n"})}),"\n",(0,a.jsxs)(n.p,{children:["To avoid excessive annoyance, this warning type is off by default. To enable it, scripters can use the ",(0,a.jsx)(n.a,{href:"#compile-time-configuration",children:"compile-time configuration"})," and integrators can define the ",(0,a.jsx)(n.code,{children:"PLUTO_WARN_NON_PORTABLE_CODE"})," macro."]}),"\n",(0,a.jsx)(n.h3,{id:"non-portable-name",children:"non-portable-name"}),"\n",(0,a.jsx)(n.p,{children:"This is raised when a variable name is only valid due to compatibility mode."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-pluto",metastring:"showLineNumbers",children:'local class = "fruit"\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"file.pluto:1: warning: 'class' is a non-portable name [non-portable-name]\n    1 | local class = \"fruit\"\n      | ^^^^^^^^^^^^^^^^^^^^^ here: use a different name, or use 'pluto_use' to disable this keyword: https://pluto.do/compat\n"})}),"\n",(0,a.jsxs)(n.p,{children:["To avoid excessive annoyance, this warning type is off by default. To enable it, scripters can use the ",(0,a.jsx)(n.a,{href:"#compile-time-configuration",children:"compile-time configuration"})," and integrators can define the ",(0,a.jsx)(n.code,{children:"PLUTO_WARN_NON_PORTABLE_NAME"})," macro."]}),"\n",(0,a.jsx)(n.h3,{id:"non-portable-bytecode",children:"non-portable-bytecode"}),"\n",(0,a.jsx)(n.p,{children:"This is raised when the code will not run in Lua environments (when compiling Pluto to bytecode)."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-pluto",metastring:"showLineNumbers",children:'print("h" in "hello")\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:'file.pluto:1: warning: non-portable operator usage [non-portable-bytecode]\n    1 | print("h" in "hello")\n      | ^^^^^^^^^^^^^^^^^^^^^ here: this operator generates bytecode which is incompatible with Lua.\n'})}),"\n",(0,a.jsxs)(n.p,{children:["To avoid excessive annoyance, this warning type is off by default. To enable it, scripters can use the ",(0,a.jsx)(n.a,{href:"#compile-time-configuration",children:"compile-time configuration"})," and integrators can define the ",(0,a.jsx)(n.code,{children:"PLUTO_WARN_NON_PORTABLE_BYTECODE"})," macro."]}),"\n",(0,a.jsx)(n.h2,{id:"compile-time-configuration",children:"Compile-time Configuration"}),"\n",(0,a.jsx)(n.p,{children:"The state of each warning type can be changed during compile-time and exception for certain code can be made."}),"\n",(0,a.jsx)(n.h3,{id:"changing-warning-states",children:"Changing Warning States"}),"\n",(0,a.jsx)(n.p,{children:"Warnings have 3 states: 'disable', 'enable', and 'error'. The 'error' state is a more aggressive version of 'enable' that causes compilation to fail if the warning type is raied."}),"\n",(0,a.jsxs)(n.p,{children:["To change the state of a warning, write a ",(0,a.jsx)(n.code,{children:"@pluto_warnings"})," comment with the state and warning type joined by a hyphen (-):"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-pluto",children:'local var = 5\ndo\n  -- @pluto_warnings: disable-var-shadow\n  local var = "hello"\n  -- @pluto_warnings: enable-var-shadow\nend\n'})}),"\n",(0,a.jsx)(n.p,{children:"For this, there is also the special type, 'all', which can be used e.g. to enable all warnings except for non-portable-bytecode:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-pluto",children:"-- @pluto_warnings: enable-all, disable-non-portable-bytecode\n"})}),"\n",(0,a.jsx)(n.h3,{id:"disable-warnings-on-line",children:"Disable Warnings On Line"}),"\n",(0,a.jsxs)(n.p,{children:["To disable warnings on a specific line of code, simply put a comment on the line before it with ",(0,a.jsx)(n.code,{children:"@pluto_warnings: disable-next"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-pluto",metastring:"showLineNumbers",children:'local var = 5\ndo\n  -- @pluto_warnings: disable-next\n  local var = "hello"\nend\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>t});var a=i(6540);const s={},o=a.createContext(s);function r(e){const n=a.useContext(o);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function t(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(o.Provider,{value:n},e.children)}}}]);