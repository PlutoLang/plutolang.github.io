"use strict";(self.webpackChunkpluto=self.webpackChunkpluto||[]).push([[1564],{8360:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var t=s(4848),r=s(8453);const o={sidebar_position:2},a=void 0,i={id:"New Features/Lambda Expressions",title:"Lambda Expressions",description:"Lambda expressions are an alternative way of writing anonymous functions.",source:"@site/docs/New Features/Lambda Expressions.md",sourceDirName:"New Features",slug:"/New Features/Lambda Expressions",permalink:"/docs/New Features/Lambda Expressions",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"In Expressions",permalink:"/docs/New Features/In Expressions"},next:{title:"Named Arguments",permalink:"/docs/New Features/Named Arguments"}},c={},l=[{value:"Try It Yourself",id:"try-it-yourself",level:4}];function u(e){const n={a:"a",code:"code",h4:"h4",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.p,{children:"Lambda expressions are an alternative way of writing anonymous functions."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-pluto",metastring:'showLineNumbers title="Lua Way"',children:'local s1 = "123"\nlocal s2 = s1:gsub(".", function(c) return tonumber(c) + 1 end)\nprint(s2) -- "234"\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-pluto",metastring:'title="Pluto Way"',children:'local s1 = "123"\nlocal s2 = s1:gsub(".", |c| -> tonumber(c) + 1)\nprint(s2) -- "234"\n'})}),"\n",(0,t.jsx)(n.h4,{id:"try-it-yourself",children:(0,t.jsx)(n.a,{href:"https://plutolang.github.io/web/#code=local%20str%20%3D%20%22123%22%0D%0Alocal%20inc_str%20%3D%20str%3Agsub(%22.%22%2C%20%7Cc%7C%20-%3E%20tonumber(c)%20%2B%201)%0D%0Aprint(inc_str)%20--%20%22234%22",children:"Try It Yourself"})}),"\n",(0,t.jsx)(n.p,{children:"As you can see, they take an expression after the arrow, the result of which is implicitly returned."}),"\n",(0,t.jsxs)(n.p,{children:["However, lambda expressions can also have full bodies using ",(0,t.jsx)(n.code,{children:"do"}),"...",(0,t.jsx)(n.code,{children:"end"}),":"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-pluto",children:'local add = |a, b| -> do\n    print($"Adding {a} and {b} together")\n    return a + b\nend\n'})}),"\n",(0,t.jsx)(n.p,{children:"They also support all other syntax you would expect of functions, such as type hints and default arguments."})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>i});var t=s(6540);const r={},o=t.createContext(r);function a(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);