"use strict";(self.webpackChunkpluto=self.webpackChunkpluto||[]).push([[6173],{3905:(e,r,t)=>{t.d(r,{Zo:()=>u,kt:()=>d});var a=t(7294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function l(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?l(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,a,n=function(e,r){if(null==e)return{};var t,a,n={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var i=a.createContext({}),p=function(e){var r=a.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},u=function(e){var r=p(e.components);return a.createElement(i.Provider,{value:r},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},h=a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,l=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(t),h=n,d=c["".concat(i,".").concat(h)]||c[h]||m[h]||l;return t?a.createElement(d,o(o({ref:r},u),{},{components:t})):a.createElement(d,o({ref:r},u))}));function d(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var l=t.length,o=new Array(l);o[0]=h;var s={};for(var i in r)hasOwnProperty.call(r,i)&&(s[i]=r[i]);s.originalType=e,s[c]="string"==typeof e?e:n,o[1]=s;for(var p=2;p<l;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},6953:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var a=t(7462),n=(t(7294),t(3905));const l={sidebar_position:3},o=void 0,s={unversionedId:"Runtime Environment/Library Reference/Crypto",id:"Runtime Environment/Library Reference/Crypto",title:"Crypto",description:"Must be included via require.",source:"@site/docs/Runtime Environment/Library Reference/Crypto.md",sourceDirName:"Runtime Environment/Library Reference",slug:"/Runtime Environment/Library Reference/Crypto",permalink:"/docs/Runtime Environment/Library Reference/Crypto",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Assert",permalink:"/docs/Runtime Environment/Library Reference/Assert"},next:{title:"Base32",permalink:"/docs/Runtime Environment/Library Reference/Base32"}},i={},p=[{value:"<code>crypto.lua</code>",id:"cryptolua",level:3},{value:"Parameters",id:"parameters",level:4},{value:"<code>crypto.md5</code>",id:"cryptomd5",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"<code>crypto.djb2</code>",id:"cryptodjb2",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"<code>crypto.fnv1</code>",id:"cryptofnv1",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"<code>crypto.joaat</code>",id:"cryptojoaat",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"<code>crypto.sdbm</code>",id:"cryptosdbm",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"<code>crypto.fnv1a</code>",id:"cryptofnv1a",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"<code>crypto.crc32</code>",id:"cryptocrc32",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"<code>crypto.lookup3</code>",id:"cryptolookup3",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"<code>crypto.times33</code>",id:"cryptotimes33",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"<code>crypto.sha256</code>",id:"cryptosha256",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"<code>crypto.murmur1</code>",id:"cryptomurmur1",level:3},{value:"Parameters",id:"parameters-11",level:4},{value:"<code>crypto.murmur2</code>",id:"cryptomurmur2",level:3},{value:"Parameters",id:"parameters-12",level:4},{value:"<code>crypto.murmur2a</code>",id:"cryptomurmur2a",level:3},{value:"Parameters",id:"parameters-13",level:4},{value:"<code>crypto.murmur64a</code>",id:"cryptomurmur64a",level:3},{value:"Parameters",id:"parameters-14",level:4},{value:"<code>crypto.murmur64b</code>",id:"cryptomurmur64b",level:3},{value:"Parameters",id:"parameters-15",level:4},{value:"<code>crypto.murmur2neutral</code>",id:"cryptomurmur2neutral",level:3},{value:"Parameters",id:"parameters-16",level:4},{value:"<code>crypto.random</code>",id:"cryptorandom",level:3},{value:"Parameters",id:"parameters-17",level:4}],u={toc:p},c="wrapper";function m(e){let{components:r,...t}=e;return(0,n.kt)(c,(0,a.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"Must be included via ",(0,n.kt)("inlineCode",{parentName:"p"},"require"),"."),(0,n.kt)("h3",{id:"cryptolua"},(0,n.kt)("inlineCode",{parentName:"h3"},"crypto.lua")),(0,n.kt)("p",null,"Hash a string using Lua's version of the DJB2 non-cryptographic hashing algorithm."),(0,n.kt)("h4",{id:"parameters"},"Parameters"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"The string to hash.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local crypto = require("crypto")\nlocal str = "hello"\nassert(crypto.lua(str) == 2871868277)\n')),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"cryptomd5"},(0,n.kt)("inlineCode",{parentName:"h3"},"crypto.md5")),(0,n.kt)("p",null,"Hash a string using the MD5 semi-cryptographic hashing algorithm."),(0,n.kt)("h4",{id:"parameters-1"},"Parameters"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"The string to hash.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local crypto = require("crypto")\nlocal str = "hello"\nassert(crypto.md5(str) == "5eb63bbbe01eeed093cb22bb8f5acdc3")\n')),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"cryptodjb2"},(0,n.kt)("inlineCode",{parentName:"h3"},"crypto.djb2")),(0,n.kt)("p",null,"Hash a string using the DJB2 non-cryptographic hashing algorithm."),(0,n.kt)("h4",{id:"parameters-2"},"Parameters"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"The string to hash.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local crypto = require("crypto")\nlocal str = "hello"\nassert(crypto.djb2(str) == 894552257)\n')),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"cryptofnv1"},(0,n.kt)("inlineCode",{parentName:"h3"},"crypto.fnv1")),(0,n.kt)("p",null,"Hash a string using the FNV1 non-cryptographic hashing algorithm."),(0,n.kt)("h4",{id:"parameters-3"},"Parameters"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"The string to hash.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local crypto = require("crypto")\nlocal str = "hello"\nassert(crypto.fnv1(str) == 9065573210506989167)\n')),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"cryptojoaat"},(0,n.kt)("inlineCode",{parentName:"h3"},"crypto.joaat")),(0,n.kt)("p",null,"Hash a string using the JOAAT non-cryptographic hashing algorithm."),(0,n.kt)("h4",{id:"parameters-4"},"Parameters"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"The string to hash.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local crypto = require("crypto")\nlocal str = "hello"\nassert(crypto.joaat(str) == 1045060183)\n')),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"cryptosdbm"},(0,n.kt)("inlineCode",{parentName:"h3"},"crypto.sdbm")),(0,n.kt)("p",null,"Hash a string using the SDBM non-cryptographic hashing algorithm."),(0,n.kt)("h4",{id:"parameters-5"},"Parameters"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"The string to hash.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local crypto = require("crypto")\nlocal str = "hello"\nassert(crypto.sdbm(str) == 430867652)\n')),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"cryptofnv1a"},(0,n.kt)("inlineCode",{parentName:"h3"},"crypto.fnv1a")),(0,n.kt)("p",null,"Hash a string using the FNV1A non-cryptographic hashing algorithm."),(0,n.kt)("h4",{id:"parameters-6"},"Parameters"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"The string to hash.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local crypto = require("crypto")\nlocal str = "hello"\nassert(crypto.fnv1a(str) == 8618312879776256743)\n')),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"cryptocrc32"},(0,n.kt)("inlineCode",{parentName:"h3"},"crypto.crc32")),(0,n.kt)("p",null,"Hash a string using the CRC32 non-cryptographic hashing algorithm."),(0,n.kt)("h4",{id:"parameters-7"},"Parameters"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"The string to hash."),(0,n.kt)("li",{parentName:"ol"},"The initial value for the hash. By default, this is zero.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local crypto = require("crypto")\nlocal str = "hello"\nassert(crypto.crc32(str) == 222957957)\n')),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"cryptolookup3"},(0,n.kt)("inlineCode",{parentName:"h3"},"crypto.lookup3")),(0,n.kt)("p",null,"Hash a string using the Lookup3 non-cryptographic hashing algorithm."),(0,n.kt)("h4",{id:"parameters-8"},"Parameters"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"The string to hash.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local crypto = require("crypto")\nlocal str = "hello"\nassert(crypto.lookup3(str) == 1252609637)\n')),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"cryptotimes33"},(0,n.kt)("inlineCode",{parentName:"h3"},"crypto.times33")),(0,n.kt)("p",null,"Hash a string using the Times33 non-cryptographic hashing algorithm."),(0,n.kt)("h4",{id:"parameters-9"},"Parameters"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"The string to hash.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local crypto = require("crypto")\nlocal str = "hello"\nassert(crypto.times33(str) == 3889643616)\n')),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"cryptosha256"},(0,n.kt)("inlineCode",{parentName:"h3"},"crypto.sha256")),(0,n.kt)("p",null,"Hash a string using the SHA-256 cryptographic hashing algorithm."),(0,n.kt)("h4",{id:"parameters-10"},"Parameters"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"The string to hash."),(0,n.kt)("li",{parentName:"ol"},"When set to true, returns raw binary data. false outputs lowercase hex digits. By default, this is false.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local crypto = require("crypto")\nlocal str = "hello world"\nassert(crypto.sha256(str) == "b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9")\nassert(crypto.sha256(str, true) == "\\xb9\\x4d\\x27\\xb9\\x93\\x4d\\x3e\\x08\\xa5\\x2e\\x52\\xd7\\xda\\x7d\\xab\\xfa\\xc4\\x84\\xef\\xe3\\x7a\\x53\\x80\\xee\\x90\\x88\\xf7\\xac\\xe2\\xef\\xcd\\xe9")\n')),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"cryptomurmur1"},(0,n.kt)("inlineCode",{parentName:"h3"},"crypto.murmur1")),(0,n.kt)("p",null,"Hash a string using the Murmur1 non-cryptographic hashing algorithm."),(0,n.kt)("h4",{id:"parameters-11"},"Parameters"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"The string to hash.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local crypto = require("crypto")\nlocal str = "hello"\nassert(crypto.murmur1(str) == 3154674178)\n')),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"cryptomurmur2"},(0,n.kt)("inlineCode",{parentName:"h3"},"crypto.murmur2")),(0,n.kt)("p",null,"Hash a string using the Murmur2 non-cryptographic hashing algorithm."),(0,n.kt)("h4",{id:"parameters-12"},"Parameters"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"The string to hash.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local crypto = require("crypto")\nlocal str = "hello"\nassert(crypto.murmur2(str) == 1151865881)\n')),(0,n.kt)("h3",{id:"cryptomurmur2a"},(0,n.kt)("inlineCode",{parentName:"h3"},"crypto.murmur2a")),(0,n.kt)("p",null,"Hash a string using the Murmur2A non-cryptographic hashing algorithm."),(0,n.kt)("h4",{id:"parameters-13"},"Parameters"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"The string to hash.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local crypto = require("crypto")\nlocal str = "hello"\nassert(crypto.murmur2a(str) == 2650573207)\n')),(0,n.kt)("h3",{id:"cryptomurmur64a"},(0,n.kt)("inlineCode",{parentName:"h3"},"crypto.murmur64a")),(0,n.kt)("p",null,"Hash a string using the Murmur64A non-cryptographic hashing algorithm."),(0,n.kt)("h4",{id:"parameters-14"},"Parameters"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"The string to hash.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local crypto = require("crypto")\nlocal str = "hello"\nassert(crypto.murmur64a(str) == -3190198453633110066)\n')),(0,n.kt)("h3",{id:"cryptomurmur64b"},(0,n.kt)("inlineCode",{parentName:"h3"},"crypto.murmur64b")),(0,n.kt)("p",null,"Hash a string using the Murmur64A non-cryptographic hashing algorithm."),(0,n.kt)("h4",{id:"parameters-15"},"Parameters"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"The string to hash.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local crypto = require("crypto")\nlocal str = "hello"\nassert(crypto.murmur64b(str) == 7088720765356542432)\n')),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"cryptomurmur2neutral"},(0,n.kt)("inlineCode",{parentName:"h3"},"crypto.murmur2neutral")),(0,n.kt)("p",null,"Hash a string using the Murmur2Neutral non-cryptographic hashing algorithm."),(0,n.kt)("h4",{id:"parameters-16"},"Parameters"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"The string to hash.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local crypto = require("crypto")\nlocal str = "hello"\nassert(crypto.murmur2neutral(str) == 1151865881)\n')),(0,n.kt)("h3",{id:"cryptorandom"},(0,n.kt)("inlineCode",{parentName:"h3"},"crypto.random")),(0,n.kt)("p",null,"The ",(0,n.kt)("inlineCode",{parentName:"p"},"crypto.random")," function uses your operating system's default PRNG. "),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"On Linux-based systems, this is ",(0,n.kt)("inlineCode",{parentName:"li"},"/dev/urandom"),"."),(0,n.kt)("li",{parentName:"ul"},"On Windows, this is ",(0,n.kt)("inlineCode",{parentName:"li"},"BCryptGenRandom"),".")),(0,n.kt)("p",null,"This is a cryptographically-secure PRNG when your system can provide those services. However, if it does not, then this is not cryptographically secure. Either way, it provides good randomness."),(0,n.kt)("h4",{id:"parameters-17"},"Parameters"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"The minimum value to return."),(0,n.kt)("li",{parentName:"ol"},"The maximum value to return, as a range.")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local crypto = require("crypto")\nassert(crypto.random(1, 10) < 11)\n')))}m.isMDXComponent=!0}}]);