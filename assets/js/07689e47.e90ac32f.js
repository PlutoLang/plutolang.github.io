"use strict";(self.webpackChunkpluto=self.webpackChunkpluto||[]).push([[1648],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=o.createContext({}),s=function(e){var t=o.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return o.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=s(n),m=r,f=c["".concat(p,".").concat(m)]||c[m]||d[m]||a;return n?o.createElement(f,i(i({ref:t},u),{},{components:n})):o.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:r,i[1]=l;for(var s=2;s<a;s++)i[s]=n[s];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3289:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var o=n(7462),r=(n(7294),n(3905));const a={},i=void 0,l={unversionedId:"QoL Improvements/Improved Iteration",id:"QoL Improvements/Improved Iteration",title:"Improved Iteration",description:"Pluto improves iteration in a few ways.",source:"@site/docs/QoL Improvements/Improved Iteration.md",sourceDirName:"QoL Improvements",slug:"/QoL Improvements/Improved Iteration",permalink:"/docs/QoL Improvements/Improved Iteration",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Boolean Concatenation",permalink:"/docs/QoL Improvements/Boolean Concatenation"},next:{title:"Optional Parentheses",permalink:"/docs/QoL Improvements/Optional Parentheses"}},p={},s=[{value:"Generalized Iteration",id:"generalized-iteration",level:2},{value:"For As Loop",id:"for-as-loop",level:2}],u={toc:s},c="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Pluto improves iteration in a few ways."),(0,r.kt)("h2",{id:"generalized-iteration"},"Generalized Iteration"),(0,r.kt)("p",null,"It's redundant to call the ",(0,r.kt)("inlineCode",{parentName:"p"},"pairs")," function for simple iteration. This action is now optional, and handled by the virtual machine if the function is absent."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-pluto",metastring:'showLineNumbers title="New Code"',showLineNumbers:!0,title:'"New','Code"':!0},'local t = { 1, 2, 3, "hello", "world" }\nfor key, value in t do\n    print(key, value)\nend\n')),(0,r.kt)("p",null,"When you omit the function from the loop preparation, ",(0,r.kt)("inlineCode",{parentName:"p"},"pairs")," is implicitly inserted. So, that code is identical to this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-pluto",metastring:'showLineNumbers title="Old Code"',showLineNumbers:!0,title:'"Old','Code"':!0},'local t = { 1, 2, 3, "hello", "world" }\nfor key, value in pairs(t) do\n    print(key, value)\nend\n')),(0,r.kt)("p",null,"This is compatible with for-loop optimizations."),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"The bytecode of this feature is not backwards-compatible with Lua.")),(0,r.kt)("h2",{id:"for-as-loop"},"For As Loop"),(0,r.kt)("p",null,"When you only want to iterate over the values of a table, you can use Pluto's for-as syntax."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-pluto",metastring:'showLineNumbers title="New Code"',showLineNumbers:!0,title:'"New','Code"':!0},'local t = { 1, 2, 3, "hello", "world" }\nfor t as value do\n    print(value)\nend\n')),(0,r.kt)("p",null,"That code is identical to this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-pluto",metastring:'showLineNumbers title="Old Code"',showLineNumbers:!0,title:'"Old','Code"':!0},'local t = { 1, 2, 3, "hello", "world" }\nfor _, value in t do\n    print(value)\nend\n')),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The bytecode of this feature is only backwards-compatible with Lua when ",(0,r.kt)("inlineCode",{parentName:"p"},"pairs")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"ipairs")," is used.")))}d.isMDXComponent=!0}}]);