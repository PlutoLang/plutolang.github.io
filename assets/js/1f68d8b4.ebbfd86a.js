"use strict";(self.webpackChunkpluto=self.webpackChunkpluto||[]).push([[1662],{7743:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>a,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>m});var n=o(4848),s=o(8453);const i={},r=void 0,c={id:"QoL Improvements/Removed Locals Limit",title:"Removed Locals Limit",description:"Pluto removes the locals limit, allowing you to use compile-time constants, including enums, as much as you want.",source:"@site/docs/QoL Improvements/Removed Locals Limit.md",sourceDirName:"QoL Improvements",slug:"/QoL Improvements/Removed Locals Limit",permalink:"/docs/QoL Improvements/Removed Locals Limit",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Optional Parentheses",permalink:"/docs/QoL Improvements/Optional Parentheses"},next:{title:"Reserved Identifiers",permalink:"/docs/QoL Improvements/Reserved Identifiers"}},a={},m=[];function l(e){const t={p:"p",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.p,{children:"Pluto removes the locals limit, allowing you to use compile-time constants, including enums, as much as you want."}),"\n",(0,n.jsx)(t.p,{children:"Note that you are still limited to 255 registers, so you can't have infinite dynamic variables per function."})]})}function u(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(l,{...e})}):l(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>r,x:()=>c});var n=o(6540);const s={},i=n.createContext(s);function r(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);