"use strict";(self.webpackChunkpluto=self.webpackChunkpluto||[]).push([[3022],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>d});var a=t(7294);function l(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function n(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);r&&(a=a.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?n(Object(t),!0).forEach((function(r){l(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):n(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,a,l=function(e,r){if(null==e)return{};var t,a,l={},n=Object.keys(e);for(a=0;a<n.length;a++)t=n[a],r.indexOf(t)>=0||(l[t]=e[t]);return l}(e,r);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(a=0;a<n.length;a++)t=n[a],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var o=a.createContext({}),m=function(e){var r=a.useContext(o),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},p=function(e){var r=m(e.components);return a.createElement(o.Provider,{value:r},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var r=e.children;return a.createElement(a.Fragment,{},r)}},c=a.forwardRef((function(e,r){var t=e.components,l=e.mdxType,n=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=m(t),c=l,d=u["".concat(o,".").concat(c)]||u[c]||h[c]||n;return t?a.createElement(d,s(s({ref:r},p),{},{components:t})):a.createElement(d,s({ref:r},p))}));function d(e,r){var t=arguments,l=r&&r.mdxType;if("string"==typeof e||l){var n=t.length,s=new Array(n);s[0]=c;var i={};for(var o in r)hasOwnProperty.call(r,o)&&(i[o]=r[o]);i.originalType=e,i[u]="string"==typeof e?e:l,s[1]=i;for(var m=2;m<n;m++)s[m]=t[m];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}c.displayName="MDXCreateElement"},1776:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>o,contentTitle:()=>s,default:()=>h,frontMatter:()=>n,metadata:()=>i,toc:()=>m});var a=t(7462),l=(t(7294),t(3905));const n={sidebar_position:7},s=void 0,i={unversionedId:"Runtime Environment/Crypto Functions",id:"Runtime Environment/Crypto Functions",title:"Crypto Functions",description:"Functions regarding cryptography, implemented by Pluto.",source:"@site/docs/Runtime Environment/Crypto Functions.md",sourceDirName:"Runtime Environment",slug:"/Runtime Environment/Crypto Functions",permalink:"/docs/Runtime Environment/Crypto Functions",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Global Functions",permalink:"/docs/Runtime Environment/Global Functions"},next:{title:"Coroutine Functions",permalink:"/docs/Runtime Environment/Coroutine Functions"}},o={},m=[{value:"Hashing Algorithms",id:"hashing-algorithms",level:2},{value:"Lua",id:"lua",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Example",id:"example",level:4},{value:"MD5",id:"md5",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Example",id:"example-1",level:4},{value:"DJB2",id:"djb2",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Example",id:"example-2",level:4},{value:"FNV1",id:"fnv1",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Example",id:"example-3",level:4},{value:"JOAAT",id:"joaat",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Example",id:"example-4",level:4},{value:"SDBM",id:"sdbm",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Example",id:"example-5",level:4},{value:"FNV1A",id:"fnv1a",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Example",id:"example-6",level:4},{value:"CRC32",id:"crc32",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Example",id:"example-7",level:4},{value:"Lookup3",id:"lookup3",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Example",id:"example-8",level:4},{value:"Times33",id:"times33",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Example",id:"example-9",level:4},{value:"SHA-256",id:"sha-256",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"Example",id:"example-10",level:4},{value:"Murmur1",id:"murmur1",level:3},{value:"Parameters",id:"parameters-11",level:4},{value:"Example",id:"example-11",level:4},{value:"Murmur2",id:"murmur2",level:3},{value:"Parameters",id:"parameters-12",level:4},{value:"Example",id:"example-12",level:4},{value:"Murmur2A",id:"murmur2a",level:3},{value:"Parameters",id:"parameters-13",level:4},{value:"Example",id:"example-13",level:4},{value:"Murmur64A",id:"murmur64a",level:3},{value:"Parameters",id:"parameters-14",level:4},{value:"Example",id:"example-14",level:4},{value:"Murmur64B",id:"murmur64b",level:3},{value:"Parameters",id:"parameters-15",level:4},{value:"Example",id:"example-15",level:4},{value:"Murmur2Neutral",id:"murmur2neutral",level:3},{value:"Parameters",id:"parameters-16",level:4},{value:"Example",id:"example-16",level:4},{value:"PRNGs",id:"prngs",level:2},{value:"random",id:"random",level:3},{value:"Parameters",id:"parameters-17",level:4},{value:"Example",id:"example-17",level:4},{value:"Misc Functions",id:"misc-functions",level:2},{value:"hexdigest",id:"hexdigest",level:3},{value:"Parameters",id:"parameters-18",level:4},{value:"Example",id:"example-18",level:4}],p={toc:m},u="wrapper";function h(e){let{components:r,...t}=e;return(0,l.kt)(u,(0,a.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Functions regarding cryptography, implemented by Pluto."),(0,l.kt)("h2",{id:"hashing-algorithms"},"Hashing Algorithms"),(0,l.kt)("h3",{id:"lua"},"Lua"),(0,l.kt)("p",null,"Hash a string using Lua's version of the DJB2 non-cryptographic hashing algorithm."),(0,l.kt)("h4",{id:"parameters"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The string to hash.")),(0,l.kt)("h4",{id:"example"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local crypto = require("crypto")\nlocal str = "hello"\nassert(crypto.lua(str) == 2871868277)\n')),(0,l.kt)("h3",{id:"md5"},"MD5"),(0,l.kt)("p",null,"Hash a string using the MD5 semi-cryptographic hashing algorithm."),(0,l.kt)("h4",{id:"parameters-1"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The string to hash.")),(0,l.kt)("h4",{id:"example-1"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local crypto = require("crypto")\nlocal str = "hello"\nassert(crypto.md5(str) == "5eb63bbbe01eeed093cb22bb8f5acdc3")\n')),(0,l.kt)("h3",{id:"djb2"},"DJB2"),(0,l.kt)("p",null,"Hash a string using the DJB2 non-cryptographic hashing algorithm."),(0,l.kt)("h4",{id:"parameters-2"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The string to hash.")),(0,l.kt)("h4",{id:"example-2"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local crypto = require("crypto")\nlocal str = "hello"\nassert(crypto.djb2(str) == 894552257)\n')),(0,l.kt)("h3",{id:"fnv1"},"FNV1"),(0,l.kt)("p",null,"Hash a string using the FNV1 non-cryptographic hashing algorithm."),(0,l.kt)("h4",{id:"parameters-3"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The string to hash.")),(0,l.kt)("h4",{id:"example-3"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local crypto = require("crypto")\nlocal str = "hello"\nassert(crypto.fnv1(str) == 9065573210506989167)\n')),(0,l.kt)("h3",{id:"joaat"},"JOAAT"),(0,l.kt)("p",null,"Hash a string using the JOAAT non-cryptographic hashing algorithm."),(0,l.kt)("h4",{id:"parameters-4"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The string to hash.")),(0,l.kt)("h4",{id:"example-4"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local crypto = require("crypto")\nlocal str = "hello"\nassert(crypto.joaat(str) == 1045060183)\n')),(0,l.kt)("h3",{id:"sdbm"},"SDBM"),(0,l.kt)("p",null,"Hash a string using the SDBM non-cryptographic hashing algorithm."),(0,l.kt)("h4",{id:"parameters-5"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The string to hash.")),(0,l.kt)("h4",{id:"example-5"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local crypto = require("crypto")\nlocal str = "hello"\nassert(crypto.sdbm(str) == 430867652)\n')),(0,l.kt)("h3",{id:"fnv1a"},"FNV1A"),(0,l.kt)("p",null,"Hash a string using the FNV1A non-cryptographic hashing algorithm."),(0,l.kt)("h4",{id:"parameters-6"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The string to hash.")),(0,l.kt)("h4",{id:"example-6"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local crypto = require("crypto")\nlocal str = "hello"\nassert(crypto.fnv1a(str) == 8618312879776256743)\n')),(0,l.kt)("h3",{id:"crc32"},"CRC32"),(0,l.kt)("p",null,"Hash a string using the CRC32 non-cryptographic hashing algorithm."),(0,l.kt)("h4",{id:"parameters-7"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The string to hash."),(0,l.kt)("li",{parentName:"ol"},"The initial value for the hash. By default, this is zero.")),(0,l.kt)("h4",{id:"example-7"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local crypto = require("crypto")\nlocal str = "hello"\nassert(crypto.crc32(str) == 222957957)\n')),(0,l.kt)("h3",{id:"lookup3"},"Lookup3"),(0,l.kt)("p",null,"Hash a string using the Lookup3 non-cryptographic hashing algorithm."),(0,l.kt)("h4",{id:"parameters-8"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The string to hash.")),(0,l.kt)("h4",{id:"example-8"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local crypto = require("crypto")\nlocal str = "hello"\nassert(crypto.lookup3(str) == 1252609637)\n')),(0,l.kt)("h3",{id:"times33"},"Times33"),(0,l.kt)("p",null,"Hash a string using the Times33 non-cryptographic hashing algorithm."),(0,l.kt)("h4",{id:"parameters-9"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The string to hash.")),(0,l.kt)("h4",{id:"example-9"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local crypto = require("crypto")\nlocal str = "hello"\nassert(crypto.times33(str) == 3889643616)\n')),(0,l.kt)("h3",{id:"sha-256"},"SHA-256"),(0,l.kt)("p",null,"Hash a string using the SHA-256 cryptographic hashing algorithm."),(0,l.kt)("h4",{id:"parameters-10"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The string to hash.")),(0,l.kt)("h4",{id:"example-10"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local crypto = require("crypto")\nlocal str = "hello"\nassert(crypto.sha256(str) == "b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9")\n')),(0,l.kt)("h3",{id:"murmur1"},"Murmur1"),(0,l.kt)("p",null,"Hash a string using the Murmur1 non-cryptographic hashing algorithm."),(0,l.kt)("h4",{id:"parameters-11"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The string to hash.")),(0,l.kt)("h4",{id:"example-11"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local crypto = require("crypto")\nlocal str = "hello"\nassert(crypto.murmur1(str) == 3154674178)\n')),(0,l.kt)("h3",{id:"murmur2"},"Murmur2"),(0,l.kt)("p",null,"Hash a string using the Murmur2 non-cryptographic hashing algorithm."),(0,l.kt)("h4",{id:"parameters-12"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The string to hash.")),(0,l.kt)("h4",{id:"example-12"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local crypto = require("crypto")\nlocal str = "hello"\nassert(crypto.murmur2(str) == 1151865881)\n')),(0,l.kt)("h3",{id:"murmur2a"},"Murmur2A"),(0,l.kt)("p",null,"Hash a string using the Murmur2A non-cryptographic hashing algorithm."),(0,l.kt)("h4",{id:"parameters-13"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The string to hash.")),(0,l.kt)("h4",{id:"example-13"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local crypto = require("crypto")\nlocal str = "hello"\nassert(crypto.murmur2a(str) == 2650573207)\n')),(0,l.kt)("h3",{id:"murmur64a"},"Murmur64A"),(0,l.kt)("p",null,"Hash a string using the Murmur64A non-cryptographic hashing algorithm."),(0,l.kt)("h4",{id:"parameters-14"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The string to hash.")),(0,l.kt)("h4",{id:"example-14"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local crypto = require("crypto")\nlocal str = "hello"\nassert(crypto.murmur64a(str) == -3190198453633110066)\n')),(0,l.kt)("h3",{id:"murmur64b"},"Murmur64B"),(0,l.kt)("p",null,"Hash a string using the Murmur64A non-cryptographic hashing algorithm."),(0,l.kt)("h4",{id:"parameters-15"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The string to hash.")),(0,l.kt)("h4",{id:"example-15"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local crypto = require("crypto")\nlocal str = "hello"\nassert(crypto.murmur64b(str) == 7088720765356542432)\n')),(0,l.kt)("h3",{id:"murmur2neutral"},"Murmur2Neutral"),(0,l.kt)("p",null,"Hash a string using the Murmur2Neutral non-cryptographic hashing algorithm."),(0,l.kt)("h4",{id:"parameters-16"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The string to hash.")),(0,l.kt)("h4",{id:"example-16"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local crypto = require("crypto")\nlocal str = "hello"\nassert(crypto.murmur2neutral(str) == 1151865881)\n')),(0,l.kt)("h2",{id:"prngs"},"PRNGs"),(0,l.kt)("h3",{id:"random"},"random"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"crypto.random")," function uses your operating system's default PRNG. "),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"On Linux-based systems, this is ",(0,l.kt)("inlineCode",{parentName:"li"},"/dev/urandom"),"."),(0,l.kt)("li",{parentName:"ul"},"On Windows, this is ",(0,l.kt)("inlineCode",{parentName:"li"},"BCryptGenRandom"),".")),(0,l.kt)("p",null,"This is a cryptographically-secure PRNG when your system can provide those services. However, if it does not, then this is not cryptographically secure. Either way, it provides good randomness."),(0,l.kt)("h4",{id:"parameters-17"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The minimum value to return."),(0,l.kt)("li",{parentName:"ol"},"The maximum value to return, as a range.")),(0,l.kt)("h4",{id:"example-17"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local crypto = require("crypto")\nassert(crypto.random(1, 10) < 11)\n')),(0,l.kt)("h2",{id:"misc-functions"},"Misc Functions"),(0,l.kt)("h3",{id:"hexdigest"},"hexdigest"),(0,l.kt)("p",null,"Converts an integer into its hexadecimal representation, as a string."),(0,l.kt)("h4",{id:"parameters-18"},"Parameters"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},"The string to convert.")),(0,l.kt)("h4",{id:"example-18"},"Example"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-pluto"},'local crypto = require("crypto")\nlocal hash = crypto.joaat("hello world")\nprint("hash: " .. hash)\nprint("digest: " .. crypto.hexdigest(hash))\n--[[\n    hash: 1045060183\n    digest: "0x3e4a5a57"\n--]]\nassert(tonumber(crypto.hexdigest(hash)) == hash)\n')))}h.isMDXComponent=!0}}]);