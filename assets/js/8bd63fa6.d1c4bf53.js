"use strict";(self.webpackChunkpluto=self.webpackChunkpluto||[]).push([[457],{3905:(e,a,t)=>{t.d(a,{Zo:()=>c,kt:()=>b});var n=t(7294);function d(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){d(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function l(e,a){if(null==e)return{};var t,n,d=function(e,a){if(null==e)return{};var t,n,d={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(d[t]=e[t]);return d}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(d[t]=e[t])}return d}var s=n.createContext({}),i=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},c=function(e){var a=i(e.components);return n.createElement(s.Provider,{value:a},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var t=e.components,d=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=i(t),m=d,b=p["".concat(s,".").concat(m)]||p[m]||u[m]||r;return t?n.createElement(b,o(o({ref:a},c),{},{components:t})):n.createElement(b,o({ref:a},c))}));function b(e,a){var t=arguments,d=a&&a.mdxType;if("string"==typeof e||d){var r=t.length,o=new Array(r);o[0]=m;var l={};for(var s in a)hasOwnProperty.call(a,s)&&(l[s]=a[s]);l.originalType=e,l[p]="string"==typeof e?e:d,o[1]=l;for(var i=2;i<r;i++)o[i]=t[i];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5949:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>i});var n=t(7462),d=(t(7294),t(3905));const r={sidebar_position:5},o=void 0,l={unversionedId:"Runtime Environment/Soup Extensions",id:"Runtime Environment/Soup Extensions",title:"Soup Extensions",description:"If you compile Pluto with Soup, then you get access to these additional libraries. They must be included via require.",source:"@site/docs/Runtime Environment/Soup Extensions.md",sourceDirName:"Runtime Environment",slug:"/Runtime Environment/Soup Extensions",permalink:"/docs/Runtime Environment/Soup Extensions",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"String Functions",permalink:"/docs/Runtime Environment/String Functions"},next:{title:"Global Functions",permalink:"/docs/Runtime Environment/Global Functions"}},s={},i=[{value:"base64",id:"base64",level:2},{value:"base64.encode(data, pad)",id:"base64encodedata-pad",level:3},{value:"Parameters:",id:"parameters",level:4},{value:"base64.decode(data)",id:"base64decodedata",level:3},{value:"Parameters:",id:"parameters-1",level:4},{value:"base64.url_encode(data, pad)",id:"base64url_encodedata-pad",level:3},{value:"base64.url_decode(data)",id:"base64url_decodedata",level:3},{value:"base58",id:"base58",level:2},{value:"base58.decode(data)",id:"base58decodedata",level:3},{value:"Parameters:",id:"parameters-2",level:4},{value:"base58.is_valid(data)",id:"base58is_validdata",level:3},{value:"base32",id:"base32",level:2},{value:"base32.encode(data, pad)",id:"base32encodedata-pad",level:3},{value:"Parameters:",id:"parameters-3",level:4},{value:"base32.decode(data)",id:"base32decodedata",level:3},{value:"Parameters:",id:"parameters-4",level:4},{value:"json",id:"json",level:2},{value:"json.encode(data, pretty)",id:"jsonencodedata-pretty",level:3},{value:"Parameters:",id:"parameters-5",level:4},{value:"json.decode(data)",id:"jsondecodedata",level:3},{value:"Parameters:",id:"parameters-6",level:4}],c={toc:i},p="wrapper";function u(e){let{components:a,...t}=e;return(0,d.kt)(p,(0,n.Z)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,d.kt)("p",null,"If you compile Pluto with Soup, then you get access to these additional libraries. They must be included via ",(0,d.kt)("inlineCode",{parentName:"p"},"require"),"."),(0,d.kt)("h2",{id:"base64"},"base64"),(0,d.kt)("h3",{id:"base64encodedata-pad"},"base64.encode(data, pad)"),(0,d.kt)("p",null,"Returns a base64-encoded string."),(0,d.kt)("h4",{id:"parameters"},"Parameters:"),(0,d.kt)("ol",null,(0,d.kt)("li",{parentName:"ol"},(0,d.kt)("inlineCode",{parentName:"li"},"data")," \u2014 A string of data to encode."),(0,d.kt)("li",{parentName:"ol"},(0,d.kt)("inlineCode",{parentName:"li"},"pad")," \u2014 A boolean indicating whether or not to apply padding to the encoded result.")),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-pluto"},'local base64 = require("base64")\nlocal data, encoded\n\ndata = "Hello, World!"\nencoded = base64.encode(data, true)\n--[[\n    SGVsbG8sIFdvcmxkIQ==\n--]]\n')),(0,d.kt)("h3",{id:"base64decodedata"},"base64.decode(data)"),(0,d.kt)("p",null,"Returns a decoded base64 string."),(0,d.kt)("h4",{id:"parameters-1"},"Parameters:"),(0,d.kt)("ol",null,(0,d.kt)("li",{parentName:"ol"},(0,d.kt)("inlineCode",{parentName:"li"},"data")," \u2014 A string of base64 data.")),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-pluto"},'local base64 = require("base64")\n\nbase64.decode("SGVsbG8sIFdvcmxkIQ==")\n--[[\n    Hello, World!\n--]]\n')),(0,d.kt)("h3",{id:"base64url_encodedata-pad"},"base64.url_encode(data, pad)"),(0,d.kt)("p",null,"Returns a base64url-encoded string. This variant is sometimes refered to as filename safe base64."),(0,d.kt)("h3",{id:"base64url_decodedata"},"base64.url_decode(data)"),(0,d.kt)("p",null,"Similar to ",(0,d.kt)("inlineCode",{parentName:"p"},"base64.decode")," except for base64url."),(0,d.kt)("h2",{id:"base58"},"base58"),(0,d.kt)("h3",{id:"base58decodedata"},"base58.decode(data)"),(0,d.kt)("p",null,"Returns a hexadecimal string of decoded base58 data."),(0,d.kt)("h4",{id:"parameters-2"},"Parameters:"),(0,d.kt)("ol",null,(0,d.kt)("li",{parentName:"ol"},(0,d.kt)("inlineCode",{parentName:"li"},"data")," \u2014 A string of base58 data.")),(0,d.kt)("h3",{id:"base58is_validdata"},"base58.is_valid(data)"),(0,d.kt)("p",null,"Returns a boolean indicating whether or not ",(0,d.kt)("inlineCode",{parentName:"p"},"data")," is valid base58 data."),(0,d.kt)("h2",{id:"base32"},"base32"),(0,d.kt)("h3",{id:"base32encodedata-pad"},"base32.encode(data, pad)"),(0,d.kt)("p",null,"Returns an encoded base32 string."),(0,d.kt)("h4",{id:"parameters-3"},"Parameters:"),(0,d.kt)("ol",null,(0,d.kt)("li",{parentName:"ol"},(0,d.kt)("inlineCode",{parentName:"li"},"data")," \u2014 A string of data to encode."),(0,d.kt)("li",{parentName:"ol"},(0,d.kt)("inlineCode",{parentName:"li"},"pad")," \u2014 Whether or not to apply padding.")),(0,d.kt)("h3",{id:"base32decodedata"},"base32.decode(data)"),(0,d.kt)("p",null,"Returns a decoded base32 string."),(0,d.kt)("h4",{id:"parameters-4"},"Parameters:"),(0,d.kt)("ol",null,(0,d.kt)("li",{parentName:"ol"},(0,d.kt)("inlineCode",{parentName:"li"},"data")," \u2014 A string of base32 data to decode.")),(0,d.kt)("h2",{id:"json"},"json"),(0,d.kt)("h3",{id:"jsonencodedata-pretty"},"json.encode(data, pretty)"),(0,d.kt)("p",null,"Returns a string of JSON."),(0,d.kt)("h4",{id:"parameters-5"},"Parameters:"),(0,d.kt)("ol",null,(0,d.kt)("li",{parentName:"ol"},(0,d.kt)("inlineCode",{parentName:"li"},"data")," \u2014 A boolean, number, string, or table to encode as JSON."),(0,d.kt)("li",{parentName:"ol"},(0,d.kt)("inlineCode",{parentName:"li"},"pretty")," \u2014 Whether to return a human-readable string of JSON.")),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-pluto"},'local json = require("json")\nlocal data, encoded\n\ndata = "Hello, World!"\nencoded = json.encode(data, true)\n--[[\n    "Hello, World!"\n--]]\n\ndata = \n{\n    key = "Hello, World!"\n    nested = {\n        nested_key = 1337\n    }\n}\nencoded = json.encode(data, true)\n--[[\n    {\n        "nested": {\n            "nested_key": 1337\n        },\n        "key": "Hello, World!"\n    }\n--]]\n')),(0,d.kt)("h3",{id:"jsondecodedata"},"json.decode(data)"),(0,d.kt)("p",null,"Returns multiple potential types. If you pass a serialized boolean, number, or string, then it will return the same type. If you pass a complex JSON object, it will return a table."),(0,d.kt)("h4",{id:"parameters-6"},"Parameters:"),(0,d.kt)("ol",null,(0,d.kt)("li",{parentName:"ol"},(0,d.kt)("inlineCode",{parentName:"li"},"data")," \u2014 The JSON data to decode.")),(0,d.kt)("pre",null,(0,d.kt)("code",{parentName:"pre",className:"language-pluto"},'local json = require("json")\nlocal data, encoded, decoded\n\n-- Basic Type\n\ndata = "Hello, World!"\nencoded = json.encode(data, true)\ndecoded = json.decode(encoded)\n\nassert(decoded == data)\nassert(type(decoded) == "string")\n\n-- Complex Type\n\ndata = {\n    key = "Hello",\n    nested = {\n        nested_key = 1337\n    }\n}\nencoded = json.encode(data, true)\ndecoded = json.decode(encoded)\n\nassert(decoded.key == "Hello")\nassert(type(decoded) == "table")\nassert(decoded.nested.nested_key == 1337)\n')))}u.isMDXComponent=!0}}]);