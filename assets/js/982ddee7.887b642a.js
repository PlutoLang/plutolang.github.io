"use strict";(self.webpackChunkpluto=self.webpackChunkpluto||[]).push([[9956],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>c});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function s(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?s(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function i(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var o=n.createContext({}),u=function(e){var r=n.useContext(o),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},p=function(e){var r=u(e.components);return n.createElement(o.Provider,{value:r},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},k=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,s=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=u(t),k=a,c=m["".concat(o,".").concat(k)]||m[k]||d[k]||s;return t?n.createElement(c,l(l({ref:r},p),{},{components:t})):n.createElement(c,l({ref:r},p))}));function c(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var s=t.length,l=new Array(s);l[0]=k;var i={};for(var o in r)hasOwnProperty.call(r,o)&&(i[o]=r[o]);i.originalType=e,i[m]="string"==typeof e?e:a,l[1]=i;for(var u=2;u<s;u++)l[u]=t[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}k.displayName="MDXCreateElement"},6077:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>o,contentTitle:()=>l,default:()=>d,frontMatter:()=>s,metadata:()=>i,toc:()=>u});var n=t(7462),a=(t(7294),t(3905));const s={sidebar_position:2},l=void 0,i={unversionedId:"Runtime Environment/Library Reference/Assert",id:"Runtime Environment/Library Reference/Assert",title:"Assert",description:"Must be included via require.",source:"@site/docs/Runtime Environment/Library Reference/Assert.md",sourceDirName:"Runtime Environment/Library Reference",slug:"/Runtime Environment/Library Reference/Assert",permalink:"/docs/Runtime Environment/Library Reference/Assert",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"JSON",permalink:"/docs/Runtime Environment/Library Reference/JSON"},next:{title:"Crypto",permalink:"/docs/Runtime Environment/Library Reference/Crypto"}},o={},u=[{value:"<code>assert.isnil</code>",id:"assertisnil",level:3},{value:"Parameters",id:"parameters",level:4},{value:"Errors",id:"errors",level:4},{value:"<code>assert.istrue</code>",id:"assertistrue",level:3},{value:"Parameters",id:"parameters-1",level:4},{value:"Errors",id:"errors-1",level:4},{value:"<code>assert.isfalse</code>",id:"assertisfalse",level:3},{value:"Parameters",id:"parameters-2",level:4},{value:"Errors",id:"errors-2",level:4},{value:"<code>assert.falsy</code>",id:"assertfalsy",level:3},{value:"Parameters",id:"parameters-3",level:4},{value:"Errors",id:"errors-3",level:4},{value:"<code>assert.truthy</code>",id:"asserttruthy",level:3},{value:"Parameters",id:"parameters-4",level:4},{value:"Errors",id:"errors-4",level:4},{value:"<code>assert.notnil</code>",id:"assertnotnil",level:3},{value:"Parameters",id:"parameters-5",level:4},{value:"Errors",id:"errors-5",level:4},{value:"<code>assert.equal</code>",id:"assertequal",level:3},{value:"Parameters",id:"parameters-6",level:4},{value:"Errors",id:"errors-6",level:4},{value:"<code>assert.nequal</code>",id:"assertnequal",level:3},{value:"Parameters",id:"parameters-7",level:4},{value:"Errors",id:"errors-7",level:4},{value:"<code>assert.less</code>",id:"assertless",level:3},{value:"Parameters",id:"parameters-8",level:4},{value:"Errors",id:"errors-8",level:4},{value:"<code>assert.lesseq</code>",id:"assertlesseq",level:3},{value:"Parameters",id:"parameters-9",level:4},{value:"Errors",id:"errors-9",level:4},{value:"<code>assert.greater</code>",id:"assertgreater",level:3},{value:"Parameters",id:"parameters-10",level:4},{value:"Errors",id:"errors-10",level:4},{value:"<code>assert.greatereq</code>",id:"assertgreatereq",level:3},{value:"Parameters",id:"parameters-11",level:4},{value:"Errors",id:"errors-11",level:4},{value:"<code>assert.noerror</code>",id:"assertnoerror",level:3},{value:"Parameters",id:"parameters-12",level:4},{value:"Errors",id:"errors-12",level:4},{value:"<code>assert.haserror</code>",id:"asserthaserror",level:3},{value:"Parameters",id:"parameters-13",level:4},{value:"Errors",id:"errors-13",level:4},{value:"<code>assert.searcherror</code>",id:"assertsearcherror",level:3},{value:"Parameters",id:"parameters-14",level:4},{value:"Errors",id:"errors-14",level:4}],p={toc:u},m="wrapper";function d(e){let{components:r,...t}=e;return(0,a.kt)(m,(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Must be included via ",(0,a.kt)("inlineCode",{parentName:"p"},"require"),"."),(0,a.kt)("h3",{id:"assertisnil"},(0,a.kt)("inlineCode",{parentName:"h3"},"assert.isnil")),(0,a.kt)("p",null,"Asserts that ",(0,a.kt)("inlineCode",{parentName:"p"},"value")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"nil")),(0,a.kt)("h4",{id:"parameters"},"Parameters"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"value")," \u2014 The value which ",(0,a.kt)("em",{parentName:"li"},"should")," be nil.")),(0,a.kt)("h4",{id:"errors"},"Errors"),(0,a.kt)("p",null,"An assertion error is thrown if the ",(0,a.kt)("inlineCode",{parentName:"p"},"value")," is not ",(0,a.kt)("inlineCode",{parentName:"p"},"nil"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local assert = require("assert")\n\nassert.isnil(nil) --\x3e Passes.\nassert.isnil(5) --\x3e Error:\n--[[\ntest.pluto:4 -> Assertion Error: (assert.isnil)\n    Intended Value: nil\n    Received Value: 5\n\nstack traceback:\n    [C]: in function \'error\'\n    [string "pluto:assert"]:75: in function <[string "pluto:assert"]:46>\n    (...tail calls...)\n    [C]: in ?\n--]]\n')),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"assertistrue"},(0,a.kt)("inlineCode",{parentName:"h3"},"assert.istrue")),(0,a.kt)("p",null,"Asserts that ",(0,a.kt)("inlineCode",{parentName:"p"},"value")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,a.kt)("h4",{id:"parameters-1"},"Parameters"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"value")," \u2014 The value which ",(0,a.kt)("em",{parentName:"li"},"should")," be ",(0,a.kt)("inlineCode",{parentName:"li"},"true"),".")),(0,a.kt)("h4",{id:"errors-1"},"Errors"),(0,a.kt)("p",null,"An assertion error is thrown if ",(0,a.kt)("inlineCode",{parentName:"p"},"value")," is not ",(0,a.kt)("inlineCode",{parentName:"p"},"true")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local assert = require("assert")\n\nassert.istrue(true) --\x3e Passes.\nassert.istrue(false) --\x3e Error:\n--[[\npluto: test.pluto:4 -> Assertion Error: (assert.istrue)\n    Intended Value: true\n    Received Value: false\n\nstack traceback:\n    [C]: in function \'error\'\n    [string "pluto:assert"]:75: in function <[string "pluto:assert"]:46>\n    (...tail calls...)\n    test.pluto:4: in main chunk\n    [C]: in ?\n--]]\n')),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"assertisfalse"},(0,a.kt)("inlineCode",{parentName:"h3"},"assert.isfalse")),(0,a.kt)("p",null,"Asserts that ",(0,a.kt)("inlineCode",{parentName:"p"},"value")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,a.kt)("h4",{id:"parameters-2"},"Parameters"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"value")," \u2014 The value which ",(0,a.kt)("em",{parentName:"li"},"should")," be ",(0,a.kt)("inlineCode",{parentName:"li"},"false"),".")),(0,a.kt)("h4",{id:"errors-2"},"Errors"),(0,a.kt)("p",null,"An assertion error is thrown if ",(0,a.kt)("inlineCode",{parentName:"p"},"value")," is not ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local assert = require("assert")\n\nassert.isfalse(false) --\x3e Passes.\nassert.isfalse(true) --\x3e Error:\n--[[\npluto: test.pluto:4 -> Assertion Error: (assert.isfalse)\n    Intended Value: false\n    Received Value: true\n\nstack traceback:\n    [C]: in function \'error\'\n    [string "pluto:assert"]:75: in function <[string "pluto:assert"]:46>\n    (...tail calls...)\n    test.pluto:4: in main chunk\n    [C]: in ?\n--]]\n')),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"assertfalsy"},(0,a.kt)("inlineCode",{parentName:"h3"},"assert.falsy")),(0,a.kt)("p",null,"Asserts that ",(0,a.kt)("inlineCode",{parentName:"p"},"value"),' is a "falsy" value. Falsy means the value is ',(0,a.kt)("inlineCode",{parentName:"p"},"nil")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,a.kt)("h4",{id:"parameters-3"},"Parameters"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"value")," \u2014 The value which ",(0,a.kt)("em",{parentName:"li"},"should")," be falsy.")),(0,a.kt)("h4",{id:"errors-3"},"Errors"),(0,a.kt)("p",null,"An assertion error is thrown if ",(0,a.kt)("inlineCode",{parentName:"p"},"value")," is not falsy."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local assert = require("assert")\n\nassert.falsy(nil) --\x3e Passes.\nassert.falsy(false) --\x3e Passes.\nassert.falsy("Hello, world!") --\x3e Error:\n--[[\npluto: test.pluto:4 -> Assertion Error: (assert.falsy)\n    Intended Value: nil or false\n    Received Value: string(13) "Hello, world!"\n\nstack traceback:\n    [C]: in function \'error\'\n    [string "pluto:assert"]:75: in function <[string "pluto:assert"]:46>\n    (...tail calls...)\n    test.pluto:4: in main chunk\n    [C]: in ?\n--]]\n')),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"asserttruthy"},(0,a.kt)("inlineCode",{parentName:"h3"},"assert.truthy")),(0,a.kt)("p",null,"Asserts that ",(0,a.kt)("inlineCode",{parentName:"p"},"value"),' is a "truthy" value. This is the inverse of "falsy", a.k.a, any value that isn\'t ',(0,a.kt)("inlineCode",{parentName:"p"},"nil")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," is truthy."),(0,a.kt)("h4",{id:"parameters-4"},"Parameters"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"value")," \u2014 The value which ",(0,a.kt)("em",{parentName:"li"},"should")," be truthy, a.k.a it ",(0,a.kt)("em",{parentName:"li"},"should not")," be ",(0,a.kt)("inlineCode",{parentName:"li"},"nil")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"false"),".")),(0,a.kt)("h4",{id:"errors-4"},"Errors"),(0,a.kt)("p",null,"An assertion error is thrown if ",(0,a.kt)("inlineCode",{parentName:"p"},"value")," is not truthy, i.e if ",(0,a.kt)("inlineCode",{parentName:"p"},"value")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"nil")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local assert = require("assert")\n\nassert.truthy("Hello, world!") --\x3e Passes.\nassert.truthy(nil) --\x3e Error:\n--[[\npluto: test.pluto:4 -> Assertion Error: (assert.truthy)\n    Intended Value: not nil or false\n    Received Value: nil\n\nstack traceback:\n    [C]: in function \'error\'\n    [string "pluto:assert"]:75: in function <[string "pluto:assert"]:46>\n    (...tail calls...)\n    test.pluto:4: in main chunk\n    [C]: in ?\n--]]\n')),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"assertnotnil"},(0,a.kt)("inlineCode",{parentName:"h3"},"assert.notnil")),(0,a.kt)("p",null,"Asserts that ",(0,a.kt)("inlineCode",{parentName:"p"},"value")," is not ",(0,a.kt)("inlineCode",{parentName:"p"},"nil"),"."),(0,a.kt)("h4",{id:"parameters-5"},"Parameters"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"value")," \u2014 The value which should ",(0,a.kt)("em",{parentName:"li"},"not")," be ",(0,a.kt)("inlineCode",{parentName:"li"},"nil"),".")),(0,a.kt)("h4",{id:"errors-5"},"Errors"),(0,a.kt)("p",null,"An assertion error is thrown if ",(0,a.kt)("inlineCode",{parentName:"p"},"value")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"nil"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local assert = require("assert")\n\nassert.notnil("Hello, world!") --\x3e Passes.\nassert.notnil(nil) --\x3e Error:\n--[[\npluto: test.pluto:4 -> Assertion Error: (assert.notnil)\n    Intended Value: not nil\n    Received Value: nil\n\nstack traceback:\n    [C]: in function \'error\'\n    [string "pluto:assert"]:75: in function <[string "pluto:assert"]:46>\n    (...tail calls...)\n    test.pluto:4: in main chunk\n    [C]: in ?\n--]]\n')),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"assertequal"},(0,a.kt)("inlineCode",{parentName:"h3"},"assert.equal")),(0,a.kt)("p",null,"Asserts that ",(0,a.kt)("inlineCode",{parentName:"p"},"value1")," is equal to ",(0,a.kt)("inlineCode",{parentName:"p"},"value2"),"."),(0,a.kt)("p",null,"This function can compare tables, looking at both the table's reference and what's inside it. If the tables aren't exactly the same (meaning they don't reference the same table), the function will go through the contents of the tables and compare them step by step."),(0,a.kt)("h4",{id:"parameters-6"},"Parameters"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"value1")," \u2014 The first value."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"value2")," \u2014 The second value.")),(0,a.kt)("h4",{id:"errors-6"},"Errors"),(0,a.kt)("p",null,"An assertion error is thrown if ",(0,a.kt)("inlineCode",{parentName:"p"},"value1")," does not equal ",(0,a.kt)("inlineCode",{parentName:"p"},"value2"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local assert = require("assert")\n\nassert.equal("Hello, world!", "Hello, world...") --\x3e Error:\n--[[\npluto: test.pluto:3 -> Assertion Error: (assert.equal)\n    Intended Value: string(13) "Hello, world!"\n    Received Value: string(15) "Hello, world..."\n--]]\n\nassert.equal("Hi there.":split(" "), "Hello there.":split(" ")) --\x3e Error:\n--[[\npluto: test.pluto:4 -> Assertion Error: (assert.equal)\n    Intended Value: { [1] = string(2) "Hi", [2] = string(6) "there.", }\n    Received Value: { [1] = string(5) "Hello", [2] = string(6) "there.", }\n--]]\n')),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"assertnequal"},(0,a.kt)("inlineCode",{parentName:"h3"},"assert.nequal")),(0,a.kt)("p",null,"Asserts that ",(0,a.kt)("inlineCode",{parentName:"p"},"value1")," is ",(0,a.kt)("em",{parentName:"p"},"not")," equal to ",(0,a.kt)("inlineCode",{parentName:"p"},"value2"),"."),(0,a.kt)("p",null,"This function can compare tables, looking at both the table's reference and what's inside it. If the tables aren't exactly the same (meaning they don't reference the same table), the function will go through the contents of the tables and compare them step by step."),(0,a.kt)("h4",{id:"parameters-7"},"Parameters"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"value1")," \u2014 The first value."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"value2")," \u2014 The second value.")),(0,a.kt)("h4",{id:"errors-7"},"Errors"),(0,a.kt)("p",null,"An assertion error is thrown of ",(0,a.kt)("inlineCode",{parentName:"p"},"value1")," does equal ",(0,a.kt)("inlineCode",{parentName:"p"},"value2"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local assert = require("assert")\n\nassert.nequal("Hello, world!", "Hi, world!") --\x3e Passes.\nassert.nequal("Hi there.":split(" "), "Hello there.":split(" ")) --\x3e Passes.\n')),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"assertless"},(0,a.kt)("inlineCode",{parentName:"h3"},"assert.less")),(0,a.kt)("p",null,"Asserts that ",(0,a.kt)("inlineCode",{parentName:"p"},"value1")," is less than ",(0,a.kt)("inlineCode",{parentName:"p"},"value2"),"."),(0,a.kt)("h4",{id:"parameters-8"},"Parameters"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"value1")," \u2014 The first number."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"value2")," \u2014 The second number.")),(0,a.kt)("h4",{id:"errors-8"},"Errors"),(0,a.kt)("p",null,"An assertion error is thrown if ",(0,a.kt)("inlineCode",{parentName:"p"},"value1")," is not less than ",(0,a.kt)("inlineCode",{parentName:"p"},"value2"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local assert = require("assert")\n\nassert.less(1, 2) --\x3e Passes.\nassert.less(1, 1) --\x3e Error:\n--[[\npluto: test.pluto:4 -> Assertion Error: (assert.less)\n    Expression: (1 < 1) == false\n--]]\n')),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"assertlesseq"},(0,a.kt)("inlineCode",{parentName:"h3"},"assert.lesseq")),(0,a.kt)("p",null,"Asserts that ",(0,a.kt)("inlineCode",{parentName:"p"},"value1")," is less than or equal to ",(0,a.kt)("inlineCode",{parentName:"p"},"value2"),"."),(0,a.kt)("h4",{id:"parameters-9"},"Parameters"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"value1")," \u2014 The first number."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"value2")," \u2014 The second number.")),(0,a.kt)("h4",{id:"errors-9"},"Errors"),(0,a.kt)("p",null,"An assertion error is thrown if ",(0,a.kt)("inlineCode",{parentName:"p"},"value1")," is not less than or equal to ",(0,a.kt)("inlineCode",{parentName:"p"},"value2"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local assert = require("assert")\n\nassert.lesseq(1, 2) --\x3e Passes.\nassert.lesseq(1, 0) --\x3e Error:\n--[[\npluto: test.pluto:3 -> Assertion Error: (assert.lesseq)\n    Expression: (1 <= 0) == false\n--]]\n')),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"assertgreater"},(0,a.kt)("inlineCode",{parentName:"h3"},"assert.greater")),(0,a.kt)("p",null,"Asserts that ",(0,a.kt)("inlineCode",{parentName:"p"},"value1")," is greater than ",(0,a.kt)("inlineCode",{parentName:"p"},"value2"),"."),(0,a.kt)("h4",{id:"parameters-10"},"Parameters"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"value1")," \u2014 The first number."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"value2")," \u2014 The second number.")),(0,a.kt)("h4",{id:"errors-10"},"Errors"),(0,a.kt)("p",null,"An assertion errros is thrown if ",(0,a.kt)("inlineCode",{parentName:"p"},"value1")," is not greater than ",(0,a.kt)("inlineCode",{parentName:"p"},"value2"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local assert = require("assert")\n\nassert.greater(3, 2) --\x3e Passes.\nassert.greater(3, 3) --\x3e Error:\n--[[\npluto: test.pluto:4 -> Assertion Error: (assert.greater)\n    Expression: (3 > 3) == false\n--]]\n')),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"assertgreatereq"},(0,a.kt)("inlineCode",{parentName:"h3"},"assert.greatereq")),(0,a.kt)("p",null,"Asserts that ",(0,a.kt)("inlineCode",{parentName:"p"},"value1")," is greater than or equal to ",(0,a.kt)("inlineCode",{parentName:"p"},"value2"),"."),(0,a.kt)("h4",{id:"parameters-11"},"Parameters"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"value1")," \u2014 The first number."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"value2")," \u2014 The second number.")),(0,a.kt)("h4",{id:"errors-11"},"Errors"),(0,a.kt)("p",null,"An assertion errros is thrown if ",(0,a.kt)("inlineCode",{parentName:"p"},"value1")," is not greater than or equal to ",(0,a.kt)("inlineCode",{parentName:"p"},"value2"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local assert = require("assert")\n\nassert.greatereq(3, 2) --\x3e Passes.\nassert.greatereq(3, 3) --\x3e Passes.\n')),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"assertnoerror"},(0,a.kt)("inlineCode",{parentName:"h3"},"assert.noerror")),(0,a.kt)("p",null,"Asserts that ",(0,a.kt)("inlineCode",{parentName:"p"},"callback")," does not raise an error when called."),(0,a.kt)("h4",{id:"parameters-12"},"Parameters"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"callback")," \u2014 A function reference."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"...")," \u2014 Any other parameters passed to this function will be passed to the ",(0,a.kt)("inlineCode",{parentName:"li"},"callback"),".")),(0,a.kt)("h4",{id:"errors-12"},"Errors"),(0,a.kt)("p",null,"An assertion error is thrown if ",(0,a.kt)("inlineCode",{parentName:"p"},"callback")," raises an error."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local assert = require("assert")\n\nassert.noerror(tostring, 400) --\x3e Passes.\nassert.noerror(error, "argument argument") --\x3e Error:\n--[[\npluto: test.pluto:4 -> Assertion Error: (assert.noerror)\n    An error was raised: argument argument\n--]]\n')),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"asserthaserror"},(0,a.kt)("inlineCode",{parentName:"h3"},"assert.haserror")),(0,a.kt)("p",null,"Asserts that ",(0,a.kt)("inlineCode",{parentName:"p"},"callback")," does raise an error when called."),(0,a.kt)("h4",{id:"parameters-13"},"Parameters"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"callback")," \u2014 A function reference."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"...")," \u2014 Any other parameters passed to this function will be passed to the ",(0,a.kt)("inlineCode",{parentName:"li"},"callback"),".")),(0,a.kt)("h4",{id:"errors-13"},"Errors"),(0,a.kt)("p",null,"An assertion error is thrown if ",(0,a.kt)("inlineCode",{parentName:"p"},"callback")," does not raise an error."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local assert = require("assert")\n\nassert.haserror(error, "argument argument") --\x3e Passes.\nassert.haserror(tostring, 400) --\x3e Error:\n--[[\npluto: test.pluto:4 -> Assertion Error: (assert.haserror)\n    Expected an error, but there was none.\n--]]\n')),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"assertsearcherror"},(0,a.kt)("inlineCode",{parentName:"h3"},"assert.searcherror")),(0,a.kt)("p",null,"Asserts that ",(0,a.kt)("inlineCode",{parentName:"p"},"callback")," raises an error, and that ",(0,a.kt)("inlineCode",{parentName:"p"},"substring")," is present within the error message."),(0,a.kt)("h4",{id:"parameters-14"},"Parameters"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"substring")," \u2014 The substring that should be inside of the error message."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"callback")," \u2014 A function reference."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"...")," \u2014 Any other parameters passed to this function will be passed to the ",(0,a.kt)("inlineCode",{parentName:"li"},"callback"),".")),(0,a.kt)("h4",{id:"errors-14"},"Errors"),(0,a.kt)("p",null,"An assertion error is thrown if:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"callback")," does not raise an error."),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("inlineCode",{parentName:"li"},"callback")," does raise an error, but the error message does not contain ",(0,a.kt)("inlineCode",{parentName:"li"},"substring"),".")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-pluto",metastring:"showLineNumbers",showLineNumbers:!0},'local assert = require("assert")\n\nassert.searcherror("argument", error, "argument argument") --\x3e Passes.\nassert.searcherror("something", tostring, 400) --\x3e Error:\n--[[\npluto: test.pluto:4 -> Assertion Error: (assert.searcherror)\n    Expected an error, but there was none.\n--]]\n\nassert.searcherror("argument", error, "argument argument") --\x3e Passes.\nassert.searcherror("argument", error, "something something") --\x3e Error:\n--[[\npluto: test.pluto:4 -> Assertion Error: (assert.searcherror)\n    Absent String: argument\n    Error Message: something s\n--]]\n')))}d.isMDXComponent=!0}}]);